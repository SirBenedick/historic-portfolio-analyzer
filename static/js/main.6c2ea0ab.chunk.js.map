{"version":3,"sources":["stores/dbPromise.js","stores/idbPortfolioStore.js","stores/NotificationStore.js","stores/idbConfigStore.js","stores/ConfigStore.js","stores/idbSymbolDataStore.js","services/FetchDataService.js","stores/DataStore.js","components/SearchForSymbolInput.js","components/SelectedSymbolsBar.js","components/DatePicker.js","components/ChartSwitchStyle.js","components/TriggerRecalculatePortfolio.js","components/TriggerShowVisibleLines.js","components/Chart.js","components/PortfolioBuilder.js","pages/ChartingPage.js","pages/SettingsPage.js","components/Notifier.js","App.js","reportWebVitals.js","index.js"],"names":["window","console","log","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","idbPortfolioStore","get","key","set","val","put","delete","clear","keys","getAllKeys","doesDataSeriesExist","notificationStore","extendObservable","this","notifications","API_TOKEN_MISSING","PORTFOLIO_CALCULATING","API_TOKEN_STORED","enqueueSnackbar","action","note","push","Date","getTime","Math","random","removeSnackbar","filter","notification","idbConfigStore","configStore","alphaVantage","url","apiToken","alphaVantageConstants","SYMBOL_SEARCH","TIME_SERIES_DAILY_ADJUSTED","then","token","setAlphaVantageAPITokenHelper","setAlphaVantageAPITokenIDB","length","result","characters","charactersLength","i","charAt","floor","fakeToken","makeObservable","observable","newToken","message","options","variant","autoHideDuration","idbSymbolDataStore","getAdjustedCloseByTickerAndDate","date","data","getDataChartFormatBySymbol","calculateAndStoreHistoricPortfolioPerformance","symbolData","a","formateDataToChartFormat","FetchDataService","fetchDataDailyAdjustedForSymbolAlphaVantage","doesTimesSeriesDailyAdjustedExistForSymbol","getTimeSeriesDailyByTicker","symbolTicker","symbolQuantityMap","startingDate","moment","dataStore","portfolioStartingDate","endDate","Promise","all","getSymbolsWithoutPortfolio","map","symbolSet","format","startingDatePriceValue","add","endDatePriceValue","subtract","performanceSinceStart","parseFloat","setPerformanceSincePortfolioStartForTicker","startingDateValueOfThisSymbol","getSymbolSetForTicker","quantity","datesToCheck","isBefore","tempSymbolDatasetMap","tempDataSet","forEach","tempSumForDate","Object","entries","dataset","time","value","temp","dailyInformation","String","reverse","axios","params","function","symbol","outputsize","apikey","res","searchAlphaVantageByKeywords","keywords","matches","searchResultsFormated","name","region","currency","DataStore","symbols","isVisible","color","nextAvailableColorValue","pendingRequests","appleData","triggerRecalculatePortfolio","triggerRerenderVisibleLines","toggleSymbolVisibility","addSymbol","removeSelectedSymbol","setValueForTicker","setTriggerRecalculatePortfolio","setTriggerRerenderVisibleLines","setPortfolioStartingDate","totalValueOfSymbols","computed","listOfSymbolTickers","autorun","trigger","trigger2","JSON","stringify","bool","symbolSetSearchResult","compareSymbolSets","b","performanceSincePortfolioStart","sort","symbolTickerToDelete","removeColorInUse","changedSymbolbyTicker","doesExist","toJS","find","changedSymbolByTicker","availableColorValue","index","chartColorsForSeries","element","isBegingUsed","colorValue","reduce","pv","filterOptions","createFilterOptions","matchFrom","option","SearchForSymbolInput","observer","React","useState","searchOptions","setSearchOptions","isLoadingSearch","setIsLoadingSearch","searchTimeout","setSearchTimeout","setValue","handleValueChange","handleSearch","clearTimeout","timeout","setTimeout","handleSearchSelect","symbolSearchResult","doesSymbolExist","Autocomplete","id","loading","onChange","event","renderOption","Typography","renderInput","TextField","label","target","style","minWidth","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","SelectedSymbolsBar","classes","Paper","className","Grid","container","alignItems","item","xs","direction","justify","Chip","onClick","symbolTickerToHide","onDelete","clickable","backgroundColor","DatePicker","utils","MomentUtils","disableToolbar","KeyboardButtonProps","ChartSwitchStyle","selectedChartStyleType","switchStyle","checkedA","state","setState","FormGroup","row","FormControlLabel","control","Switch","checked","TriggerRecalculatePortfolio","recalculateAndRenderPortfolio","useEffect","TriggerShowVisibleLines","rerenderVisibleLines","Chart","props","myRef","createRef","chart","lineSeriesObj","bind","createGraphForSelectedSymbols","addLineSeriesData","renderChart","current","firstChild","removeChild","createChart","styleDefault","applyOptions","stylePercent","tempListOfAllSymbols","lineSeries","includes","removeSeries","tempLineSeries","dataForSymbol","setData","addLineSeries","series","marginTop","refreshData","ref","Component","height","rightPriceScale","scaleMargins","top","bottom","mode","PriceScaleMode","Normal","borderColor","Percentage","PortfolioBuilder","TableContainer","component","Table","table","aria-label","size","TableHead","TableRow","TableCell","align","Tooltip","title","placement","fontSize","maxWidth","TableBody","scope","performance","toFixed","type","noWrap","ChartingPage","SettingsPage","elevation","gutterBottom","defaultValue","e","Link","href","rel","Notifier","displayed","storeDisplayed","removeKey","delayUntilRemoveMs","removeDisplayedNotificationByKey","withSnackbar","inject","drawerWidth","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","flexGrow","App","useTheme","open","setOpen","chartingPage","showPage","settingsPage","pages","setPages","handlePageSelect","pageToShow","tempPages","page","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","edge","Drawer","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.6c2ea0ab.chunk.js","sourcesContent":["import { openDB } from \"idb\";\n\nif (!(\"indexedDB\" in window)) {\n  console.log(\"This browser doesn't support IndexedDB\");\n}\n\nconst dbPromise = openDB(\"historic-portfolio-analyzer\", 1, {\n  upgrade(db) {\n    if (!db.objectStoreNames.contains(\"symbolDataStore\")) {\n      console.log(\"Creating new symbolDataStore\");\n      db.createObjectStore(\"symbolDataStore\", {\n        keyPath: \"symbol\",\n        autoIncrement: false,\n      });\n    }\n    if (!db.objectStoreNames.contains(\"portfolioStore\")) {\n      console.log(\"Creating new portfolioStore\");\n      db.createObjectStore(\"portfolioStore\");\n    }\n    if (!db.objectStoreNames.contains(\"configStore\")) {\n      console.log(\"Creating new configStore\");\n      db.createObjectStore(\"configStore\");\n    }\n  },\n});\n\nexport default dbPromise;\n","import dbPromise from \"./dbPromise\";\n\nconst idbPortfolioStore = {\n  async get(key) {\n    return (await dbPromise).get(\"portfolioStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"portfolioStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"portfolioStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"portfolioStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"portfolioStore\");\n  },\n  async doesDataSeriesExist() {\n    const data = await this.get(\"dataSeries\");\n    if (data) return true;\n    else return false;\n  },\n};\n\nexport default idbPortfolioStore;\n","import { action, extendObservable } from \"mobx\";\n\nconst NotificationStore = function () {\n  extendObservable(this, {\n    notifications: [],\n    keys: {\n      API_TOKEN_MISSING: \"API_TOKEN_MISSING\",\n      PORTFOLIO_CALCULATING: \"PORTFOLIO_CALCULATING\",\n      API_TOKEN_STORED: \"API_TOKEN_STORED\",\n    },\n\n    enqueueSnackbar: action((note) => {\n      this.notifications.push({\n        key: note.key ? note.key : new Date().getTime() + Math.random(),\n        ...note,\n      });\n    }),\n\n    removeSnackbar: action((key) => {\n      this.notifications = this.notifications.filter((notification) => notification.key !== key);\n    }),\n  });\n};\n\nconst notificationStore = new NotificationStore();\nexport default notificationStore;\n","import dbPromise from \"./dbPromise\";\n\nconst idbConfigStore = {\n  async get(key) {\n    return (await dbPromise).get(\"configStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"configStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"configStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"configStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"configStore\");\n  },\n};\n\nexport default idbConfigStore;\n","import { makeObservable, observable, action } from \"mobx\";\nimport idbConfigStore from \"./idbConfigStore\";\nimport notificationStore from \"./NotificationStore\";\n\nclass ConfigStore {\n  alphaVantage = { url: \"https://www.alphavantage.co/query\", apiToken: \"\" };\n  alphaVantageConstants = { SYMBOL_SEARCH: \"SYMBOL_SEARCH\", TIME_SERIES_DAILY_ADJUSTED: \"TIME_SERIES_DAILY_ADJUSTED\" };\n\n  constructor() {\n    // Load stored API token from idbConfigStore or create a Token\n    idbConfigStore.get(\"alphaVantagAPIToken\").then((token) => {\n      if (token) this.setAlphaVantageAPITokenHelper(token);\n      else {\n        this.setAlphaVantageAPITokenIDB(fakeToken(16));\n      }\n    });\n\n    makeObservable(this, {\n      alphaVantage: observable,\n      setAlphaVantageAPITokenHelper: action,\n    });\n  }\n\n  // Store new alphaVantagAPIToken to idbConfigStore then store in mobx store\n  async setAlphaVantageAPITokenIDB(newToken) {\n    await idbConfigStore.set(\"alphaVantagAPIToken\", newToken);\n    notificationStore.enqueueSnackbar({\n      message: \"Stored new API-Token\",\n      options: {\n        variant: \"success\",\n        autoHideDuration: 1000,\n      },\n      key: notificationStore.keys.API_TOKEN_STORED,\n    });\n    this.setAlphaVantageAPITokenHelper(newToken);\n  }\n\n  setAlphaVantageAPITokenHelper(newToken) {\n    this.alphaVantage.apiToken = newToken;\n  }\n}\n\nfunction fakeToken(length) {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst configStore = new ConfigStore();\nexport default configStore;\n","import dbPromise from \"./dbPromise\";\nimport dataStore from \"./DataStore\";\nimport moment from \"moment\";\nimport FetchDataService from \"../services/FetchDataService\";\nimport idbPortfolioStore from \"./idbPortfolioStore\";\nimport notificationStore from \"./NotificationStore\";\nimport configStore from \"./ConfigStore\";\n\nconst idbSymbolDataStore = {\n  async get(key) {\n    return (await dbPromise).get(\"symbolDataStore\", key);\n  },\n  async set(val) {\n    return (await dbPromise).put(\"symbolDataStore\", val);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"symbolDataStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"symbolDataStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"symbolDataStore\");\n  },\n  async getAdjustedCloseByTickerAndDate(key, date) {\n    const data = await this.get(key);\n    if (data && \"Time Series (Daily)\" in data) {\n      if (data[\"Time Series (Daily)\"][date]) return data[\"Time Series (Daily)\"][date][\"5. adjusted close\"];\n    }\n    return false;\n  },\n  async getDataChartFormatBySymbol(key) {\n    console.log(\"getDataChartFormatBySymbol: \" + key);\n    // TODO ensure consistent order old -> new\n    if (key === \"Portfolio\") {\n      const doesPortfolioDataExist = await idbPortfolioStore.doesDataSeriesExist();\n      if (doesPortfolioDataExist) {\n        return idbPortfolioStore.get(\"dataSeries\");\n      } else {\n        return this.calculateAndStoreHistoricPortfolioPerformance();\n      }\n    } else {\n      return (await dbPromise).get(\"symbolDataStore\", key).then(async (symbolData) => {\n        // Check doesTimesSeriesDailyAdjustedExistForSymbol else fetch data\n        if (symbolData && \"Time Series (Daily)\" in symbolData && symbolData[\"Time Series (Daily)\"]) {\n          return formateDataToChartFormat(symbolData);\n        } else {\n          // Check if api token exist\n          if (configStore.alphaVantage.apiToken) {\n            const wasDataFetched = await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(key);\n            if (wasDataFetched) return this.getDataChartFormatBySymbol(key);\n          } else {\n            notificationStore.enqueueSnackbar({\n              message: `Please enter an API key on the Settings Page`,\n              options: {\n                variant: \"error\",\n                autoHideDuration: 2500,\n              },\n              key: notificationStore.keys.API_TOKEN_MISSING,\n            });\n          }\n        }\n      });\n    }\n  },\n  async doesTimesSeriesDailyAdjustedExistForSymbol(key) {\n    const data = await this.get(key);\n    if (data && \"Time Series (Daily)\" in data && data[\"Time Series (Daily)\"]) return true;\n    return false;\n  },\n  async getTimeSeriesDailyByTicker(symbolTicker) {\n    const data = await this.get(symbolTicker);\n    return data[\"Time Series (Daily)\"];\n  },\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    console.log(\"calculateAndStoreHistoricPortfolioPerformance\");\n    notificationStore.enqueueSnackbar({\n      message: `Calculating Portfolio value`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 2000,\n      },\n      key: notificationStore.keys.PORTFOLIO_CALCULATING,\n    });\n\n    //  Calculate for each asset the quantity at portfolio start and the performance since\n    console.log(\"Portfolio - calculating quantity\");\n    let symbolQuantityMap = {};\n    let startingDate = moment(dataStore.portfolioStartingDate);\n    let endDate = moment();\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        // Get price of asset for the portfolio starting date\n        let startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          startingDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!startingDatePriceValue) {\n          startingDate.add(1, \"days\");\n          startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            startingDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Get price of asset for the portfolio end date\n        let endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          endDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!endDatePriceValue) {\n          endDate.subtract(1, \"days\");\n          endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            endDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Calculate performanceSinceStart for this symbol and store the value\n        const performanceSinceStart = parseFloat(endDatePriceValue) / parseFloat(startingDatePriceValue);\n        dataStore.setPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, performanceSinceStart);\n\n        // Calculate quantity for this symbol\n        const startingDateValueOfThisSymbol = dataStore.getSymbolSetForTicker(symbolSet.symbolTicker)[\"value\"];\n        const quantity = parseFloat(startingDateValueOfThisSymbol) / parseFloat(startingDatePriceValue);\n\n        symbolQuantityMap[symbolSet.symbolTicker] = quantity;\n      })\n    );\n\n    // Generate a list of all days between dataStore.portfolioStartingDate and today (including both days)\n    console.log(\"Portfolio - list of dates\");\n    let datesToCheck = [];\n    let date = moment(dataStore.portfolioStartingDate);\n    while (date.isBefore()) {\n      datesToCheck.push(date.format(\"YYYY-MM-DD\"));\n      date.add(1, \"days\");\n    }\n\n    // Iterate through all days and calculate the total value\n    console.log(\"Portfolio - calculating for each day\");\n    let tempSymbolDatasetMap = {};\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        let tempDataSet = await idbSymbolDataStore.getTimeSeriesDailyByTicker(symbolSet.symbolTicker);\n        tempSymbolDatasetMap[symbolSet.symbolTicker] = tempDataSet;\n      })\n    );\n\n    let result = [];\n    datesToCheck.forEach((date) => {\n      let tempSumForDate = 0;\n      for (const [symbolTicker, dataset] of Object.entries(tempSymbolDatasetMap)) {\n        if (!(date in dataset)) return;\n        let tempValue = dataset[date][\"5. adjusted close\"];\n        tempSumForDate += tempValue * symbolQuantityMap[symbolTicker];\n      }\n      if (tempSumForDate) result.push({ time: date, value: tempSumForDate });\n    });\n\n    await idbPortfolioStore.set(\"dataSeries\", result);\n    return result;\n  },\n};\n\nconst formateDataToChartFormat = (symbolData) => {\n  let temp = [];\n  for (const [key, dailyInformation] of Object.entries(symbolData[\"Time Series (Daily)\"])) {\n    temp.push({ time: String(key), value: parseFloat(dailyInformation[\"5. adjusted close\"]) });\n  }\n  return temp.reverse();\n};\n\nexport default idbSymbolDataStore;\n","import axios from \"axios\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport notificationStore from \"../stores/NotificationStore\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst FetchDataService = {\n  async fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker) {\n    console.log(\"fetchDataDailyAdjustedForSymbolAlphaVantage\");\n    console.log(`Fetching data for ${symbolTicker}`);\n    notificationStore.enqueueSnackbar({\n      message: `Fetching data for: ${symbolTicker}`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 1500,\n      },\n      key: `FETCHING-${symbolTicker}`,\n    });\n    try {\n      const res = await axios.get(configStore.alphaVantage.url, {\n        params: {\n          function: configStore.alphaVantageConstants.TIME_SERIES_DAILY_ADJUSTED,\n          symbol: symbolTicker,\n          outputsize: \"full\",\n          apikey: configStore.alphaVantage.apiToken,\n        },\n      });\n      if (\"Note\" in res.data) {\n        console.log(\"Failed to fetch for: \" + symbolTicker);\n        notificationStore.enqueueSnackbar({\n          message: `Failed to fetch data for: ${symbolTicker}`,\n          options: {\n            variant: \"warning\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-FAILED-${symbolTicker}`,\n        });\n        return false;\n      } else {\n        res.data[\"symbol\"] = symbolTicker;\n        await idbSymbolDataStore.set(res.data);\n        // TODO check if received data was valid\n        notificationStore.enqueueSnackbar({\n          message: `Successfully fetched data for: ${symbolTicker}`,\n          options: {\n            variant: \"success\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-SUCCESS-${symbolTicker}`,\n        });\n        return symbolTicker;\n      }\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n    }\n  },\n  async searchAlphaVantageByKeywords(keywords) {\n    console.log(\"searchAlphaVantageByKeywords: \" + keywords);\n    const res = await axios.get(configStore.alphaVantage.url, {\n      params: {\n        function: configStore.alphaVantageConstants.SYMBOL_SEARCH,\n        keywords: keywords,\n        apikey: configStore.alphaVantage.apiToken,\n      },\n    });\n    if (\"Note\" in res.data) {\n      console.log(\"Failed to search for:\" + keywords);\n      notificationStore.enqueueSnackbar({\n        message: `Failed to search for: ${keywords}`,\n        options: {\n          variant: \"warning\",\n        },\n      });\n      return false;\n    } else {\n      const matches = res.data[\"bestMatches\"];\n      if (!matches) return [];\n      const searchResultsFormated = matches.map((result) => ({\n        symbolTicker: result[\"1. symbol\"],\n        name: result[\"2. name\"],\n        region: result[\"4. region\"],\n        currency: result[\"8. currency\"],\n      }));\n      return searchResultsFormated;\n    }\n  },\n};\n\nexport default FetchDataService;\n","import { makeObservable, observable, action, computed, toJS, autorun } from \"mobx\";\nimport moment from \"moment\";\nimport FetchDataService from \"../services/FetchDataService\";\nimport configStore from \"./ConfigStore\";\nimport idbSymbolDataStore from \"./idbSymbolDataStore\";\nimport notificationStore from \"./NotificationStore\";\nclass DataStore {\n  symbols = [\n    {\n      symbolTicker: \"Portfolio\",\n      isVisible: true,\n      value: 0,\n      color: this.nextAvailableColorValue(),\n    },\n  ];\n  pendingRequests = 0;\n  appleData = [];\n  portfolioStartingDate = \"\";\n  triggerRecalculatePortfolio = false;\n  triggerRerenderVisibleLines = false;\n\n  constructor() {\n    makeObservable(this, {\n      symbols: observable,\n      triggerRecalculatePortfolio: observable,\n      triggerRerenderVisibleLines: observable,\n      portfolioStartingDate: observable,\n      toggleSymbolVisibility: action,\n      addSymbol: action,\n      removeSelectedSymbol: action,\n      setValueForTicker: action,\n      setPerformanceSincePortfolioStartForTicker: action,\n      setTriggerRecalculatePortfolio: action,\n      setTriggerRerenderVisibleLines: action,\n      setPortfolioStartingDate: action,\n      totalValueOfSymbols: computed,\n      listOfSymbolTickers: computed,\n    });\n\n    this.portfolioStartingDate = moment().subtract(1, \"years\").format(\"YYYY-MM-DD\");\n\n    this.addSymbol({ symbolTicker: \"AAPL\", name: \"Apple Inc.\", region: \"testRegion\", currency: \"USD\" });\n\n    autorun(() => {\n      const trigger = this.portfolioStartingDate;\n      const trigger2 = this.totalValueOfSymbols;\n\n      this.setTriggerRecalculatePortfolio(true);\n      console.log(\"Autorun: triggering portfolio rercalculation\" + JSON.stringify(trigger) + JSON.stringify(trigger2));\n    });\n  }\n\n  setTriggerRecalculatePortfolio(bool) {\n    this.triggerRecalculatePortfolio = bool;\n  }\n\n  setTriggerRerenderVisibleLines(bool) {\n    this.triggerRerenderVisibleLines = bool;\n  }\n\n  async addSymbol(symbolSetSearchResult) {\n    const compareSymbolSets = (a, b) => {\n      if (b.symbolTicker === \"Portfolio\") {\n        return 1;\n      }\n      if (a.symbolTicker < b.symbolTicker) {\n        return -1;\n      }\n      if (a.symbolTicker > b.symbolTicker) {\n        return 1;\n      }\n      return 0;\n    };\n\n    if (!symbolSetSearchResult) return false;\n    this.symbols.push({\n      symbolTicker: symbolSetSearchResult.symbolTicker,\n      name: symbolSetSearchResult.name,\n      currency: symbolSetSearchResult.currency,\n      performanceSincePortfolioStart: 1,\n      isVisible: true,\n      value: 100,\n      color: this.nextAvailableColorValue(),\n    });\n    this.symbols.sort(compareSymbolSets);\n    const doesDataAlreadyExists = await idbSymbolDataStore.doesTimesSeriesDailyAdjustedExistForSymbol(\n      symbolSetSearchResult.symbolTicker\n    );\n    if (!doesDataAlreadyExists) {\n      // Check if api token is set\n      if (configStore.alphaVantage.apiToken) {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolSetSearchResult.symbolTicker);\n      } else {\n        notificationStore.enqueueSnackbar({\n          message: `Please enter an API key on the Settings Page`,\n          options: {\n            variant: \"error\",\n            autoHideDuration: 2500,\n          },\n          key: notificationStore.keys.API_TOKEN_MISSING,\n        });\n      }\n    }\n    //  TODO check if this  could be optimized\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  removeSelectedSymbol(symbolTickerToDelete) {\n    this.removeColorInUse(this.getSymbolSetForTicker(symbolTickerToDelete).color);\n    this.symbols = this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== symbolTickerToDelete);\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  toggleSymbolVisibility(changedSymbolbyTicker) {\n    console.log(changedSymbolbyTicker);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolbyTicker) {\n        symbol.isVisible = !symbol.isVisible;\n      }\n    });\n    this.setTriggerRerenderVisibleLines(true);\n  }\n\n  setPortfolioStartingDate(date) {\n    this.portfolioStartingDate = date;\n  }\n\n  get totalValueOfSymbols() {\n    return this.symbols.reduce((pv, symbolSet) => {\n      if (symbolSet.symbolTicker !== \"Portfolio\") return +pv + +symbolSet.value;\n      else return pv;\n    }, 0);\n  }\n\n  async doesSymbolExist(symbolTicker) {\n    let doesExist = false;\n    this.symbols.forEach((symbolSet) => {\n      if (symbolSet.symbolTicker === symbolTicker) {\n        doesExist = true;\n      }\n    });\n    return doesExist;\n  }\n\n  getSymbolSetForTicker(symbolTicker) {\n    return toJS(this.symbols.find((symbolSet) => symbolSet.symbolTicker === symbolTicker));\n  }\n\n  getSymbolsWithoutPortfolio() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n  }\n\n  get listOfSymbolTickers() {\n    return this.symbols.map((symbolSet) => symbolSet.symbolTicker);\n  }\n\n  setValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating value: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.value = value;\n      }\n    });\n  }\n\n  setPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating performanceSincePortfolioStart: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.performanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  nextAvailableColorValue() {\n    let availableColorValue = null;\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (!element.isBegingUsed) {\n        availableColorValue = element.colorValue;\n        element.isBegingUsed = true;\n        break;\n      }\n    }\n    return availableColorValue;\n  }\n\n  removeColorInUse(colorValue) {\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (element.colorValue === colorValue) {\n        element.isBegingUsed = false;\n        break;\n      }\n    }\n  }\n}\n\nconst chartColorsForSeries = [\n  { colorValue: \"#3f51b5\", isBegingUsed: false },\n  { colorValue: \"#2196f3\", isBegingUsed: false },\n  { colorValue: \"#03a9f4\", isBegingUsed: false },\n  { colorValue: \"#00bcd4\", isBegingUsed: false },\n  { colorValue: \"#009688\", isBegingUsed: false },\n  { colorValue: \"#4caf50\", isBegingUsed: false },\n  { colorValue: \"#8bc34a\", isBegingUsed: false },\n  { colorValue: \"#cddc39\", isBegingUsed: false },\n  { colorValue: \"#ffeb3b\", isBegingUsed: false },\n  { colorValue: \"#ffc107\", isBegingUsed: false },\n  { colorValue: \"#ff9800\", isBegingUsed: false },\n  { colorValue: \"#ff5722\", isBegingUsed: false },\n  { colorValue: \"#f44336\", isBegingUsed: false },\n  { colorValue: \"#e91e63\", isBegingUsed: false },\n  { colorValue: \"#9c27b0\", isBegingUsed: false },\n  { colorValue: \"#673ab7\", isBegingUsed: false },\n];\n\nconst dataStore = new DataStore();\nexport default dataStore;\n","import React from \"react\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport { observer } from \"mobx-react-lite\";\nimport FetchDataService from \"../services/FetchDataService\";\n\nconst filterOptions = createFilterOptions({\n  matchFrom: \"any\",\n  stringify: (option) => `${option.symbolTicker}-${option.name}`,\n});\n\nconst SearchForSymbolInput = observer(({ dataStore, notificationStore }) => {\n  const [searchOptions, setSearchOptions] = React.useState([]);\n  const [isLoadingSearch, setIsLoadingSearch] = React.useState(false);\n  const [searchTimeout, setSearchTimeout] = React.useState(null);\n  const [value, setValue] = React.useState(searchOptions[0]);\n\n  const handleValueChange = async (keywords) => {\n    const handleSearch = async (keywords) => {\n      setIsLoadingSearch(true);\n      const res = await FetchDataService.searchAlphaVantageByKeywords(keywords);\n      setIsLoadingSearch(false);\n      if (res) setSearchOptions(res);\n    };\n\n    if (searchTimeout) clearTimeout(searchTimeout);\n    if (!keywords) return;\n    const timeout = setTimeout(async () => {\n      await handleSearch(keywords);\n    }, 500);\n    setSearchTimeout(timeout);\n  };\n\n  const handleSearchSelect = async (symbolSearchResult) => {\n    const doesExist = await dataStore.doesSymbolExist(symbolSearchResult.symbolTicker);\n\n    if (doesExist) {\n      notificationStore.enqueueSnackbar({\n        message: `Symbol: ${symbolSearchResult.symbolTicker} already part of portfolio`,\n        options: {\n          variant: \"warning\",\n          autoHideDuration: 2000,\n        },\n        key: `SYMBOL-DUPLICATE-${symbolSearchResult.symbolTicker}`,\n      });\n    } else {\n      dataStore.addSymbol(symbolSearchResult);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      loading={isLoadingSearch}\n      value={value}\n      onChange={(event, symbolSearchResult) => {\n        setValue(\"\");\n        if (symbolSearchResult && symbolSearchResult.symbolTicker) handleSearchSelect(symbolSearchResult);\n      }}\n      options={searchOptions}\n      filterOptions={filterOptions}\n      renderOption={(option) => (\n        <div>\n          <Typography>{option.name}</Typography>\n          <Typography variant=\"caption\">\n            {option.symbolTicker} - {option.region} - {option.currency}\n          </Typography>\n        </div>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Add Asset\"\n          variant=\"outlined\"\n          onChange={(event) => handleValueChange(event.target.value)}\n        />\n      )}\n      style={{ minWidth: \"250px\" }}\n    />\n  );\n});\nexport default SearchForSymbolInput;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Chip, Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport SearchForSymbolInput from \"../components/SearchForSymbolInput\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nconst SelectedSymbolsBar = observer(({ dataStore, notificationStore }) => {\n  const classes = useStyles();\n\n  const toggleVisibility = (symbolTickerToHide) => () => {\n    dataStore.toggleSymbolVisibility(symbolTickerToHide);\n  };\n\n  const handleDelete = (symbolTickerToDelete) => {\n    dataStore.removeSelectedSymbol(symbolTickerToDelete);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item xs={8}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            {dataStore.symbols.map((symbolSet) => {\n              return (\n                <Chip\n                  key={symbolSet.symbolTicker}\n                  label={symbolSet.symbolTicker}\n                  onClick={toggleVisibility(symbolSet.symbolTicker)}\n                  onDelete={symbolSet.symbolTicker !== \"Portfolio\" ? () => handleDelete(symbolSet.symbolTicker) : false}\n                  className={classes.chip}\n                  color={symbolSet.isVisible ? \"primary\" : \"default\"}\n                  clickable={true}\n                  style={{ backgroundColor: symbolSet.isVisible ? symbolSet.color : \"#eeeeee\" }}\n                />\n              );\n            })}\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            <SearchForSymbolInput dataStore={dataStore} notificationStore={notificationStore} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\nexport default SelectedSymbolsBar;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst DatePicker = observer(({ dataStore }) => {\n  const handleDateChange = (date) => {\n    dataStore.setPortfolioStartingDate(date.format(\"YYYY-MM-DD\"));\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy-MM-DD\"\n        margin=\"normal\"\n        id=\"date-picker-starting-datet\"\n        label=\"Starting date\"\n        value={dataStore.portfolioStartingDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n});\n\nexport default DatePicker;\n","import React from \"react\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport DatePicker from \"./DatePicker\";\n\nexport default function ChartSwitchStyle({ dataStore, selectedChartStyleType, switchStyle }) {\n  const [state, setState] = React.useState({\n    checkedA: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    switchStyle();\n  };\n\n  return (\n    <FormGroup row>\n      <DatePicker dataStore={dataStore} />\n      <FormControlLabel\n        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n        label={selectedChartStyleType}\n      />\n    </FormGroup>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRecalculatePortfolio = observer(({ dataStore, recalculateAndRenderPortfolio }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRecalculatePortfolio\");\n      if (dataStore.triggerRecalculatePortfolio) recalculateAndRenderPortfolio();\n      dataStore.setTriggerRecalculatePortfolio(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerRecalculatePortfolio;\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerShowVisibleLines = observer(({ dataStore, rerenderVisibleLines }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerShowVisibleLines\");\n      if (dataStore.triggerRerenderVisibleLines) rerenderVisibleLines();\n      dataStore.setTriggerRerenderVisibleLines(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerShowVisibleLines;\n","import React from \"react\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport { Paper } from \"@material-ui/core\";\nimport ChartSwitchStyle from \"./ChartSwitchStyle\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport TriggerRecalculatePortfolio from \"./TriggerRecalculatePortfolio\";\nimport TriggerShowVisibleLines from \"./TriggerShowVisibleLines\";\n\nexport default class Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedChartStyleType: \"default\",\n    };\n    this.myRef = React.createRef();\n    this.chart = {};\n    this.lineSeriesObj = {};\n\n    this.recalculateAndRenderPortfolio = this.recalculateAndRenderPortfolio.bind(this);\n    this.rerenderVisibleLines = this.rerenderVisibleLines.bind(this);\n    this.switchStyle = this.switchStyle.bind(this);\n    this.createGraphForSelectedSymbols = this.createGraphForSelectedSymbols.bind(this);\n    this.addLineSeriesData = this.addLineSeriesData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n    this.createGraphForSelectedSymbols();\n  }\n\n  renderChart() {\n    if (this.myRef.current.firstChild) {\n      this.myRef.current.removeChild(this.myRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(this.myRef.current, styleDefault);\n  }\n\n  async recalculateAndRenderPortfolio() {\n    await idbSymbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n    this.addLineSeriesData(this.props.dataStore.getSymbolSetForTicker(\"Portfolio\"));\n  }\n\n  rerenderVisibleLines() {\n    this.createGraphForSelectedSymbols();\n  }\n\n  switchStyle() {\n    console.log(\"switching style\");\n    if (this.state.selectedChartStyleType === \"default\") {\n      this.setState({ selectedChartStyleType: \"percent\" });\n      this.chart.applyOptions(stylePercent);\n    } else if (this.state.selectedChartStyleType === \"percent\") {\n      this.setState({ selectedChartStyleType: \"default\" });\n      this.chart.applyOptions(styleDefault);\n    }\n  }\n\n  async createGraphForSelectedSymbols() {\n    console.log(\"createGraphForSelectedSymbols\");\n\n    // Remove lines for deleted symbols\n    const tempListOfAllSymbols = this.props.dataStore.listOfSymbolTickers;\n    for (const [symbolTicker, lineSeries] of Object.entries(this.lineSeriesObj)) {\n      // Check if ticker in dataStore symbols, if then remove lineseries\n      if (!tempListOfAllSymbols.includes(symbolTicker)) {\n        this.chart.removeSeries(lineSeries[\"series\"]);\n        delete this.lineSeriesObj[symbolTicker];\n      }\n    }\n\n    this.props.dataStore.symbols.forEach((symbolSet) => {\n      if (symbolSet.isVisible) {\n        this.addLineSeriesData(symbolSet);\n      } else {\n        if (this.lineSeriesObj[symbolSet.symbolTicker] && this.lineSeriesObj[symbolSet.symbolTicker][\"series\"]) {\n          let tempLineSeries = this.lineSeriesObj[symbolSet.symbolTicker][\"series\"];\n          this.chart.removeSeries(tempLineSeries);\n          delete this.lineSeriesObj[symbolSet.symbolTicker];\n        }\n      }\n    });\n  }\n\n  async addLineSeriesData(symbolSet) {\n    console.log(\"addLineSeriesData: \" + symbolSet.symbolTicker);\n\n    // TODO If data not availible then fetch data\n    const dataForSymbol = await idbSymbolDataStore.getDataChartFormatBySymbol(symbolSet.symbolTicker);\n\n    if (!this.lineSeriesObj[symbolSet.symbolTicker]) {\n      // If lineSeriesObj for ticker does not exist then create new lineSeriesObj\n      let tempLineSeries = this.chart.addLineSeries({\n        color: symbolSet.color,\n      });\n      if (dataForSymbol && dataForSymbol.length !== 0) {\n        tempLineSeries.setData(dataForSymbol);\n      }\n      // Create new lineSeries Object\n      this.lineSeriesObj[symbolSet.symbolTicker] = { series: tempLineSeries, color: symbolSet.color };\n    } else {\n      // If lineSeries exists then only update data, keep color\n      if (dataForSymbol && dataForSymbol.length !== 0)\n        this.lineSeriesObj[symbolSet.symbolTicker][\"series\"].setData(dataForSymbol);\n    }\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\", marginTop: \"10px\" }}>\n        <ChartSwitchStyle\n          refreshData={this.refreshData}\n          switchStyle={this.switchStyle}\n          selectedChartStyleType={this.state.selectedChartStyleType === \"default\" ? \"default\" : \"percent\"}\n          dataStore={this.props.dataStore}\n        />\n        <div ref={this.myRef} id=\"chart-ref\"></div>\n        <TriggerRecalculatePortfolio\n          dataStore={this.props.dataStore}\n          recalculateAndRenderPortfolio={this.recalculateAndRenderPortfolio}\n        />\n        <TriggerShowVisibleLines dataStore={this.props.dataStore} rerenderVisibleLines={this.rerenderVisibleLines} />\n      </Paper>\n    );\n  }\n}\n\nconst styleDefault = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Percentage,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  Paper,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\n\nconst useStyles = makeStyles({});\n\nconst PortfolioBuilder = observer(({ dataStore }) => {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Symbol</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell\n              align=\"right\"\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <Tooltip title=\"Performance of each asset since the starting date of the portfolio\" placement=\"top\">\n                <InfoOutlinedIcon fontSize=\"small\" />\n              </Tooltip>\n              Performance\n            </TableCell>\n            <TableCell align=\"right\" style={{ maxWidth: \"80px\" }}>\n              Value\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataStore.symbols.map((symbolSet) => {\n            if (symbolSet.symbolTicker !== \"Portfolio\")\n              return (\n                <TableRow key={symbolSet.symbolTicker}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {symbolSet.symbolTicker}\n                  </TableCell>\n                  <TableCell align=\"left\">{symbolSet.name}</TableCell>\n                  <TableCell align=\"right\">{performanceToPercent(symbolSet.performanceSincePortfolioStart)}</TableCell>\n                  <TableCell align=\"right\">\n                    <input\n                      type=\"text\"\n                      value={symbolSet.value}\n                      onChange={(event) => dataStore.setValueForTicker(symbolSet.symbolTicker, event.target.value)}\n                      style={{ maxWidth: \"60px\" }}\n                    />\n                  </TableCell>\n                </TableRow>\n              );\n            else return null;\n          })}\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell align=\"right\">\n            <Typography noWrap>Total: ${dataStore.totalValueOfSymbols}</Typography>\n          </TableCell>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nfunction performanceToPercent(performance) {\n  return ((parseFloat(performance) - 1) * 100).toFixed(2) + \"%\";\n}\n\nexport default PortfolioBuilder;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport SelectedSymbolsBar from \"../components/SelectedSymbolsBar\";\nimport Chart from \"../components/Chart\";\nimport PortfolioBuilder from \"../components/PortfolioBuilder\";\n\nconst ChartingPage = ({ dataStore, notificationStore }) => {\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <SelectedSymbolsBar dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <Chart dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <PortfolioBuilder dataStore={dataStore} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ChartingPage;\n","import React from \"react\";\nimport { Paper, Typography, TextField, Link } from \"@material-ui/core\";\n\nconst SettingsPage = ({ configStore }) => {\n  return (\n    <div>\n      <Paper elevation={1} style={{ padding: \"20px\" }}>\n        <Typography variant=\"h1\" gutterBottom>\n          Settings\n        </Typography>\n\n        <Typography variant=\"h6\" gutterBottom>\n          Alpha Vantag API Token\n        </Typography>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"API-Token\"\n          variant=\"outlined\"\n          defaultValue={configStore.alphaVantage.apiToken}\n          onChange={(e) => configStore.setAlphaVantageAPITokenIDB(e.target.value)}\n        />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          Get your free token here:{\" \"}\n          <Link href=\"https://www.alphavantage.co/support/#api-key\" target=\"_blank\" rel=\"noreferrer\">\n            Alpha Vantage\n          </Link>{\" \"}\n          (Hint: try a random key)\n        </Typography>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","import { Component } from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { inject, observer } from \"mobx-react\";\nimport { autorun } from \"mobx\";\n\nclass Notifier extends Component {\n  displayed = [];\n\n  storeDisplayed = (id) => {\n    this.displayed = [...this.displayed, id];\n  };\n\n  removeDisplayedNotificationByKey(removeKey) {\n    this.displayed = this.displayed.filter((key) => removeKey !== key);\n  }\n\n  componentDidMount() {\n    autorun(() => {\n      const { notifications = [] } = this.props.notificationStore;\n\n      notifications.forEach((notification) => {\n        // Do nothing if snackbar is already displayed\n        if (this.displayed.includes(notification.key)) return;\n        // Display snackbar using notistack\n        this.props.enqueueSnackbar(notification.message, notification.options);\n        // Keep track of snackbars that we've displayed\n        this.storeDisplayed(notification.key);\n        // Dispatch action to remove snackbar from mobx store\n        this.props.notificationStore.removeSnackbar(notification.key);\n\n        // Calculate delay to remove notification from this.displayed\n        let delayUntilRemoveMs = 0;\n        if (notification.options && notification.options.autoHideDuration) {\n          delayUntilRemoveMs = notification.options.autoHideDuration + 100;\n        } else {\n          delayUntilRemoveMs = 2100;\n        }\n        // Remove notifaction from this.disyplayed after dealy\n        setTimeout(\n          function () {\n            this.removeDisplayedNotificationByKey(notification.key);\n          }.bind(this),\n          delayUntilRemoveMs\n        );\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withSnackbar(inject(\"notificationStore\")(observer(Notifier)));\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n// Content\nimport dataStore from \"./stores/DataStore\";\nimport notificationStore from \"./stores/NotificationStore\";\nimport configStore from \"./stores/ConfigStore\";\nimport ChartingPage from \"./pages/ChartingPage\";\nimport SettingsPage from \"./pages/SettingsPage\";\n\nimport Notifier from \"./components/Notifier\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [pages, setPages] = React.useState({ chartingPage: { showPage: true }, settingsPage: { showPage: false } });\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handlePageSelect = (pageToShow) => {\n    const tempPages = {};\n    for (const [page] of Object.entries(pages)) {\n      if (page === pageToShow) tempPages[page] = { showPage: true };\n      else tempPages[page] = { showPage: false };\n    }\n    setPages(tempPages);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Notifier notificationStore={notificationStore} />\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Historic-Portfolio-Analyzer (alpha)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key={\"charting-page\"} onClick={() => handlePageSelect(\"chartingPage\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Chart\"} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key={\"serttings-page\"} onClick={() => handlePageSelect(\"settingsPage\")}>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Settings\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {pages.chartingPage.showPage ? (\n          <ChartingPage dataStore={dataStore} notificationStore={notificationStore} />\n        ) : null}\n        {pages.settingsPage.showPage ? <SettingsPage configStore={configStore} /> : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Provider } from 'mobx-react';\nimport notificationStore from \"./stores/NotificationStore\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider notificationStore={notificationStore}>\n    <SnackbarProvider maxSnack={10}>\n      <App />\n    </SnackbarProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}