{"version":3,"sources":["stores/dbPromise.js","stores/NotificationStore.js","stores/idbConfigStore.js","stores/ConfigStore.js","services/KeyMetricsService.js","stores/KeyMetricsStore.js","stores/idbSymbolDataStore.js","services/FetchDataService.js","stores/SymbolDataStore.js","stores/DataStore.js","components/SearchForSymbolInput.js","components/SelectedSymbolsBar.js","components/PortfolioBuilder.js","components/KeyMetricCard.js","components/KeyMetricRow.js","components/DatePicker.js","components/ChartConfigurationCard.js","components/ChartSwitchStyle.js","components/TriggerRerenderPortfolio.js","components/TriggerShowVisibleLines.js","components/ChartPortfolioOverview.js","components/TriggerRerenderDrawdown.js","components/ChartDrawdown.js","components/TabBar.js","pages/ChartingPage.js","pages/SettingsPage.js","components/Notifier.js","App.js","reportWebVitals.js","index.js"],"names":["window","console","log","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","notificationStore","extendObservable","this","notifications","keys","API_TOKEN_MISSING","PORTFOLIO_CALCULATING","API_TOKEN_STORED","enqueueSnackbar","action","note","push","key","Date","getTime","Math","random","removeSnackbar","filter","notification","idbConfigStore","get","set","val","put","delete","clear","getAllKeys","fakeToken","length","result","characters","charactersLength","i","charAt","floor","configStore","alphaVantage","url","apiToken","isRunningSetup","alphaVantageConstants","SYMBOL_SEARCH","TIME_SERIES_DAILY_ADJUSTED","riskFreeRate","startSetup","makeObservable","observable","setAlphaVantageAPITokenHelper","setIsRunningSetup","setRiskFreeRate","autorun","trigger","keyMetricsStore","calculateAndSetPortfolioSharpRatio","JSON","stringify","token","setAlphaVantageAPITokenIDB","dataStore","addSymbol","symbolTicker","name","region","currency","bool","newToken","message","options","variant","autoHideDuration","newRate","KeyMetricsService","calculateAndStoreSharpRatio","timeseries","dataSetTemp","riskFreeTemp","forEach","entry","value","sharpDaily","PortfolioAnalytics","sharpeRatio","sharpAnnulized","calculatePortfolioDrawdownTimeSeries","portfolioTimeseries","values","map","timeseriesObj","drawdownFunction","e","time","portfolioSharpRatio","portfolioDrawdownTimeSeries","calculateAndSetPortfolioDrawdown","symbolDataStore","getSymbolTimeseriesDataFromMap","res","idbSymbolDataStore","getAdjustedCloseByTickerAndDate","date","data","getTimeSeriesDailyByTicker","getTimeSeriesDailyByTickerFormated","formateDataToChartFormat","formatAndStoreSymbolData","rawData","meta_data","symbol_ticker","date_fetched","time_zone","formatedData","symbol","time_series_daily","calculateAndStoreHistoricPortfolioPerformance","setIsCalculatingPortfolioPerformance","symbolQuantityMap","startingDate","moment","portfolioStartingDate","endDate","daysSinceStart","diff","Promise","all","symbolsWithoutPortfolio","symbolSet","a","format","startingDatePriceValue","add","endDatePriceValue","subtract","performanceSinceStart","parseFloat","setPerformanceSincePortfolioStartForTicker","yearlyPerformanceSinceStart","setYearlyPerformanceSincePortfolioStartForTicker","startingDateValueOfThisSymbol","getSymbolSetForTicker","quantity","endValue","setEndValueForTicker","datesToCheck","isBefore","tempSymbolDatasetMap","tempDataSet","sumOfDividends","tempSumForDate","Object","entries","dataset","dividend","setTimeseriesForTicker","then","endDatePriceValuePortfolio","startingDatePriceValuePortfolio","performanceSinceStartPortfolio","yearlyPerformanceSinceStartPortfolio","setTotalDividendPayoutForTicker","symbolData","temp","dailyInformation","String","reverse","FetchDataService","fetchDataDailyAdjustedForSymbolAlphaVantage","axios","params","function","outputsize","apikey","searchAlphaVantageByKeywords","keywords","matches","searchResultsFormated","isCalculatingPortfolioPerformance","symbolChartTimeseriesDataMap","Portfolio","addSymbolToMap","removeSymbolFromMap","dataForSymbol","DataStore","symbols","isVisible","performanceSincePortfolioStart","yearlyPerformanceSincePortfolioStart","color","nextAvailableColorValue","dateFetched","pendingRequests","appleData","triggerRerenderPortfolio","triggerRecalculatePortfolioTimeout","triggerRerenderVisibleLines","portfolioBuilderSetting","toggleSymbolVisibility","removeSelectedSymbol","setValueForTicker","setTriggerRerenderPortfolio","setTriggerRerenderVisibleLines","setSharpRatioForTicker","setPortfolioStartingDate","setPortfolioBuilderSetting","totalValueOfSymbols","computed","listOfSymbolTickers","symbolPortfolioOnly","symbolsSortedByTickerPortfolioFirst","symbolsSortedByTickerWithoutPortfolio","symbolsSortedByPortfolioBuilderSetting","trigger2","debouncePortfolioRecalculation","clearTimeout","timeout","setTimeout","symbolSetSearchResult","totalDividendPayout","getMetaDataForSymbol","metaData","setDateFetchedForTicker","symbolTickerToDelete","removeColorInUse","changedSymbolbyTicker","doesExist","find","changedSymbolByTicker","newVal","availableColorValue","index","chartColorsForSeries","element","isBegingUsed","colorValue","reduce","pv","slice","sort","compareSymbolSetsByTickerPortfolioFirst","compareSymbolSetsByTicker","compareSymbolSetsByName","compareSymbolSetsByPerformanceAnnulized","compareSymbolSetsByPerformanceSinceStart","compareSymbolSetsByValue","b","filterOptions","createFilterOptions","matchFrom","option","SearchForSymbolInput","observer","React","useState","searchOptions","setSearchOptions","isLoadingSearch","setIsLoadingSearch","searchTimeout","setSearchTimeout","setValue","handleValueChange","handleSearch","handleSearchSelect","symbolSearchResult","doesSymbolExist","Autocomplete","id","loading","onChange","event","renderOption","Typography","renderInput","TextField","label","target","style","minWidth","paddingRight","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","SelectedSymbolsBar","classes","anchorEl","setAnchorEl","menuSelectedSymbolSet","setMenuSelectedSymbolSet","handleClose","Paper","className","keepMounted","open","Boolean","onClose","MenuItem","ListItemIcon","fontSize","noWrap","onClick","Grid","container","alignItems","item","xs","direction","justify","Chip","symbolTickerToHide","onDelete","currentTarget","handleMenuClick","deleteIcon","clickable","backgroundColor","performanceToPercent","performance","toFixed","PortfolioBuilder","getItemNumber","TableContainer","component","Table","table","aria-label","size","TableHead","TableRow","TableCell","align","maxWidth","TableBody","scope","type","flexGrow","paper","textAlign","palette","text","secondary","width","height","title","KeyMetricCard","titel","description","showPercent","gutterBottom","CircularProgress","KeyIndicatorRow","DatePicker","utils","MomentUtils","disableToolbar","dateString","exec","KeyboardButtonProps","gridItem","marks","valuetext","ChartConfigurationCard","elevation","Slider","defaultValue","getAriaValueText","aria-labelledby","min","max","step","valueLabelDisplay","onChangeCommitted","ChartSwitchStyle","selectedChartStyleType","switchStyle","checkedA","state","setState","FormGroup","row","FormControlLabel","control","Switch","checked","TriggerRerenderPortfolio","rerenderPortfolio","useEffect","TriggerShowVisibleLines","rerenderVisibleLines","ChartPortfolioOverview","props","myRef","createRef","chart","lineSeriesObj","bind","createGraphForSelectedSymbols","addLineSeriesData","renderChart","current","firstChild","removeChild","createChart","stylePercent","styleAbsolut","applyOptions","tempListOfAllSymbols","lineSeries","includes","removeSeries","tempLineSeries","setData","addLineSeries","series","refreshData","CalculatingProgress","ref","Component","LinearProgress","rightPriceScale","scaleMargins","top","bottom","mode","PriceScaleMode","Normal","borderColor","Percentage","TriggerRerenderDrawdown","rerenderDrawdown","ChartDrawdown","drawdownChartRef","drawdownLineSeries","addDrawdownLineSeries","priceLineVisible","priceFormat","minMove","formatter","TabPanel","children","other","role","hidden","Box","p","a11yProps","background","TabBar","Tabs","newValue","indicatorColor","textColor","centered","Tab","ChartingPage","KeyMetricRow","SettingsPage","Link","href","rel","Notifier","displayed","storeDisplayed","removeKey","delayUntilRemoveMs","removeDisplayedNotificationByKey","withSnackbar","inject","drawerWidth","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","App","useTheme","setOpen","chartingPage","showPage","settingsPage","pages","setPages","handlePageSelect","pageToShow","tempPages","page","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","edge","Drawer","Divider","List","ListItem","button","ListItemText","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.d4702ee0.chunk.js","sourcesContent":["import { openDB } from \"idb\";\n\nif (!(\"indexedDB\" in window)) {\n  console.log(\"This browser doesn't support IndexedDB\");\n}\n\nconst dbPromise = openDB(\"historic-portfolio-analyzer\", 2, {\n  upgrade(db) {\n    if (!db.objectStoreNames.contains(\"symbolDataStore\")) {\n      console.log(\"Creating new symbolDataStore\");\n      db.createObjectStore(\"symbolDataStore\", {\n        keyPath: \"symbol\",\n        autoIncrement: false,\n      });\n    }\n    if (!db.objectStoreNames.contains(\"configStore\")) {\n      console.log(\"Creating new configStore\");\n      db.createObjectStore(\"configStore\");\n    }\n  },\n});\n\nexport default dbPromise;\n","import { action, extendObservable } from \"mobx\";\n\nconst NotificationStore = function () {\n  extendObservable(this, {\n    notifications: [],\n    keys: {\n      API_TOKEN_MISSING: \"API_TOKEN_MISSING\",\n      PORTFOLIO_CALCULATING: \"PORTFOLIO_CALCULATING\",\n      API_TOKEN_STORED: \"API_TOKEN_STORED\",\n    },\n\n    enqueueSnackbar: action((note) => {\n      this.notifications.push({\n        key: note.key ? note.key : new Date().getTime() + Math.random(),\n        ...note,\n      });\n    }),\n\n    removeSnackbar: action((key) => {\n      this.notifications = this.notifications.filter((notification) => notification.key !== key);\n    }),\n  });\n};\n\nconst notificationStore = new NotificationStore();\nexport default notificationStore;\n","import dbPromise from \"./dbPromise\";\n\nconst idbConfigStore = {\n  async get(key) {\n    return (await dbPromise).get(\"configStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"configStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"configStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"configStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"configStore\");\n  },\n};\n\nexport default idbConfigStore;\n","import { makeObservable, observable, action, autorun } from \"mobx\";\nimport idbConfigStore from \"./idbConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport dataStore from \"./DataStore\";\nimport keyMetricsStore from \"./KeyMetricsStore\";\n\nclass ConfigStore {\n  alphaVantage = { url: \"https://www.alphavantage.co/query\", apiToken: \"\" };\n  isRunningSetup = true;\n  alphaVantageConstants = { SYMBOL_SEARCH: \"SYMBOL_SEARCH\", TIME_SERIES_DAILY_ADJUSTED: \"TIME_SERIES_DAILY_ADJUSTED\" };\n  riskFreeRate = 1;\n\n  constructor() {\n    this.startSetup();\n\n    makeObservable(this, {\n      alphaVantage: observable,\n      isRunningSetup: observable,\n      riskFreeRate: observable,\n      setAlphaVantageAPITokenHelper: action,\n      setIsRunningSetup: action,\n      setRiskFreeRate: action,\n    });\n\n    autorun(() => {\n      const trigger = this.riskFreeRate;\n\n      if (!this.isRunningSetup) keyMetricsStore.calculateAndSetPortfolioSharpRatio();\n      console.log(\"Autorun: triggering sharp ratio rercalculation: \" + JSON.stringify(trigger));\n    });\n  }\n\n  async startSetup() {\n    console.log(\"startSetup\");\n    // Load stored API token from idbConfigStore or create a Token\n    const token = await idbConfigStore.get(\"alphaVantagAPIToken\");\n    if (token) this.setAlphaVantageAPITokenHelper(token);\n    else {\n      await this.setAlphaVantageAPITokenIDB(fakeToken(16));\n    }\n\n    // Add default symbols\n    // If no deafult symbols added then dataStore trigger have to be called manually\n    dataStore.addSymbol({ symbolTicker: \"AAPL\", name: \"Apple Inc.\", region: \"testRegion\", currency: \"USD\" });\n\n    this.setIsRunningSetup(false);\n  }\n\n  setIsRunningSetup(bool) {\n    this.isRunningSetup = bool;\n  }\n\n  // Store new alphaVantagAPIToken to idbConfigStore then store in mobx store\n  async setAlphaVantageAPITokenIDB(newToken) {\n    await idbConfigStore.set(\"alphaVantagAPIToken\", newToken);\n    notificationStore.enqueueSnackbar({\n      message: `Stored new API-Token${this.alphaVantage.apiToken}`,\n      options: {\n        variant: \"success\",\n        autoHideDuration: 1000,\n      },\n      key: notificationStore.keys.API_TOKEN_STORED,\n    });\n    this.setAlphaVantageAPITokenHelper(newToken);\n  }\n\n  setAlphaVantageAPITokenHelper(newToken) {\n    console.log(\"setAlphaVantageAPITokenHelper: \" + newToken);\n    this.alphaVantage.apiToken = newToken;\n  }\n  setRiskFreeRate(newRate) {\n    console.log(\"setRiskFreeRate: \" + newRate);\n    this.riskFreeRate = newRate;\n  }\n}\n\nfunction fakeToken(length) {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst configStore = new ConfigStore();\nexport default configStore;\n","import configStore from \"../stores/ConfigStore\";\nimport PortfolioAnalytics from \"portfolio-analytics\";\n\nconst KeyMetricsService = {\n  async calculateAndStoreSharpRatio(timeseries) {\n    const riskFreeRate = configStore.riskFreeRate / 100 + 1;\n\n    // Create lists for PortfolioAnalytics.sharpRatio()\n    let dataSetTemp = [];\n    let riskFreeTemp = [];\n    timeseries.forEach((entry, i) => {\n      dataSetTemp.push(entry.value);\n      riskFreeTemp.push(riskFreeRate ** ((1 / 252) * i));\n    });\n\n    const sharpDaily = PortfolioAnalytics.sharpeRatio(dataSetTemp, riskFreeTemp);\n    // Multiply sharpDaily ratio by square root of trading days in a year\n    // Assumption: 252 trading days in a regular year\n    const sharpAnnulized = sharpDaily * 252 ** 0.5;\n    return sharpAnnulized;\n  },\n  async calculatePortfolioDrawdownTimeSeries(portfolioTimeseries) {\n    let values = portfolioTimeseries.map((timeseriesObj) => timeseriesObj.value);\n\n    const drawdownFunction = PortfolioAnalytics.drawdownFunction(values);\n\n    let result = [];\n    portfolioTimeseries.forEach((e, i) => result.push({ time: e.time, value: drawdownFunction[i] * -100 }));\n\n    return result;\n  },\n};\nexport default KeyMetricsService;\n","import { makeObservable, observable, action } from \"mobx\";\nimport symbolDataStore from \"./SymbolDataStore\";\nimport KeyMetricsService from \"../services/KeyMetricsService\";\n\nclass KeyMetricsStore {\n  portfolioSharpRatio = 0;\n  portfolioDrawdownTimeSeries = [];\n\n  constructor() {\n    makeObservable(this, {\n      portfolioSharpRatio: observable,\n      calculateAndSetPortfolioSharpRatio: action,\n      portfolioDrawdownTimeSeries: observable,\n      calculateAndSetPortfolioDrawdown: action,\n    });\n  }\n\n  async calculateAndSetPortfolioSharpRatio() {\n    this.portfolioSharpRatio = 0;\n\n    const timeseries = await symbolDataStore.getSymbolTimeseriesDataFromMap(\"Portfolio\");\n\n    if (timeseries.length !== 0) {\n      const res = await KeyMetricsService.calculateAndStoreSharpRatio(timeseries);\n      this.portfolioSharpRatio = res;\n    } else {\n      this.portfolioSharpRatio = 0;\n    }\n  }\n\n  async calculateAndSetPortfolioDrawdown(portfolioTimeseries) {\n    this.portfolioDrawdownTimeSeries = [];\n    this.portfolioDrawdownTimeSeries = await KeyMetricsService.calculatePortfolioDrawdownTimeSeries(\n      portfolioTimeseries\n    );\n  }\n}\n\nconst keyMetricsStore = new KeyMetricsStore();\nexport default keyMetricsStore;\n","import dbPromise from \"./dbPromise\";\nimport dataStore from \"./DataStore\";\nimport moment from \"moment\";\nimport notificationStore from \"./NotificationStore\";\nimport symbolDataStore from \"./SymbolDataStore\";\nimport keyMetricsStore from \"./KeyMetricsStore\";\n\n/**\n * primary key: symbol\n * Format of object stored (example):\n{\n  symbol: \"AAPL\", \n  meta_data: {\n  symbol_ticker: \"AAPL\"\n  data_fetched: \"2020-11-18\",\n  time_zone: \"US/Eastern\",\n  },\n  time_series_daily:{\n    \"2020-11-10\": {...}\n  } \n}\n */\nconst idbSymbolDataStore = {\n  async get(key) {\n    return (await dbPromise).get(\"symbolDataStore\", key);\n  },\n  async set(val) {\n    return (await dbPromise).put(\"symbolDataStore\", val);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"symbolDataStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"symbolDataStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"symbolDataStore\");\n  },\n  async getAdjustedCloseByTickerAndDate(key, date) {\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data) {\n      if (data[\"time_series_daily\"][date]) return data[\"time_series_daily\"][date][\"5. adjusted close\"];\n    }\n    return false;\n  },\n  async getTimeSeriesDailyByTicker(key) {\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data && data[\"time_series_daily\"]) return data[\"time_series_daily\"];\n    return false;\n  },\n  async getTimeSeriesDailyByTickerFormated(key) {\n    console.log(\"getTimeSeriesDailyByTickerFormated: \" + key);\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data && data[\"time_series_daily\"]) return formateDataToChartFormat(data);\n    return false;\n  },\n  async formatAndStoreSymbolData(symbolTicker, rawData) {\n    let meta_data = {\n      symbol_ticker: rawData[\"Meta Data\"][\"2. Symbol\"],\n      date_fetched: rawData[\"Meta Data\"][\"3. Last Refreshed\"],\n      time_zone: rawData[\"Meta Data\"][\"5. Time Zone\"],\n    };\n\n    let formatedData = {\n      symbol: symbolTicker,\n      meta_data: meta_data,\n      time_series_daily: rawData[\"Time Series (Daily)\"],\n    };\n    await this.set(formatedData);\n  },\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    console.log(\"calculateAndStoreHistoricPortfolioPerformance\");\n    notificationStore.enqueueSnackbar({\n      message: `Calculating Portfolio value`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 2000,\n      },\n      key: notificationStore.keys.PORTFOLIO_CALCULATING,\n    });\n    symbolDataStore.setIsCalculatingPortfolioPerformance(true);\n\n    //  Calculate for each asset the quantity at portfolio start and the performance since\n    console.log(\"Portfolio - calculating quantity\");\n    let symbolQuantityMap = {};\n    let startingDate = moment(dataStore.portfolioStartingDate);\n    let endDate = moment();\n    const daysSinceStart = endDate.diff(startingDate, \"days\") + 1;\n    await Promise.all(\n      dataStore.symbolsWithoutPortfolio.map(async (symbolSet) => {\n        // Get price of asset for the portfolio starting date\n        let startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          startingDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!startingDatePriceValue) {\n          startingDate.add(1, \"days\");\n          startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            startingDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Get price of asset for the portfolio end date\n        let endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          endDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!endDatePriceValue) {\n          endDate.subtract(1, \"days\");\n          endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            endDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Calculate performanceSinceStart for this symbol and store the value\n        const performanceSinceStart = parseFloat(endDatePriceValue) / parseFloat(startingDatePriceValue) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, performanceSinceStart);\n        // Calculate yearlyPerformanceSinceStart for this symbol and store the value\n        const yearlyPerformanceSinceStart = performanceSinceStart * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, yearlyPerformanceSinceStart);\n\n        // Calculate quantity for this symbol\n        const startingDateValueOfThisSymbol = dataStore.getSymbolSetForTicker(symbolSet.symbolTicker)[\"value\"];\n        const quantity = parseFloat(startingDateValueOfThisSymbol) / parseFloat(startingDatePriceValue);\n\n        symbolQuantityMap[symbolSet.symbolTicker] = quantity;\n\n        const endValue = endDatePriceValue * quantity;\n        dataStore.setEndValueForTicker(symbolSet.symbolTicker, endValue);\n      })\n    );\n\n    // Generate a list of all days between dataStore.portfolioStartingDate and today (including both days)\n    console.log(\"Portfolio - list of dates\");\n    let datesToCheck = [];\n    let date = moment(dataStore.portfolioStartingDate);\n    while (date.isBefore()) {\n      datesToCheck.push(date.format(\"YYYY-MM-DD\"));\n      date.add(1, \"days\");\n    }\n\n    // Iterate through all days and calculate the total value\n    console.log(\"Portfolio - calculating for each day\");\n    let tempSymbolDatasetMap = {};\n    await Promise.all(\n      dataStore.symbolsWithoutPortfolio.map(async (symbolSet) => {\n        let tempDataSet = await idbSymbolDataStore.getTimeSeriesDailyByTicker(symbolSet.symbolTicker);\n        tempSymbolDatasetMap[symbolSet.symbolTicker] = tempDataSet;\n      })\n    );\n\n    let result = [];\n    let sumOfDividends = 0;\n    datesToCheck.forEach((date) => {\n      let tempSumForDate = 0;\n      for (const [symbolTicker, dataset] of Object.entries(tempSymbolDatasetMap)) {\n        if (dataset && !(date in dataset)) return;\n        const dividend = dataset[date][\"7. dividend amount\"];\n        sumOfDividends += dividend * symbolQuantityMap[symbolTicker];\n        const stockValue = dataset[date][\"5. adjusted close\"];\n        tempSumForDate += stockValue * symbolQuantityMap[symbolTicker];\n      }\n      if (tempSumForDate) result.push({ time: date, value: tempSumForDate });\n    });\n\n    symbolDataStore.setTimeseriesForTicker(\"Portfolio\", result).then((res) => {\n      if (result.length !== 0) {\n        const endDatePriceValuePortfolio = result[0].value;\n        const startingDatePriceValuePortfolio = result[result.length - 1].value;\n        // Calculate performanceSinceStart for portfolio and store the value\n        const performanceSinceStartPortfolio =\n          parseFloat(startingDatePriceValuePortfolio) / parseFloat(endDatePriceValuePortfolio) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(\"Portfolio\", performanceSinceStartPortfolio);\n        // Calculate yearlyPerformanceSinceStart for portfolio and store the value\n        const yearlyPerformanceSinceStartPortfolio = performanceSinceStartPortfolio * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(\"Portfolio\", yearlyPerformanceSinceStartPortfolio);\n\n        dataStore.setTotalDividendPayoutForTicker(\"Portfolio\", sumOfDividends);\n        dataStore.setEndValueForTicker(\"Portfolio\", startingDatePriceValuePortfolio);\n\n        // Calculate key metrics\n        keyMetricsStore.calculateAndSetPortfolioSharpRatio();\n\n        // Calculate drawdown function\n        keyMetricsStore.calculateAndSetPortfolioDrawdown(result);\n      }\n    });\n\n    symbolDataStore.setIsCalculatingPortfolioPerformance(false);\n    return result;\n  },\n};\n\nconst formateDataToChartFormat = (symbolData) => {\n  let temp = [];\n  for (const [key, dailyInformation] of Object.entries(symbolData[\"time_series_daily\"])) {\n    temp.push({ time: String(key), value: parseFloat(dailyInformation[\"5. adjusted close\"]) });\n  }\n  return temp.reverse();\n};\n\nexport default idbSymbolDataStore;\n","import axios from \"axios\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport notificationStore from \"../stores/NotificationStore\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst FetchDataService = {\n  async fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker) {\n    console.log(\"fetchDataDailyAdjustedForSymbolAlphaVantage\");\n    console.log(`Fetching data for ${symbolTicker}`);\n    notificationStore.enqueueSnackbar({\n      message: `Fetching data for: ${symbolTicker}`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 1500,\n      },\n      key: `FETCHING-${symbolTicker}`,\n    });\n    try {\n      //  Call API\n      const res = await axios.get(configStore.alphaVantage.url, {\n        params: {\n          function: configStore.alphaVantageConstants.TIME_SERIES_DAILY_ADJUSTED,\n          symbol: symbolTicker,\n          outputsize: \"full\",\n          apikey: configStore.alphaVantage.apiToken,\n        },\n      });\n      // Failed request\n      if (\"Note\" in res.data) {\n        console.log(\"Failed to fetch for: \" + symbolTicker);\n        notificationStore.enqueueSnackbar({\n          message: `Failed to fetch data for: ${symbolTicker}`,\n          options: {\n            variant: \"warning\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-FAILED-${symbolTicker}`,\n        });\n        return false;\n      } else {\n        //  Store request results\n        // TODO check if received data was valid\n        await idbSymbolDataStore.formatAndStoreSymbolData(symbolTicker, res.data);\n        notificationStore.enqueueSnackbar({\n          message: `Successfully fetched data for: ${symbolTicker}`,\n          options: {\n            variant: \"success\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-SUCCESS-${symbolTicker}`,\n        });\n        return symbolTicker;\n      }\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n    }\n  },\n  async searchAlphaVantageByKeywords(keywords) {\n    console.log(\"searchAlphaVantageByKeywords: \" + keywords);\n    const res = await axios.get(configStore.alphaVantage.url, {\n      params: {\n        function: configStore.alphaVantageConstants.SYMBOL_SEARCH,\n        keywords: keywords,\n        apikey: configStore.alphaVantage.apiToken,\n      },\n    });\n    if (\"Note\" in res.data) {\n      console.log(\"Failed to search for:\" + keywords);\n      notificationStore.enqueueSnackbar({\n        message: `Failed to search for: ${keywords}`,\n        options: {\n          variant: \"warning\",\n        },\n      });\n      return false;\n    } else {\n      const matches = res.data[\"bestMatches\"];\n      if (!matches) return [];\n      const searchResultsFormated = matches.map((result) => ({\n        symbolTicker: result[\"1. symbol\"],\n        name: result[\"2. name\"],\n        region: result[\"4. region\"],\n        currency: result[\"8. currency\"],\n      }));\n      return searchResultsFormated;\n    }\n  },\n};\n\nexport default FetchDataService;\n","import { makeObservable, observable, action } from \"mobx\";\nimport idbSymbolDataStore from \"./idbSymbolDataStore\";\nimport configStore from \"./ConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport FetchDataService from \"../services/FetchDataService\";\nclass SymbolDataStore {\n  isCalculatingPortfolioPerformance = false;\n  symbolChartTimeseriesDataMap = { Portfolio: [] };\n\n  constructor() {\n    makeObservable(this, {\n      isCalculatingPortfolioPerformance: observable,\n      symbolChartTimeseriesDataMap: observable,\n      setIsCalculatingPortfolioPerformance: action,\n      addSymbolToMap: action,\n      removeSymbolFromMap: action,\n      setTimeseriesForTicker: action,\n    });\n  }\n\n  setIsCalculatingPortfolioPerformance(bool) {\n    this.isCalculatingPortfolioPerformance = bool;\n  }\n\n  async addSymbolToMap(symbolTicker) {\n    console.log(\"addSymbolToMap: \" + symbolTicker);\n    const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n    if (dataForSymbol) {\n      this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n    } else {\n      // Check if api token is set\n      if (configStore.alphaVantage.apiToken) {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker);\n        const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n        if (dataForSymbol) this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n      } else {\n        notificationStore.enqueueSnackbar({\n          message: `Please enter an API key on the Settings Page`,\n          options: {\n            variant: \"error\",\n            autoHideDuration: 2500,\n          },\n          key: notificationStore.keys.API_TOKEN_MISSING,\n        });\n      }\n    }\n  }\n\n  async removeSymbolFromMap(symbolTicker) {\n    delete this.symbolChartTimeseriesDataMap[symbolTicker];\n  }\n\n  async getSymbolTimeseriesDataFromMap(symbolTicker) {\n    console.log(\"getSymbolTimeseriesDataFromMap: \" + symbolTicker);\n    if (this.symbolChartTimeseriesDataMap[symbolTicker]) return this.symbolChartTimeseriesDataMap[symbolTicker];\n    else {\n      if (symbolTicker === \"Portfolio\") {\n        return;\n      } else {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker);\n        const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n        if (dataForSymbol) this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n        return dataForSymbol;\n      }\n    }\n  }\n\n  async setTimeseriesForTicker(symbolTicker, timeseries) {\n    console.log(\"setTimeseriesForTicker: \" + symbolTicker);\n    this.symbolChartTimeseriesDataMap[symbolTicker] = timeseries;\n  }\n\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    return await idbSymbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n  }\n\n  async getMetaDataForSymbol(symbolTicker) {\n    const data = await idbSymbolDataStore.get(symbolTicker);\n    return data.meta_data;\n  }\n}\n\nconst symbolDataStore = new SymbolDataStore();\nexport default symbolDataStore;\n","import { makeObservable, observable, action, computed, autorun } from \"mobx\";\nimport moment from \"moment\";\nimport symbolDataStore from \"./SymbolDataStore\";\nclass DataStore {\n  symbols = [\n    {\n      symbolTicker: \"Portfolio\",\n      name: \"Portfolio\",\n      isVisible: true,\n      value: 0,\n      currency: \"USD\",\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      color: this.nextAvailableColorValue(),\n      endValue: 0,\n      dateFetched: \"-\",\n    },\n  ];\n  pendingRequests = 0;\n  appleData = [];\n  portfolioStartingDate = \"\";\n  triggerRerenderPortfolio = false;\n  triggerRecalculatePortfolioTimeout = null;\n  triggerRerenderVisibleLines = false;\n  portfolioBuilderSetting = \"ticker\"; // \"ticker\", \"name\", \"value\", \"performance_since_start\", \"performance_annualized\"\n\n  constructor() {\n    makeObservable(this, {\n      symbols: observable,\n      portfolioBuilderSetting: observable,\n      triggerRerenderPortfolio: observable,\n      triggerRerenderVisibleLines: observable,\n      portfolioStartingDate: observable,\n      toggleSymbolVisibility: action,\n      addSymbol: action,\n      removeSelectedSymbol: action,\n      setValueForTicker: action,\n      setPerformanceSincePortfolioStartForTicker: action,\n      setYearlyPerformanceSincePortfolioStartForTicker: action,\n      setEndValueForTicker: action,\n      setTriggerRerenderPortfolio: action,\n      setTriggerRerenderVisibleLines: action,\n      setTotalDividendPayoutForTicker: action,\n      setSharpRatioForTicker: action,\n      setPortfolioStartingDate: action,\n      setPortfolioBuilderSetting: action,\n      totalValueOfSymbols: computed,\n      listOfSymbolTickers: computed,\n      symbolsWithoutPortfolio: computed,\n      symbolPortfolioOnly: computed,\n      symbolsSortedByTickerPortfolioFirst: computed,\n      symbolsSortedByTickerWithoutPortfolio: computed,\n      symbolsSortedByPortfolioBuilderSetting: computed,\n    });\n\n    this.portfolioStartingDate = moment().subtract(1, \"years\").format(\"YYYY-MM-DD\");\n\n    autorun(() => {\n      // triggerRerenderPortfolio\n      const trigger = this.portfolioStartingDate;\n      const trigger2 = this.totalValueOfSymbols;\n\n      // Debounce\n      const debouncePortfolioRecalculation = async () => {\n        console.log(\n          \"Autorun: triggering portfolio rercalculation\" + JSON.stringify(trigger) + JSON.stringify(trigger2)\n        );\n        await symbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n        this.setTriggerRerenderPortfolio(true);\n      };\n\n      //  Check if timeout exists, if so clear and start a new one\n      if (this.triggerRecalculatePortfolioTimeout) clearTimeout(this.triggerRecalculatePortfolioTimeout);\n      const timeout = setTimeout(async () => {\n        await debouncePortfolioRecalculation();\n      }, 500);\n      this.triggerRecalculatePortfolioTimeout = timeout;\n    });\n  }\n\n  setTriggerRerenderPortfolio(bool) {\n    this.triggerRerenderPortfolio = bool;\n  }\n\n  setTriggerRerenderVisibleLines(bool) {\n    this.triggerRerenderVisibleLines = bool;\n  }\n\n  async addSymbol(symbolSetSearchResult) {\n    if (!symbolSetSearchResult || !symbolSetSearchResult.symbolTicker) return false;\n    this.symbols.push({\n      symbolTicker: symbolSetSearchResult.symbolTicker,\n      name: symbolSetSearchResult.name,\n      currency: symbolSetSearchResult.currency,\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      isVisible: true,\n      value: 100,\n      endValue: 0,\n      totalDividendPayout: 0,\n      color: this.nextAvailableColorValue(),\n      dateFetched: \"-\",\n    });\n\n    await symbolDataStore.addSymbolToMap(symbolSetSearchResult.symbolTicker);\n    //  Get meta data and store it inside this store\n    const metaData = await symbolDataStore.getMetaDataForSymbol(symbolSetSearchResult.symbolTicker);\n    this.setDateFetchedForTicker(symbolSetSearchResult.symbolTicker, metaData.date_fetched);\n    //  TODO check if this  could be optimized\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRerenderPortfolio(true);\n  }\n\n  async removeSelectedSymbol(symbolTickerToDelete) {\n    this.removeColorInUse(this.getSymbolSetForTicker(symbolTickerToDelete).color);\n    this.symbols = this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== symbolTickerToDelete);\n\n    await symbolDataStore.removeSymbolFromMap(symbolTickerToDelete);\n\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRerenderPortfolio(true);\n  }\n\n  toggleSymbolVisibility(changedSymbolbyTicker) {\n    console.log(changedSymbolbyTicker);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolbyTicker) {\n        symbol.isVisible = !symbol.isVisible;\n      }\n    });\n    this.setTriggerRerenderVisibleLines(true);\n  }\n\n  setPortfolioStartingDate(date) {\n    this.portfolioStartingDate = date;\n  }\n\n  get totalValueOfSymbols() {\n    return this.symbols.reduce((pv, symbolSet) => {\n      if (symbolSet.symbolTicker !== \"Portfolio\") return +pv + +symbolSet.value;\n      else return pv;\n    }, 0);\n  }\n\n  async doesSymbolExist(symbolTicker) {\n    let doesExist = false;\n    this.symbols.forEach((symbolSet) => {\n      if (symbolSet.symbolTicker === symbolTicker) {\n        doesExist = true;\n      }\n    });\n    return doesExist;\n  }\n\n  getSymbolSetForTicker(symbolTicker) {\n    return this.symbols.find((symbolSet) => symbolSet.symbolTicker === symbolTicker);\n  }\n\n  get symbolsWithoutPortfolio() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n  }\n\n  get symbolPortfolioOnly() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker === \"Portfolio\");\n  }\n\n  get symbolsSortedByTickerPortfolioFirst() {\n    let temp = this.symbols;\n    temp = temp.slice().sort(compareSymbolSetsByTickerPortfolioFirst);\n    return temp;\n  }\n\n  get symbolsSortedByPortfolioBuilderSetting() {\n    let temp = this.symbols;\n    if (this.portfolioBuilderSetting === \"ticker\") {\n      temp = temp.slice().sort(compareSymbolSetsByTicker);\n    } else if (this.portfolioBuilderSetting === \"name\") {\n      temp = temp.slice().sort(compareSymbolSetsByName);\n    } else if (this.portfolioBuilderSetting === \"performance_annualized\") {\n      temp = temp.slice().sort(compareSymbolSetsByPerformanceAnnulized);\n    } else if (this.portfolioBuilderSetting === \"performance_since_start\") {\n      temp = temp.slice().sort(compareSymbolSetsByPerformanceSinceStart);\n    } else if (this.portfolioBuilderSetting === \"value\") {\n      temp = temp.slice().sort(compareSymbolSetsByValue);\n    }\n    return temp;\n  }\n\n  get symbolsSortedByTickerWithoutPortfolio() {\n    let temp = this.symbols;\n    temp = temp.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n    temp = temp.slice().sort(compareSymbolSetsByTickerPortfolioFirst);\n    return temp;\n  }\n\n  get listOfSymbolTickers() {\n    return this.symbols.map((symbolSet) => symbolSet.symbolTicker);\n  }\n\n  setValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating value: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.value = value;\n      }\n    });\n  }\n\n  setDateFetchedForTicker(changedSymbolByTicker, date) {\n    console.log(\"Updating dateFetched: \" + date);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.dateFetched = date;\n      }\n    });\n  }\n\n  setPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating performanceSincePortfolioStart: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.performanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setYearlyPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setYearlyPerformanceSincePortfolioStartForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.yearlyPerformanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setEndValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setEndValueForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.endValue = value;\n      }\n    });\n  }\n\n  setTotalDividendPayoutForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setTotalDividendPayoutForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.totalDividendPayout = value;\n      }\n    });\n  }\n\n  setSharpRatioForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setSharpRatioForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol[\"sharpRatio\"] = value;\n      }\n    });\n  }\n\n  setPortfolioBuilderSetting(newVal) {\n    this.portfolioBuilderSetting = newVal;\n  }\n\n  nextAvailableColorValue() {\n    let availableColorValue = null;\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (!element.isBegingUsed) {\n        availableColorValue = element.colorValue;\n        element.isBegingUsed = true;\n        break;\n      }\n    }\n    return availableColorValue;\n  }\n\n  removeColorInUse(colorValue) {\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (element.colorValue === colorValue) {\n        element.isBegingUsed = false;\n        break;\n      }\n    }\n  }\n}\n\nconst chartColorsForSeries = [\n  { colorValue: \"#3f51b5\", isBegingUsed: false },\n  { colorValue: \"#2196f3\", isBegingUsed: false },\n  { colorValue: \"#03a9f4\", isBegingUsed: false },\n  { colorValue: \"#00bcd4\", isBegingUsed: false },\n  { colorValue: \"#009688\", isBegingUsed: false },\n  { colorValue: \"#4caf50\", isBegingUsed: false },\n  { colorValue: \"#8bc34a\", isBegingUsed: false },\n  { colorValue: \"#cddc39\", isBegingUsed: false },\n  { colorValue: \"#ffeb3b\", isBegingUsed: false },\n  { colorValue: \"#ffc107\", isBegingUsed: false },\n  { colorValue: \"#ff9800\", isBegingUsed: false },\n  { colorValue: \"#ff5722\", isBegingUsed: false },\n  { colorValue: \"#f44336\", isBegingUsed: false },\n  { colorValue: \"#e91e63\", isBegingUsed: false },\n  { colorValue: \"#9c27b0\", isBegingUsed: false },\n  { colorValue: \"#673ab7\", isBegingUsed: false },\n];\nconst compareSymbolSetsByTicker = (a, b) => {\n  if (a.symbolTicker < b.symbolTicker) {\n    return -1;\n  }\n  if (a.symbolTicker > b.symbolTicker) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByTickerPortfolioFirst = (a, b) => {\n  if (b.symbolTicker === \"Portfolio\") {\n    return 1;\n  }\n  if (a.symbolTicker < b.symbolTicker) {\n    return -1;\n  }\n  if (a.symbolTicker > b.symbolTicker) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByPerformanceAnnulized = (a, b) => {\n  if (a.yearlyPerformanceSincePortfolioStart > b.yearlyPerformanceSincePortfolioStart) {\n    return -1;\n  }\n  if (a.yearlyPerformanceSincePortfolioStart < b.yearlyPerformanceSincePortfolioStart) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByPerformanceSinceStart = (a, b) => {\n  if (a.performanceSincePortfolioStart > b.performanceSincePortfolioStart) {\n    return -1;\n  }\n  if (a.performanceSincePortfolioStart < b.performanceSincePortfolioStart) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByName = (a, b) => {\n  if (a.name < b.name) {\n    return -1;\n  }\n  if (a.name > b.name) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByValue = (a, b) => {\n  if (a.value > b.value) {\n    return -1;\n  }\n  if (a.value < b.value) {\n    return 1;\n  }\n  return 0;\n};\nconst dataStore = new DataStore();\nexport default dataStore;\n","import React from \"react\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport { observer } from \"mobx-react-lite\";\nimport FetchDataService from \"../services/FetchDataService\";\n\nconst filterOptions = createFilterOptions({\n  matchFrom: \"any\",\n  stringify: (option) => `${option.symbolTicker}-${option.name}`,\n});\n\nconst SearchForSymbolInput = observer(({ dataStore, notificationStore }) => {\n  const [searchOptions, setSearchOptions] = React.useState([]);\n  const [isLoadingSearch, setIsLoadingSearch] = React.useState(false);\n  const [searchTimeout, setSearchTimeout] = React.useState(null);\n  const [value, setValue] = React.useState(searchOptions[0]);\n\n  const handleValueChange = async (keywords) => {\n    const handleSearch = async (keywords) => {\n      setIsLoadingSearch(true);\n      const res = await FetchDataService.searchAlphaVantageByKeywords(keywords);\n      setIsLoadingSearch(false);\n      if (res) setSearchOptions(res);\n    };\n\n    if (searchTimeout) clearTimeout(searchTimeout);\n    if (!keywords) return;\n    const timeout = setTimeout(async () => {\n      await handleSearch(keywords);\n    }, 500);\n    setSearchTimeout(timeout);\n  };\n\n  const handleSearchSelect = async (symbolSearchResult) => {\n    const doesExist = await dataStore.doesSymbolExist(symbolSearchResult.symbolTicker);\n\n    if (doesExist) {\n      notificationStore.enqueueSnackbar({\n        message: `Symbol: ${symbolSearchResult.symbolTicker} already part of portfolio`,\n        options: {\n          variant: \"warning\",\n          autoHideDuration: 2000,\n        },\n        key: `SYMBOL-DUPLICATE-${symbolSearchResult.symbolTicker}`,\n      });\n    } else {\n      dataStore.addSymbol(symbolSearchResult);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      loading={isLoadingSearch}\n      value={value}\n      onChange={(event, symbolSearchResult) => {\n        setValue(\"\");\n        if (symbolSearchResult && symbolSearchResult.symbolTicker) handleSearchSelect(symbolSearchResult);\n      }}\n      options={searchOptions}\n      filterOptions={filterOptions}\n      renderOption={(option) => (\n        <div>\n          <Typography>{option.name}</Typography>\n          <Typography variant=\"caption\">\n            {option.symbolTicker} - {option.region} - {option.currency}\n          </Typography>\n        </div>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Add Asset\"\n          variant=\"outlined\"\n          onChange={(event) => handleValueChange(event.target.value)}\n        />\n      )}\n      style={{ minWidth: \"100px\", paddingRight: \"10px\" }}\n    />\n  );\n});\nexport default SearchForSymbolInput;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Chip, Grid, Menu, MenuItem, ListItemIcon, Typography } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MoneyIcon from \"@material-ui/icons/Money\";\nimport { observer } from \"mobx-react-lite\";\nimport SearchForSymbolInput from \"../components/SearchForSymbolInput\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nconst SelectedSymbolsBar = observer(({ dataStore, notificationStore }) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [menuSelectedSymbolSet, setMenuSelectedSymbolSet] = React.useState(null);\n\n  const toggleVisibility = (symbolTickerToHide) => () => {\n    dataStore.toggleSymbolVisibility(symbolTickerToHide);\n  };\n\n  const handleDelete = (symbolTickerToDelete) => {\n    dataStore.removeSelectedSymbol(symbolTickerToDelete);\n    handleClose();\n  };\n\n  const handleMenuClick = (event, symbolSet) => {\n    setMenuSelectedSymbolSet(symbolSet);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>\n        <MenuItem>\n          <ListItemIcon>\n            <InfoIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap>\n            {menuSelectedSymbolSet ? menuSelectedSymbolSet.symbolTicker : null}\n          </Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <MoneyIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap>\n            {menuSelectedSymbolSet ? menuSelectedSymbolSet.currency : \"-\"}\n          </Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <TodayIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap>\n            {menuSelectedSymbolSet ? menuSelectedSymbolSet.dateFetched : \"-\"}\n          </Typography>\n        </MenuItem>\n        <MenuItem onClick={() => handleDelete(menuSelectedSymbolSet.symbolTicker)}>\n          <ListItemIcon>\n            <DeleteIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap color=\"error\">\n            Remove\n          </Typography>\n        </MenuItem>\n      </Menu>\n\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item xs={8}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            {dataStore.symbolsSortedByTickerPortfolioFirst.map((symbolSet) => {\n              return (\n                <Chip\n                  key={symbolSet.symbolTicker}\n                  label={symbolSet.symbolTicker}\n                  onClick={toggleVisibility(symbolSet.symbolTicker)}\n                  onDelete={\n                    symbolSet.symbolTicker !== \"Portfolio\" ? (event) => handleMenuClick(event, symbolSet) : false\n                  }\n                  deleteIcon={<InfoIcon />}\n                  className={classes.chip}\n                  color={symbolSet.isVisible ? \"primary\" : \"default\"}\n                  clickable={true}\n                  style={{ backgroundColor: symbolSet.isVisible ? symbolSet.color : \"#eeeeee\" }}\n                />\n              );\n            })}\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <SearchForSymbolInput dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\nexport default SelectedSymbolsBar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\n\nconst useStyles = makeStyles({});\n\nconst PortfolioBuilder = observer(({ dataStore }) => {\n  const classes = useStyles();\n  let index = 1;\n\n  const getItemNumber = (symbolTicker) => {\n    if (symbolTicker === \"Portfolio\") {\n      return null;\n    } else {\n      const result = index + \".\";\n      index++;\n      return result;\n    }\n  };\n\n  const setPortfolioBuilderSetting = (newVal) => {\n    dataStore.setPortfolioBuilderSetting(newVal);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>No.</TableCell>\n            <TableCell onClick={() => setPortfolioBuilderSetting(\"ticker\")}>Symbol</TableCell>\n            <TableCell onClick={() => setPortfolioBuilderSetting(\"name\")}>Name</TableCell>\n            <TableCell\n              id=\"annualized\"\n              align=\"right\"\n              onClick={() => setPortfolioBuilderSetting(\"performance_annualized\")}\n            >\n              Annualized Performance\n            </TableCell>\n            <TableCell\n              id=\"performance\"\n              align=\"right\"\n              onClick={() => setPortfolioBuilderSetting(\"performance_since_start\")}\n            >\n              Performance since start\n            </TableCell>\n            <TableCell align=\"right\" style={{ maxWidth: \"80px\" }} onClick={() => setPortfolioBuilderSetting(\"value\")}>\n              Value\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataStore.symbolsSortedByPortfolioBuilderSetting.map((symbolSet) => {\n            return (\n              <TableRow key={symbolSet.symbolTicker}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {getItemNumber(symbolSet.symbolTicker)}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  {symbolSet.symbolTicker === \"Portfolio\" ? <b>{symbolSet.symbolTicker}</b> : symbolSet.symbolTicker}\n                </TableCell>\n                <TableCell align=\"left\">\n                  {symbolSet.name === \"Portfolio\" ? <b>{symbolSet.name}</b> : symbolSet.name}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {performanceToPercent(symbolSet.yearlyPerformanceSincePortfolioStart)}\n                </TableCell>\n                <TableCell align=\"right\">{performanceToPercent(symbolSet.performanceSincePortfolioStart)}</TableCell>\n                <TableCell align=\"right\">\n                  {symbolSet.symbolTicker === \"Portfolio\" ? (\n                    <Typography noWrap>End: ${symbolSet.endValue.toFixed(2)}</Typography>\n                  ) : (\n                    <input\n                      type=\"text\"\n                      value={symbolSet.value}\n                      onChange={(event) => dataStore.setValueForTicker(symbolSet.symbolTicker, event.target.value)}\n                      style={{ maxWidth: \"60px\" }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell align=\"right\">\n            <Typography noWrap>Total: ${dataStore.totalValueOfSymbols}</Typography>\n          </TableCell>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(2) + \"%\";\n}\n\nexport default PortfolioBuilder;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Paper, Typography, CircularProgress } from \"@material-ui/core\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\nconst KeyMetricCard = ({ titel, description, value = 0, showPercent = false }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid container item direction=\"column\" justify=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n              {titel}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h3\" component=\"h2\">\n              {value ? showPercent ? performanceToPercent(value) : value.toFixed(2) : <CircularProgress />}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"caption\" component=\"p\">\n              {description}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(0) + \"%\";\n}\n\nexport default KeyMetricCard;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport KeyMetricCard from \"./KeyMetricCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: 0,\n    margin: 0,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\nconst KeyIndicatorRow = observer(({ dataStore, keyMetricsStore }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3} justify=\"space-evenly\" alignItems=\"center\">\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Peformance\"}\n            description={\"Portfolio performance since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").performanceSincePortfolioStart}\n            showPercent={true}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Annualized\"}\n            description={\"Annualized portfolio performance since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").yearlyPerformanceSincePortfolioStart}\n            showPercent={true}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Dividend\"}\n            description={\"Dividends payed out since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").totalDividendPayout}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Sharp Ratio\"}\n            description={\"Calculated based on set risk free rate\"}\n            value={keyMetricsStore.portfolioSharpRatio}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nexport default KeyIndicatorRow;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst DatePicker = observer(({ dataStore }) => {\n  const handleDateChange = (date) => {\n    const dateString = date.format(\"YYYY-MM-DD\");\n\n    // Regex to evaluate YYYY-MM-DD  format\n    const patternDateFormat = /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;\n\n    // If a match exists then set portfolioStartingDate\n    if (patternDateFormat.exec(dateString)) {\n      dataStore.setPortfolioStartingDate(dateString);\n    }\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy-MM-DD\"\n        margin=\"normal\"\n        id=\"date-picker-starting-datet\"\n        label=\"Starting date\"\n        value={dataStore.portfolioStartingDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n});\n\nexport default DatePicker;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Typography, Slider, Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport DatePicker from \"./DatePicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(2),\n  },\n  gridItem: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst marks = [\n  {\n    value: -1.5,\n    label: \"-1.5%\",\n  },\n  {\n    value: 0,\n    label: \"0%\",\n  },\n  {\n    value: 1,\n    label: \"1%\",\n  },\n  {\n    value: 5,\n    label: \"5%\",\n  },\n  {\n    value: 10,\n    label: \"10%\",\n  },\n];\n\nfunction valuetext(value) {\n  return `${value}%`;\n}\n\nconst ChartConfigurationCard = observer(({ configStore, dataStore }) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root} elevation={1}>\n      <Typography variant=\"h4\" gutterBottom>\n        Configurations\n      </Typography>\n      <Grid container spacing={3} xs={12} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <DatePicker dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <Typography id=\"discrete-slider-custom\" gutterBottom>\n            Risk Free Rate: {JSON.stringify(configStore.riskFreeRate)}%\n          </Typography>\n          <Slider\n            defaultValue={configStore.riskFreeRate}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"discrete-slider-custom\"\n            min={-1.5}\n            max={10}\n            step={0.1}\n            valueLabelDisplay=\"auto\"\n            marks={marks}\n            onChangeCommitted={(e, val) => configStore.setRiskFreeRate(val)}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\n\nexport default ChartConfigurationCard;\n","import React from \"react\";\nimport { FormGroup, FormControlLabel, Switch } from \"@material-ui/core\";\n\nexport default function ChartSwitchStyle({ selectedChartStyleType, switchStyle }) {\n  const [state, setState] = React.useState({\n    checkedA: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    switchStyle();\n  };\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n        label={selectedChartStyleType}\n      />\n    </FormGroup>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRerenderPortfolio = observer(({ dataStore, rerenderPortfolio }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRecalculatePortfolio\");\n      if (dataStore.triggerRerenderPortfolio) rerenderPortfolio();\n      dataStore.setTriggerRerenderPortfolio(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerRerenderPortfolio;\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerShowVisibleLines = observer(({ dataStore, rerenderVisibleLines }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerShowVisibleLines\");\n      if (dataStore.triggerRerenderVisibleLines) rerenderVisibleLines();\n      dataStore.setTriggerRerenderVisibleLines(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerShowVisibleLines;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport { Paper, LinearProgress } from \"@material-ui/core\";\nimport ChartSwitchStyle from \"./ChartSwitchStyle\";\nimport TriggerRerenderPortfolio from \"./TriggerRerenderPortfolio\";\nimport TriggerShowVisibleLines from \"./TriggerShowVisibleLines\";\nimport symbolDataStore from \"../stores/SymbolDataStore\";\n\nexport default class ChartPortfolioOverview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedChartStyleType: \"percent\",\n    };\n    this.myRef = React.createRef();\n    this.chart = {};\n    this.lineSeriesObj = {};\n\n    this.rerenderPortfolio = this.rerenderPortfolio.bind(this);\n    this.rerenderVisibleLines = this.rerenderVisibleLines.bind(this);\n    this.switchStyle = this.switchStyle.bind(this);\n    this.createGraphForSelectedSymbols = this.createGraphForSelectedSymbols.bind(this);\n    this.addLineSeriesData = this.addLineSeriesData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n    if (!this.props.configStore.isRunningSetup) this.createGraphForSelectedSymbols();\n  }\n\n  renderChart() {\n    if (this.myRef.current.firstChild) {\n      this.myRef.current.removeChild(this.myRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(\n      this.myRef.current,\n      this.state.selectedChartStyleType === \"percent\" ? stylePercent : styleAbsolut\n    );\n  }\n\n  async rerenderPortfolio() {\n    this.addLineSeriesData(this.props.dataStore.getSymbolSetForTicker(\"Portfolio\"));\n  }\n\n  rerenderVisibleLines() {\n    this.createGraphForSelectedSymbols();\n  }\n\n  switchStyle() {\n    console.log(\"switching style\");\n    if (this.state.selectedChartStyleType === \"absolut\") {\n      this.setState({ selectedChartStyleType: \"percent\" });\n      this.chart.applyOptions(stylePercent);\n    } else if (this.state.selectedChartStyleType === \"percent\") {\n      this.setState({ selectedChartStyleType: \"absolut\" });\n      this.chart.applyOptions(styleAbsolut);\n    }\n  }\n\n  async createGraphForSelectedSymbols() {\n    console.log(\"createGraphForSelectedSymbols\");\n\n    // Remove lines for deleted symbols\n    const tempListOfAllSymbols = this.props.dataStore.listOfSymbolTickers;\n    for (const [symbolTicker, lineSeries] of Object.entries(this.lineSeriesObj)) {\n      // Check if ticker in dataStore symbols, if then remove lineseries\n      if (!tempListOfAllSymbols.includes(symbolTicker)) {\n        this.chart.removeSeries(lineSeries[\"series\"]);\n        delete this.lineSeriesObj[symbolTicker];\n      }\n    }\n\n    this.props.dataStore.symbols.forEach((symbolSet) => {\n      if (symbolSet.isVisible) {\n        this.addLineSeriesData(symbolSet);\n      } else {\n        if (this.lineSeriesObj[symbolSet.symbolTicker] && this.lineSeriesObj[symbolSet.symbolTicker][\"series\"]) {\n          let tempLineSeries = this.lineSeriesObj[symbolSet.symbolTicker][\"series\"];\n          this.chart.removeSeries(tempLineSeries);\n          delete this.lineSeriesObj[symbolSet.symbolTicker];\n        }\n      }\n    });\n  }\n\n  async addLineSeriesData(symbolSet) {\n    console.log(\"addLineSeriesData: \" + symbolSet.symbolTicker);\n\n    // TODO If data not availible then fetch data\n    const dataForSymbol = await symbolDataStore.getSymbolTimeseriesDataFromMap(symbolSet.symbolTicker);\n\n    if (!this.lineSeriesObj[symbolSet.symbolTicker]) {\n      // If lineSeriesObj for ticker does not exist then create new lineSeriesObj\n      let tempLineSeries = this.chart.addLineSeries({\n        color: symbolSet.color,\n      });\n      if (dataForSymbol && dataForSymbol.length !== 0) {\n        tempLineSeries.setData(dataForSymbol);\n      }\n      // Create new lineSeries Object\n      this.lineSeriesObj[symbolSet.symbolTicker] = { series: tempLineSeries, color: symbolSet.color };\n    } else {\n      // If lineSeries exists then only update data, keep color\n      if (dataForSymbol && dataForSymbol.length !== 0)\n        this.lineSeriesObj[symbolSet.symbolTicker][\"series\"].setData(dataForSymbol);\n    }\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\" }}>\n        <ChartSwitchStyle\n          refreshData={this.refreshData}\n          switchStyle={this.switchStyle}\n          selectedChartStyleType={this.state.selectedChartStyleType === \"absolut\" ? \"absolut\" : \"percent\"}\n        />\n        <CalculatingProgress symbolDataStore={this.props.symbolDataStore} />\n        <div ref={this.myRef} id=\"chart-ref\"></div>\n        <TriggerRerenderPortfolio dataStore={this.props.dataStore} rerenderPortfolio={this.rerenderPortfolio} />\n        <TriggerShowVisibleLines dataStore={this.props.dataStore} rerenderVisibleLines={this.rerenderVisibleLines} />\n      </Paper>\n    );\n  }\n}\n\nconst CalculatingProgress = observer(({ symbolDataStore }) => (\n  <div>{symbolDataStore.isCalculatingPortfolioPerformance ? <LinearProgress /> : null}</div>\n));\n\nconst styleAbsolut = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Percentage,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRerenderDrawdown = observer(({ keyMetricsStore, rerenderDrawdown }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRerenderDrawdown\");\n      if (keyMetricsStore.portfolioDrawdownTimeSeries.length !== 0) rerenderDrawdown();\n    })\n  );\n  return <div />;\n});\nexport default TriggerRerenderDrawdown;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport keyMetricsStore from \"../stores/KeyMetricsStore\";\nimport { Paper, LinearProgress } from \"@material-ui/core\";\nimport TriggerRerenderDrawdown from \"./TriggerRerenderDrawdown\";\n\nexport default class ChartDrawdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.drawdownChartRef = React.createRef();\n    this.chart = {};\n    this.drawdownLineSeries = null;\n\n    this.addDrawdownLineSeries = this.addDrawdownLineSeries.bind(this);\n    this.rerenderDrawdown = this.rerenderDrawdown.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n    this.addDrawdownLineSeries();\n  }\n\n  renderChart() {\n    if (this.drawdownChartRef.current.firstChild) {\n      this.drawdownChartRef.current.removeChild(this.drawdownChartRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(this.drawdownChartRef.current, stylePercent);\n\n    // Create lineSeries and add it to the chart\n    this.drawdownLineSeries = this.chart.addLineSeries({\n      color: \"#f44336\",\n      priceLineVisible: false,\n      priceFormat: {\n        type: \"custom\",\n        minMove: 0.01,\n        formatter: (value) => value.toFixed(2) + \"%\",\n      },\n    });\n  }\n\n  async addDrawdownLineSeries() {\n    this.drawdownLineSeries.setData(keyMetricsStore.portfolioDrawdownTimeSeries);\n  }\n\n  rerenderDrawdown() {\n    this.addDrawdownLineSeries();\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\" }}>\n        <CalculatingProgress keyMetricsStore={this.props.keyMetricsStore} />\n        <div ref={this.drawdownChartRef} id=\"chart-ref\"></div>\n        <TriggerRerenderDrawdown\n          keyMetricsStore={this.props.keyMetricsStore}\n          rerenderDrawdown={this.rerenderDrawdown}\n        />\n      </Paper>\n    );\n  }\n}\n\nconst CalculatingProgress = observer(({ keyMetricsStore }) => (\n  <div>{keyMetricsStore.portfolioDrawdownTimeSeries.length === 0 ? <LinearProgress /> : null}</div>\n));\n\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Tabs, Tab, Typography, Box, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport ChartPortfolioOverview from \"./ChartPortfolioOverview\";\nimport ChartDrawdown from \"./ChartDrawdown\";\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst TabBar = observer(({ dataStore, symbolDataStore, keyMetricsStore, configStore }) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.root}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          centered\n        >\n          <Tab label=\"Overview\" {...a11yProps(0)} />\n          <Tab label=\"Drawdown\" {...a11yProps(1)} />\n        </Tabs>\n      </Paper>\n\n      <TabPanel value={value} index={0}>\n        <ChartPortfolioOverview dataStore={dataStore} configStore={configStore} symbolDataStore={symbolDataStore} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <ChartDrawdown keyMetricsStore={keyMetricsStore} />\n      </TabPanel>\n    </div>\n  );\n});\n\nexport default TabBar;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport SelectedSymbolsBar from \"../components/SelectedSymbolsBar\";\nimport PortfolioBuilder from \"../components/PortfolioBuilder\";\nimport KeyMetricRow from \"../components/KeyMetricRow\";\nimport ChartConfigurationCard from \"../components/ChartConfigurationCard\";\nimport TabBar from \"../components/TabBar\";\n\nconst ChartingPage = ({ dataStore, notificationStore, configStore, symbolDataStore, keyMetricsStore }) => {\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12} spacing={3}>\n          <SelectedSymbolsBar dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <KeyMetricRow dataStore={dataStore} keyMetricsStore={keyMetricsStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <TabBar\n            dataStore={dataStore}\n            configStore={configStore}\n            symbolDataStore={symbolDataStore}\n            keyMetricsStore={keyMetricsStore}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <PortfolioBuilder dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <ChartConfigurationCard configStore={configStore} dataStore={dataStore} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ChartingPage;\n","import React from \"react\";\nimport { Paper, Typography, TextField, Link } from \"@material-ui/core\";\n\nconst SettingsPage = ({ configStore }) => {\n  return (\n    <div>\n      <Paper elevation={1} style={{ padding: \"20px\" }}>\n        <Typography variant=\"h1\" gutterBottom>\n          Settings\n        </Typography>\n\n        <Typography variant=\"h6\" gutterBottom>\n          Alpha Vantag API Token\n        </Typography>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"API-Token\"\n          variant=\"outlined\"\n          defaultValue={configStore.alphaVantage.apiToken}\n          onChange={(e) => configStore.setAlphaVantageAPITokenIDB(e.target.value)}\n        />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          Get your free token here:{\" \"}\n          <Link href=\"https://www.alphavantage.co/support/#api-key\" target=\"_blank\" rel=\"noreferrer\">\n            Alpha Vantage\n          </Link>{\" \"}\n          (Hint: try a random key)\n        </Typography>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","import { Component } from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { inject, observer } from \"mobx-react\";\nimport { autorun } from \"mobx\";\n\nclass Notifier extends Component {\n  displayed = [];\n\n  storeDisplayed = (id) => {\n    this.displayed = [...this.displayed, id];\n  };\n\n  removeDisplayedNotificationByKey(removeKey) {\n    this.displayed = this.displayed.filter((key) => removeKey !== key);\n  }\n\n  componentDidMount() {\n    autorun(() => {\n      const { notifications = [] } = this.props.notificationStore;\n\n      notifications.forEach((notification) => {\n        // Do nothing if snackbar is already displayed\n        if (this.displayed.includes(notification.key)) return;\n        // Display snackbar using notistack\n        this.props.enqueueSnackbar(notification.message, notification.options);\n        // Keep track of snackbars that we've displayed\n        this.storeDisplayed(notification.key);\n        // Dispatch action to remove snackbar from mobx store\n        this.props.notificationStore.removeSnackbar(notification.key);\n\n        // Calculate delay to remove notification from this.displayed\n        let delayUntilRemoveMs = 0;\n        if (notification.options && notification.options.autoHideDuration) {\n          delayUntilRemoveMs = notification.options.autoHideDuration + 100;\n        } else {\n          delayUntilRemoveMs = 2100;\n        }\n        // Remove notifaction from this.disyplayed after dealy\n        setTimeout(\n          function () {\n            this.removeDisplayedNotificationByKey(notification.key);\n          }.bind(this),\n          delayUntilRemoveMs\n        );\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withSnackbar(inject(\"notificationStore\")(observer(Notifier)));\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n// Content\nimport dataStore from \"./stores/DataStore\";\nimport notificationStore from \"./stores/NotificationStore\";\nimport configStore from \"./stores/ConfigStore\";\nimport symbolDataStore from \"./stores/SymbolDataStore\";\nimport ChartingPage from \"./pages/ChartingPage\";\nimport SettingsPage from \"./pages/SettingsPage\";\nimport keyMetricsStore from \"./stores/KeyMetricsStore\";\nimport Notifier from \"./components/Notifier\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [pages, setPages] = React.useState({ chartingPage: { showPage: true }, settingsPage: { showPage: false } });\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handlePageSelect = (pageToShow) => {\n    const tempPages = {};\n    for (const [page] of Object.entries(pages)) {\n      if (page === pageToShow) tempPages[page] = { showPage: true };\n      else tempPages[page] = { showPage: false };\n    }\n    setPages(tempPages);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Notifier notificationStore={notificationStore} />\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Historic-Portfolio-Analyzer (0.8.0)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key={\"charting-page\"} onClick={() => handlePageSelect(\"chartingPage\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Chart\"} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key={\"serttings-page\"} onClick={() => handlePageSelect(\"settingsPage\")}>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Settings\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {pages.chartingPage.showPage ? (\n          <ChartingPage\n            dataStore={dataStore}\n            notificationStore={notificationStore}\n            configStore={configStore}\n            symbolDataStore={symbolDataStore}\n            keyMetricsStore={keyMetricsStore}\n          />\n        ) : null}\n        {pages.settingsPage.showPage ? <SettingsPage configStore={configStore} /> : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Provider } from 'mobx-react';\nimport notificationStore from \"./stores/NotificationStore\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider notificationStore={notificationStore}>\n    <SnackbarProvider maxSnack={10}>\n      <App />\n    </SnackbarProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}