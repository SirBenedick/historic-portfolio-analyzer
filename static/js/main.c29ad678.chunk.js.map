{"version":3,"sources":["stores/dbPromise.js","stores/NotificationStore.js","stores/idbConfigStore.js","stores/ConfigStore.js","services/KeyMetricsService.js","stores/KeyMetricsStore.js","stores/idbSymbolDataStore.js","services/FetchDataService.js","stores/SymbolDataStore.js","stores/DataStore.js","components/SearchForSymbolInput.js","components/SelectedSymbolsBar.js","components/ChartSwitchStyle.js","components/TriggerRecalculatePortfolio.js","components/TriggerShowVisibleLines.js","components/Chart.js","components/PortfolioBuilder.js","components/KeyMetricCard.js","components/KeyMetricRow.js","components/DatePicker.js","components/ChartConfigurationCard.js","pages/ChartingPage.js","pages/SettingsPage.js","components/Notifier.js","App.js","reportWebVitals.js","index.js"],"names":["window","console","log","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","notificationStore","extendObservable","this","notifications","keys","API_TOKEN_MISSING","PORTFOLIO_CALCULATING","API_TOKEN_STORED","enqueueSnackbar","action","note","push","key","Date","getTime","Math","random","removeSnackbar","filter","notification","idbConfigStore","get","set","val","put","delete","clear","getAllKeys","fakeToken","length","result","characters","charactersLength","i","charAt","floor","configStore","alphaVantage","url","apiToken","isRunningSetup","alphaVantageConstants","SYMBOL_SEARCH","TIME_SERIES_DAILY_ADJUSTED","riskFreeRate","startSetup","makeObservable","observable","setAlphaVantageAPITokenHelper","setIsRunningSetup","setRiskFreeRate","autorun","trigger","keyMetricsStore","calculateAndSetPortfolioSharpRatio","JSON","stringify","token","setAlphaVantageAPITokenIDB","dataStore","addSymbol","symbolTicker","name","region","currency","bool","newToken","message","options","variant","autoHideDuration","newRate","KeyMetricsService","calculateAndStoreSharpRatio","timeseries","annualizedPerformanceSinceStartPortfolio","startValue","value","dataSet","map","entry","standardDeviation","std","sharpRatio","portfolioSharpRatio","symbolDataStore","getSymbolTimeseriesDataFromMap","getSymbolSetForTicker","yearlyPerformanceSincePortfolioStart","res","idbSymbolDataStore","getAdjustedCloseByTickerAndDate","date","data","getTimeSeriesDailyByTicker","getTimeSeriesDailyByTickerFormated","formateDataToChartFormat","formatAndStoreSymbolData","rawData","meta_data","symbol_ticker","date_fetched","time_zone","formatedData","symbol","time_series_daily","calculateAndStoreHistoricPortfolioPerformance","setIsCalculatingPortfolioPerformance","symbolQuantityMap","startingDate","moment","portfolioStartingDate","endDate","daysSinceStart","diff","Promise","all","getSymbolsWithoutPortfolio","symbolSet","a","format","startingDatePriceValue","add","endDatePriceValue","subtract","performanceSinceStart","parseFloat","setPerformanceSincePortfolioStartForTicker","yearlyPerformanceSinceStart","setYearlyPerformanceSincePortfolioStartForTicker","startingDateValueOfThisSymbol","quantity","endValue","setEndValueForTicker","datesToCheck","isBefore","tempSymbolDatasetMap","tempDataSet","sumOfDividends","forEach","tempSumForDate","Object","entries","dataset","dividend","time","setTimeseriesForTicker","then","endDatePriceValuePortfolio","startingDatePriceValuePortfolio","performanceSinceStartPortfolio","yearlyPerformanceSinceStartPortfolio","setTotalDividendPayoutForTicker","symbolData","temp","dailyInformation","String","reverse","FetchDataService","fetchDataDailyAdjustedForSymbolAlphaVantage","axios","params","function","outputsize","apikey","searchAlphaVantageByKeywords","keywords","matches","searchResultsFormated","isCalculatingPortfolioPerformance","symbolChartTimeseriesDataMap","Portfolio","addSymbolToMap","removeSymbolFromMap","dataForSymbol","DataStore","symbols","isVisible","performanceSincePortfolioStart","color","nextAvailableColorValue","dateFetched","pendingRequests","appleData","triggerRecalculatePortfolio","triggerRecalculatePortfolioTimeout","triggerRerenderVisibleLines","toggleSymbolVisibility","removeSelectedSymbol","setValueForTicker","setTriggerRecalculatePortfolio","setTriggerRerenderVisibleLines","setSharpRatioForTicker","setPortfolioStartingDate","totalValueOfSymbols","computed","listOfSymbolTickers","trigger2","clearTimeout","timeout","setTimeout","symbolSetSearchResult","compareSymbolSets","b","totalDividendPayout","sort","getMetaDataForSymbol","metaData","setDateFetchedForTicker","symbolTickerToDelete","removeColorInUse","changedSymbolbyTicker","doesExist","find","changedSymbolByTicker","availableColorValue","index","chartColorsForSeries","element","isBegingUsed","colorValue","reduce","pv","filterOptions","createFilterOptions","matchFrom","option","SearchForSymbolInput","observer","React","useState","searchOptions","setSearchOptions","isLoadingSearch","setIsLoadingSearch","searchTimeout","setSearchTimeout","setValue","handleValueChange","handleSearch","handleSearchSelect","symbolSearchResult","doesSymbolExist","Autocomplete","id","loading","onChange","event","renderOption","Typography","renderInput","TextField","label","target","style","minWidth","paddingRight","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","SelectedSymbolsBar","classes","anchorEl","setAnchorEl","menuSelectedSymbolSet","setMenuSelectedSymbolSet","handleClose","Paper","className","keepMounted","open","Boolean","onClose","MenuItem","ListItemIcon","fontSize","noWrap","onClick","Grid","container","alignItems","item","xs","direction","justify","Chip","symbolTickerToHide","onDelete","currentTarget","handleMenuClick","deleteIcon","clickable","backgroundColor","ChartSwitchStyle","selectedChartStyleType","switchStyle","checkedA","state","setState","FormGroup","row","FormControlLabel","control","Switch","checked","TriggerRecalculatePortfolio","recalculateAndRenderPortfolio","useEffect","TriggerShowVisibleLines","rerenderVisibleLines","Chart","props","myRef","createRef","chart","lineSeriesObj","bind","createGraphForSelectedSymbols","addLineSeriesData","renderChart","current","firstChild","removeChild","createChart","stylePercent","styleAbsolut","applyOptions","tempListOfAllSymbols","lineSeries","includes","removeSeries","tempLineSeries","setData","addLineSeries","series","refreshData","CalculatingProgress","ref","Component","LinearProgress","height","rightPriceScale","scaleMargins","top","bottom","mode","PriceScaleMode","Normal","borderColor","Percentage","performanceToPercent","performance","toFixed","PortfolioBuilder","TableContainer","component","Table","table","aria-label","size","TableHead","TableRow","TableCell","align","maxWidth","TableBody","scope","type","flexGrow","paper","textAlign","palette","text","secondary","width","title","KeyMetricCard","titel","description","showPercent","gutterBottom","CircularProgress","KeyIndicatorRow","DatePicker","utils","MomentUtils","disableToolbar","KeyboardButtonProps","gridItem","marks","valuetext","ChartConfigurationCard","elevation","Slider","defaultValue","getAriaValueText","aria-labelledby","min","max","step","valueLabelDisplay","onChangeCommitted","e","ChartingPage","KeyMetricRow","SettingsPage","Link","href","rel","Notifier","displayed","storeDisplayed","removeKey","delayUntilRemoveMs","removeDisplayedNotificationByKey","withSnackbar","inject","drawerWidth","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","App","useTheme","setOpen","chartingPage","showPage","settingsPage","pages","setPages","handlePageSelect","pageToShow","tempPages","page","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","edge","Drawer","Divider","List","ListItem","button","ListItemText","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.c29ad678.chunk.js","sourcesContent":["import { openDB } from \"idb\";\n\nif (!(\"indexedDB\" in window)) {\n  console.log(\"This browser doesn't support IndexedDB\");\n}\n\nconst dbPromise = openDB(\"historic-portfolio-analyzer\", 2, {\n  upgrade(db) {\n    if (!db.objectStoreNames.contains(\"symbolDataStore\")) {\n      console.log(\"Creating new symbolDataStore\");\n      db.createObjectStore(\"symbolDataStore\", {\n        keyPath: \"symbol\",\n        autoIncrement: false,\n      });\n    }\n    if (!db.objectStoreNames.contains(\"configStore\")) {\n      console.log(\"Creating new configStore\");\n      db.createObjectStore(\"configStore\");\n    }\n  },\n});\n\nexport default dbPromise;\n","import { action, extendObservable } from \"mobx\";\n\nconst NotificationStore = function () {\n  extendObservable(this, {\n    notifications: [],\n    keys: {\n      API_TOKEN_MISSING: \"API_TOKEN_MISSING\",\n      PORTFOLIO_CALCULATING: \"PORTFOLIO_CALCULATING\",\n      API_TOKEN_STORED: \"API_TOKEN_STORED\",\n    },\n\n    enqueueSnackbar: action((note) => {\n      this.notifications.push({\n        key: note.key ? note.key : new Date().getTime() + Math.random(),\n        ...note,\n      });\n    }),\n\n    removeSnackbar: action((key) => {\n      this.notifications = this.notifications.filter((notification) => notification.key !== key);\n    }),\n  });\n};\n\nconst notificationStore = new NotificationStore();\nexport default notificationStore;\n","import dbPromise from \"./dbPromise\";\n\nconst idbConfigStore = {\n  async get(key) {\n    return (await dbPromise).get(\"configStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"configStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"configStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"configStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"configStore\");\n  },\n};\n\nexport default idbConfigStore;\n","import { makeObservable, observable, action, autorun } from \"mobx\";\nimport idbConfigStore from \"./idbConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport dataStore from \"./DataStore\";\nimport keyMetricsStore from \"./KeyMetricsStore\";\n\nclass ConfigStore {\n  alphaVantage = { url: \"https://www.alphavantage.co/query\", apiToken: \"\" };\n  isRunningSetup = true;\n  alphaVantageConstants = { SYMBOL_SEARCH: \"SYMBOL_SEARCH\", TIME_SERIES_DAILY_ADJUSTED: \"TIME_SERIES_DAILY_ADJUSTED\" };\n  riskFreeRate = 1;\n\n  constructor() {\n    this.startSetup();\n\n    makeObservable(this, {\n      alphaVantage: observable,\n      isRunningSetup: observable,\n      riskFreeRate: observable,\n      setAlphaVantageAPITokenHelper: action,\n      setIsRunningSetup: action,\n      setRiskFreeRate: action,\n    });\n\n    autorun(() => {\n      const trigger = this.riskFreeRate;\n\n      if (!this.isRunningSetup) keyMetricsStore.calculateAndSetPortfolioSharpRatio();\n      console.log(\"Autorun: triggering sharp ratio rercalculation: \" + JSON.stringify(trigger));\n    });\n  }\n\n  async startSetup() {\n    console.log(\"startSetup\");\n    // Load stored API token from idbConfigStore or create a Token\n    const token = await idbConfigStore.get(\"alphaVantagAPIToken\");\n    if (token) this.setAlphaVantageAPITokenHelper(token);\n    else {\n      await this.setAlphaVantageAPITokenIDB(fakeToken(16));\n    }\n\n    // Add default symbols\n    // If no deafult symbols added then dataStore trigger have to be called manually\n    dataStore.addSymbol({ symbolTicker: \"AAPL\", name: \"Apple Inc.\", region: \"testRegion\", currency: \"USD\" });\n\n    this.setIsRunningSetup(false);\n  }\n\n  setIsRunningSetup(bool) {\n    this.isRunningSetup = bool;\n  }\n\n  // Store new alphaVantagAPIToken to idbConfigStore then store in mobx store\n  async setAlphaVantageAPITokenIDB(newToken) {\n    await idbConfigStore.set(\"alphaVantagAPIToken\", newToken);\n    notificationStore.enqueueSnackbar({\n      message: `Stored new API-Token${this.alphaVantage.apiToken}`,\n      options: {\n        variant: \"success\",\n        autoHideDuration: 1000,\n      },\n      key: notificationStore.keys.API_TOKEN_STORED,\n    });\n    this.setAlphaVantageAPITokenHelper(newToken);\n  }\n\n  setAlphaVantageAPITokenHelper(newToken) {\n    console.log(\"setAlphaVantageAPITokenHelper: \" + newToken);\n    this.alphaVantage.apiToken = newToken;\n  }\n  setRiskFreeRate(newRate) {\n    console.log(\"setRiskFreeRate: \" + newRate);\n    this.riskFreeRate = newRate;\n  }\n}\n\nfunction fakeToken(length) {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst configStore = new ConfigStore();\nexport default configStore;\n","import { std } from \"mathjs\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst KeyMetricsService = {\n  async calculateAndStoreSharpRatio(timeseries, annualizedPerformanceSinceStartPortfolio) {\n    const startValue = timeseries[0].value;\n    const riskFreeRate = configStore.riskFreeRate;\n\n    let dataSet = timeseries.map((entry) => entry.value);\n    dataSet = dataSet.map((value) => (value / startValue) * 100 - riskFreeRate);\n\n    const standardDeviation = std(dataSet);\n\n    const sharpRatio = (annualizedPerformanceSinceStartPortfolio * 100 - riskFreeRate) / standardDeviation;\n\n    return sharpRatio;\n  },\n};\nexport default KeyMetricsService;\n","import { makeObservable, observable, action } from \"mobx\";\nimport dataStore from \"./DataStore\";\nimport symbolDataStore from \"./SymbolDataStore\";\nimport KeyMetricsService from \"../services/KeyMetricsService\";\n\nclass KeyMetricsStore {\n  portfolioSharpRatio = 0;\n\n  constructor() {\n    makeObservable(this, {\n      portfolioSharpRatio: observable,\n      calculateAndSetPortfolioSharpRatio: action,\n    });\n  }\n\n  async calculateAndSetPortfolioSharpRatio() {\n    this.portfolioSharpRatio = 0;\n\n    const timeseries = await symbolDataStore.getSymbolTimeseriesDataFromMap(\"Portfolio\");\n    const annualizedPerformanceSinceStartPortfolio = dataStore.getSymbolSetForTicker(\"Portfolio\")\n      .yearlyPerformanceSincePortfolioStart;\n\n    if (timeseries.length !== 0) {\n      const res = await KeyMetricsService.calculateAndStoreSharpRatio(\n        timeseries,\n        annualizedPerformanceSinceStartPortfolio\n      );\n      this.portfolioSharpRatio = res;\n    } else {\n      this.portfolioSharpRatio = 0;\n    }\n  }\n}\n\nconst keyMetricsStore = new KeyMetricsStore();\nexport default keyMetricsStore;\n","import dbPromise from \"./dbPromise\";\nimport dataStore from \"./DataStore\";\nimport moment from \"moment\";\nimport notificationStore from \"./NotificationStore\";\nimport symbolDataStore from \"./SymbolDataStore\";\nimport keyMetricsStore from \"./KeyMetricsStore\";\n\n/**\n * primary key: symbol\n * Format of object stored (example):\n{\n  symbol: \"AAPL\", \n  meta_data: {\n  symbol_ticker: \"AAPL\"\n  data_fetched: \"2020-11-18\",\n  time_zone: \"US/Eastern\",\n  },\n  time_series_daily:{\n    \"2020-11-10\": {...}\n  } \n}\n */\nconst idbSymbolDataStore = {\n  async get(key) {\n    return (await dbPromise).get(\"symbolDataStore\", key);\n  },\n  async set(val) {\n    return (await dbPromise).put(\"symbolDataStore\", val);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"symbolDataStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"symbolDataStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"symbolDataStore\");\n  },\n  async getAdjustedCloseByTickerAndDate(key, date) {\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data) {\n      if (data[\"time_series_daily\"][date]) return data[\"time_series_daily\"][date][\"5. adjusted close\"];\n    }\n    return false;\n  },\n  async getTimeSeriesDailyByTicker(key) {\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data && data[\"time_series_daily\"]) return data[\"time_series_daily\"];\n    return false;\n  },\n  async getTimeSeriesDailyByTickerFormated(key) {\n    console.log(\"getTimeSeriesDailyByTickerFormated: \" + key);\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data && data[\"time_series_daily\"]) return formateDataToChartFormat(data);\n    return false;\n  },\n  async formatAndStoreSymbolData(symbolTicker, rawData) {\n    let meta_data = {\n      symbol_ticker: rawData[\"Meta Data\"][\"2. Symbol\"],\n      date_fetched: rawData[\"Meta Data\"][\"3. Last Refreshed\"],\n      time_zone: rawData[\"Meta Data\"][\"5. Time Zone\"],\n    };\n\n    let formatedData = {\n      symbol: symbolTicker,\n      meta_data: meta_data,\n      time_series_daily: rawData[\"Time Series (Daily)\"],\n    };\n    await this.set(formatedData);\n  },\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    console.log(\"calculateAndStoreHistoricPortfolioPerformance\");\n    notificationStore.enqueueSnackbar({\n      message: `Calculating Portfolio value`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 2000,\n      },\n      key: notificationStore.keys.PORTFOLIO_CALCULATING,\n    });\n    symbolDataStore.setIsCalculatingPortfolioPerformance(true);\n\n    //  Calculate for each asset the quantity at portfolio start and the performance since\n    console.log(\"Portfolio - calculating quantity\");\n    let symbolQuantityMap = {};\n    let startingDate = moment(dataStore.portfolioStartingDate);\n    let endDate = moment();\n    const daysSinceStart = endDate.diff(startingDate, \"days\") + 1;\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        // Get price of asset for the portfolio starting date\n        let startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          startingDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!startingDatePriceValue) {\n          startingDate.add(1, \"days\");\n          startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            startingDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Get price of asset for the portfolio end date\n        let endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          endDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!endDatePriceValue) {\n          endDate.subtract(1, \"days\");\n          endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            endDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Calculate performanceSinceStart for this symbol and store the value\n        const performanceSinceStart = parseFloat(endDatePriceValue) / parseFloat(startingDatePriceValue) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, performanceSinceStart);\n        // Calculate yearlyPerformanceSinceStart for this symbol and store the value\n        const yearlyPerformanceSinceStart = performanceSinceStart * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, yearlyPerformanceSinceStart);\n\n        // Calculate quantity for this symbol\n        const startingDateValueOfThisSymbol = dataStore.getSymbolSetForTicker(symbolSet.symbolTicker)[\"value\"];\n        const quantity = parseFloat(startingDateValueOfThisSymbol) / parseFloat(startingDatePriceValue);\n\n        symbolQuantityMap[symbolSet.symbolTicker] = quantity;\n\n        const endValue = endDatePriceValue * quantity;\n        dataStore.setEndValueForTicker(symbolSet.symbolTicker, endValue);\n      })\n    );\n\n    // Generate a list of all days between dataStore.portfolioStartingDate and today (including both days)\n    console.log(\"Portfolio - list of dates\");\n    let datesToCheck = [];\n    let date = moment(dataStore.portfolioStartingDate);\n    while (date.isBefore()) {\n      datesToCheck.push(date.format(\"YYYY-MM-DD\"));\n      date.add(1, \"days\");\n    }\n\n    // Iterate through all days and calculate the total value\n    console.log(\"Portfolio - calculating for each day\");\n    let tempSymbolDatasetMap = {};\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        let tempDataSet = await idbSymbolDataStore.getTimeSeriesDailyByTicker(symbolSet.symbolTicker);\n        tempSymbolDatasetMap[symbolSet.symbolTicker] = tempDataSet;\n      })\n    );\n\n    let result = [];\n    let sumOfDividends = 0;\n    datesToCheck.forEach((date) => {\n      let tempSumForDate = 0;\n      for (const [symbolTicker, dataset] of Object.entries(tempSymbolDatasetMap)) {\n        if (dataset && !(date in dataset)) return;\n        const dividend = dataset[date][\"7. dividend amount\"];\n        sumOfDividends += dividend * symbolQuantityMap[symbolTicker];\n        const stockValue = dataset[date][\"5. adjusted close\"];\n        tempSumForDate += stockValue * symbolQuantityMap[symbolTicker];\n      }\n      if (tempSumForDate) result.push({ time: date, value: tempSumForDate });\n    });\n\n    symbolDataStore.setTimeseriesForTicker(\"Portfolio\", result).then((res) => {\n      if (result.length !== 0) {\n        const endDatePriceValuePortfolio = result[0].value;\n        const startingDatePriceValuePortfolio = result[result.length - 1].value;\n        // Calculate performanceSinceStart for portfolio and store the value\n        const performanceSinceStartPortfolio =\n          parseFloat(startingDatePriceValuePortfolio) / parseFloat(endDatePriceValuePortfolio) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(\"Portfolio\", performanceSinceStartPortfolio);\n        // Calculate yearlyPerformanceSinceStart for portfolio and store the value\n        const yearlyPerformanceSinceStartPortfolio = performanceSinceStartPortfolio * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(\"Portfolio\", yearlyPerformanceSinceStartPortfolio);\n\n        dataStore.setTotalDividendPayoutForTicker(\"Portfolio\", sumOfDividends);\n        dataStore.setEndValueForTicker(\"Portfolio\", startingDatePriceValuePortfolio);\n\n        // Calculate key metrics\n        keyMetricsStore.calculateAndSetPortfolioSharpRatio();\n      }\n    });\n\n    symbolDataStore.setIsCalculatingPortfolioPerformance(false);\n    return result;\n  },\n};\n\nconst formateDataToChartFormat = (symbolData) => {\n  let temp = [];\n  for (const [key, dailyInformation] of Object.entries(symbolData[\"time_series_daily\"])) {\n    temp.push({ time: String(key), value: parseFloat(dailyInformation[\"5. adjusted close\"]) });\n  }\n  return temp.reverse();\n};\n\nexport default idbSymbolDataStore;\n","import axios from \"axios\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport notificationStore from \"../stores/NotificationStore\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst FetchDataService = {\n  async fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker) {\n    console.log(\"fetchDataDailyAdjustedForSymbolAlphaVantage\");\n    console.log(`Fetching data for ${symbolTicker}`);\n    notificationStore.enqueueSnackbar({\n      message: `Fetching data for: ${symbolTicker}`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 1500,\n      },\n      key: `FETCHING-${symbolTicker}`,\n    });\n    try {\n      //  Call API\n      const res = await axios.get(configStore.alphaVantage.url, {\n        params: {\n          function: configStore.alphaVantageConstants.TIME_SERIES_DAILY_ADJUSTED,\n          symbol: symbolTicker,\n          outputsize: \"full\",\n          apikey: configStore.alphaVantage.apiToken,\n        },\n      });\n      // Failed request\n      if (\"Note\" in res.data) {\n        console.log(\"Failed to fetch for: \" + symbolTicker);\n        notificationStore.enqueueSnackbar({\n          message: `Failed to fetch data for: ${symbolTicker}`,\n          options: {\n            variant: \"warning\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-FAILED-${symbolTicker}`,\n        });\n        return false;\n      } else {\n        //  Store request results\n        // TODO check if received data was valid\n        await idbSymbolDataStore.formatAndStoreSymbolData(symbolTicker, res.data);\n        notificationStore.enqueueSnackbar({\n          message: `Successfully fetched data for: ${symbolTicker}`,\n          options: {\n            variant: \"success\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-SUCCESS-${symbolTicker}`,\n        });\n        return symbolTicker;\n      }\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n    }\n  },\n  async searchAlphaVantageByKeywords(keywords) {\n    console.log(\"searchAlphaVantageByKeywords: \" + keywords);\n    const res = await axios.get(configStore.alphaVantage.url, {\n      params: {\n        function: configStore.alphaVantageConstants.SYMBOL_SEARCH,\n        keywords: keywords,\n        apikey: configStore.alphaVantage.apiToken,\n      },\n    });\n    if (\"Note\" in res.data) {\n      console.log(\"Failed to search for:\" + keywords);\n      notificationStore.enqueueSnackbar({\n        message: `Failed to search for: ${keywords}`,\n        options: {\n          variant: \"warning\",\n        },\n      });\n      return false;\n    } else {\n      const matches = res.data[\"bestMatches\"];\n      if (!matches) return [];\n      const searchResultsFormated = matches.map((result) => ({\n        symbolTicker: result[\"1. symbol\"],\n        name: result[\"2. name\"],\n        region: result[\"4. region\"],\n        currency: result[\"8. currency\"],\n      }));\n      return searchResultsFormated;\n    }\n  },\n};\n\nexport default FetchDataService;\n","import { makeObservable, observable, action } from \"mobx\";\nimport idbSymbolDataStore from \"./idbSymbolDataStore\";\nimport configStore from \"./ConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport FetchDataService from \"../services/FetchDataService\";\nclass SymbolDataStore {\n  isCalculatingPortfolioPerformance = false;\n  symbolChartTimeseriesDataMap = { Portfolio: [] };\n\n  constructor() {\n    makeObservable(this, {\n      isCalculatingPortfolioPerformance: observable,\n      symbolChartTimeseriesDataMap: observable,\n      setIsCalculatingPortfolioPerformance: action,\n      addSymbolToMap: action,\n      removeSymbolFromMap: action,\n      setTimeseriesForTicker: action,\n    });\n  }\n\n  setIsCalculatingPortfolioPerformance(bool) {\n    this.isCalculatingPortfolioPerformance = bool;\n  }\n\n  async addSymbolToMap(symbolTicker) {\n    console.log(\"addSymbolToMap: \" + symbolTicker);\n    const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n    if (dataForSymbol) {\n      this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n    } else {\n      // Check if api token is set\n      if (configStore.alphaVantage.apiToken) {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker);\n        const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n        if (dataForSymbol) this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n      } else {\n        notificationStore.enqueueSnackbar({\n          message: `Please enter an API key on the Settings Page`,\n          options: {\n            variant: \"error\",\n            autoHideDuration: 2500,\n          },\n          key: notificationStore.keys.API_TOKEN_MISSING,\n        });\n      }\n    }\n  }\n\n  async removeSymbolFromMap(symbolTicker) {\n    delete this.symbolChartTimeseriesDataMap[symbolTicker];\n  }\n\n  async getSymbolTimeseriesDataFromMap(symbolTicker) {\n    console.log(\"getSymbolTimeseriesDataFromMap: \" + symbolTicker);\n    if (this.symbolChartTimeseriesDataMap[symbolTicker]) return this.symbolChartTimeseriesDataMap[symbolTicker];\n    else {\n      if (symbolTicker === \"Portfolio\") {\n        return;\n      } else {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker);\n        const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n        if (dataForSymbol) this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n        return dataForSymbol;\n      }\n    }\n  }\n\n  async setTimeseriesForTicker(symbolTicker, timeseries) {\n    console.log(\"setTimeseriesForTicker: \" + symbolTicker);\n    this.symbolChartTimeseriesDataMap[symbolTicker] = timeseries;\n  }\n\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    return await idbSymbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n  }\n\n  async getMetaDataForSymbol(symbolTicker) {\n    const data = await idbSymbolDataStore.get(symbolTicker);\n    return data.meta_data;\n  }\n}\n\nconst symbolDataStore = new SymbolDataStore();\nexport default symbolDataStore;\n","import { makeObservable, observable, action, computed, autorun } from \"mobx\";\nimport moment from \"moment\";\nimport symbolDataStore from \"./SymbolDataStore\";\nclass DataStore {\n  symbols = [\n    {\n      symbolTicker: \"Portfolio\",\n      name: \"Portfolio\",\n      isVisible: true,\n      value: 0,\n      currency: \"USD\",\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      color: this.nextAvailableColorValue(),\n      endValue: 0,\n      dateFetched: \"-\",\n    },\n  ];\n  pendingRequests = 0;\n  appleData = [];\n  portfolioStartingDate = \"\";\n  triggerRecalculatePortfolio = false;\n  triggerRecalculatePortfolioTimeout = null;\n  triggerRerenderVisibleLines = false;\n\n  constructor() {\n    makeObservable(this, {\n      symbols: observable,\n      triggerRecalculatePortfolio: observable,\n      triggerRerenderVisibleLines: observable,\n      portfolioStartingDate: observable,\n      toggleSymbolVisibility: action,\n      addSymbol: action,\n      removeSelectedSymbol: action,\n      setValueForTicker: action,\n      setPerformanceSincePortfolioStartForTicker: action,\n      setYearlyPerformanceSincePortfolioStartForTicker: action,\n      setEndValueForTicker: action,\n      setTriggerRecalculatePortfolio: action,\n      setTriggerRerenderVisibleLines: action,\n      setTotalDividendPayoutForTicker: action,\n      setSharpRatioForTicker: action,\n      setPortfolioStartingDate: action,\n      totalValueOfSymbols: computed,\n      listOfSymbolTickers: computed,\n    });\n\n    this.portfolioStartingDate = moment().subtract(1, \"years\").format(\"YYYY-MM-DD\");\n\n    autorun(() => {\n      // triggerRecalculatePortfolio\n      const trigger = this.portfolioStartingDate;\n      const trigger2 = this.totalValueOfSymbols;\n\n      // Debounce\n      const debouncePortfolioRecalculation = () => {\n        this.setTriggerRecalculatePortfolio(true);\n        console.log(\n          \"Autorun: triggering portfolio rercalculation\" + JSON.stringify(trigger) + JSON.stringify(trigger2)\n        );\n      };\n\n      //  Check if timeout exists, if so clear and start a new one\n      if (this.triggerRecalculatePortfolioTimeout) clearTimeout(this.triggerRecalculatePortfolioTimeout);\n      const timeout = setTimeout(async () => {\n        debouncePortfolioRecalculation();\n      }, 500);\n      this.triggerRecalculatePortfolioTimeout = timeout;\n    });\n  }\n\n  setTriggerRecalculatePortfolio(bool) {\n    this.triggerRecalculatePortfolio = bool;\n  }\n\n  setTriggerRerenderVisibleLines(bool) {\n    this.triggerRerenderVisibleLines = bool;\n  }\n\n  async addSymbol(symbolSetSearchResult) {\n    const compareSymbolSets = (a, b) => {\n      if (b.symbolTicker === \"Portfolio\") {\n        return 1;\n      }\n      if (a.symbolTicker < b.symbolTicker) {\n        return -1;\n      }\n      if (a.symbolTicker > b.symbolTicker) {\n        return 1;\n      }\n      return 0;\n    };\n\n    if (!symbolSetSearchResult || !symbolSetSearchResult.symbolTicker) return false;\n    this.symbols.push({\n      symbolTicker: symbolSetSearchResult.symbolTicker,\n      name: symbolSetSearchResult.name,\n      currency: symbolSetSearchResult.currency,\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      isVisible: true,\n      value: 100,\n      endValue: 0,\n      totalDividendPayout: 0,\n      color: this.nextAvailableColorValue(),\n      dateFetched: \"-\",\n    });\n    this.symbols.sort(compareSymbolSets);\n\n    await symbolDataStore.addSymbolToMap(symbolSetSearchResult.symbolTicker);\n    //  Get meta data and store it inside this store\n    const metaData = await symbolDataStore.getMetaDataForSymbol(symbolSetSearchResult.symbolTicker);\n    this.setDateFetchedForTicker(symbolSetSearchResult.symbolTicker, metaData.date_fetched);\n    //  TODO check if this  could be optimized\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  async removeSelectedSymbol(symbolTickerToDelete) {\n    this.removeColorInUse(this.getSymbolSetForTicker(symbolTickerToDelete).color);\n    this.symbols = this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== symbolTickerToDelete);\n\n    await symbolDataStore.removeSymbolFromMap(symbolTickerToDelete);\n\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  toggleSymbolVisibility(changedSymbolbyTicker) {\n    console.log(changedSymbolbyTicker);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolbyTicker) {\n        symbol.isVisible = !symbol.isVisible;\n      }\n    });\n    this.setTriggerRerenderVisibleLines(true);\n  }\n\n  setPortfolioStartingDate(date) {\n    this.portfolioStartingDate = date;\n  }\n\n  get totalValueOfSymbols() {\n    return this.symbols.reduce((pv, symbolSet) => {\n      if (symbolSet.symbolTicker !== \"Portfolio\") return +pv + +symbolSet.value;\n      else return pv;\n    }, 0);\n  }\n\n  async doesSymbolExist(symbolTicker) {\n    let doesExist = false;\n    this.symbols.forEach((symbolSet) => {\n      if (symbolSet.symbolTicker === symbolTicker) {\n        doesExist = true;\n      }\n    });\n    return doesExist;\n  }\n\n  getSymbolSetForTicker(symbolTicker) {\n    return this.symbols.find((symbolSet) => symbolSet.symbolTicker === symbolTicker);\n  }\n\n  getSymbolsWithoutPortfolio() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n  }\n\n  get listOfSymbolTickers() {\n    return this.symbols.map((symbolSet) => symbolSet.symbolTicker);\n  }\n\n  setValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating value: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.value = value;\n      }\n    });\n  }\n\n  setDateFetchedForTicker(changedSymbolByTicker, date) {\n    console.log(\"Updating dateFetched: \" + date);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.dateFetched = date;\n      }\n    });\n  }\n\n  setPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating performanceSincePortfolioStart: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.performanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setYearlyPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setYearlyPerformanceSincePortfolioStartForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.yearlyPerformanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setEndValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setEndValueForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.endValue = value;\n      }\n    });\n  }\n\n  setTotalDividendPayoutForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setTotalDividendPayoutForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.totalDividendPayout = value;\n      }\n    });\n  }\n\n  setSharpRatioForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setSharpRatioForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol[\"sharpRatio\"] = value;\n      }\n    });\n  }\n\n  nextAvailableColorValue() {\n    let availableColorValue = null;\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (!element.isBegingUsed) {\n        availableColorValue = element.colorValue;\n        element.isBegingUsed = true;\n        break;\n      }\n    }\n    return availableColorValue;\n  }\n\n  removeColorInUse(colorValue) {\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (element.colorValue === colorValue) {\n        element.isBegingUsed = false;\n        break;\n      }\n    }\n  }\n}\n\nconst chartColorsForSeries = [\n  { colorValue: \"#3f51b5\", isBegingUsed: false },\n  { colorValue: \"#2196f3\", isBegingUsed: false },\n  { colorValue: \"#03a9f4\", isBegingUsed: false },\n  { colorValue: \"#00bcd4\", isBegingUsed: false },\n  { colorValue: \"#009688\", isBegingUsed: false },\n  { colorValue: \"#4caf50\", isBegingUsed: false },\n  { colorValue: \"#8bc34a\", isBegingUsed: false },\n  { colorValue: \"#cddc39\", isBegingUsed: false },\n  { colorValue: \"#ffeb3b\", isBegingUsed: false },\n  { colorValue: \"#ffc107\", isBegingUsed: false },\n  { colorValue: \"#ff9800\", isBegingUsed: false },\n  { colorValue: \"#ff5722\", isBegingUsed: false },\n  { colorValue: \"#f44336\", isBegingUsed: false },\n  { colorValue: \"#e91e63\", isBegingUsed: false },\n  { colorValue: \"#9c27b0\", isBegingUsed: false },\n  { colorValue: \"#673ab7\", isBegingUsed: false },\n];\n\nconst dataStore = new DataStore();\nexport default dataStore;\n","import React from \"react\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport { observer } from \"mobx-react-lite\";\nimport FetchDataService from \"../services/FetchDataService\";\n\nconst filterOptions = createFilterOptions({\n  matchFrom: \"any\",\n  stringify: (option) => `${option.symbolTicker}-${option.name}`,\n});\n\nconst SearchForSymbolInput = observer(({ dataStore, notificationStore }) => {\n  const [searchOptions, setSearchOptions] = React.useState([]);\n  const [isLoadingSearch, setIsLoadingSearch] = React.useState(false);\n  const [searchTimeout, setSearchTimeout] = React.useState(null);\n  const [value, setValue] = React.useState(searchOptions[0]);\n\n  const handleValueChange = async (keywords) => {\n    const handleSearch = async (keywords) => {\n      setIsLoadingSearch(true);\n      const res = await FetchDataService.searchAlphaVantageByKeywords(keywords);\n      setIsLoadingSearch(false);\n      if (res) setSearchOptions(res);\n    };\n\n    if (searchTimeout) clearTimeout(searchTimeout);\n    if (!keywords) return;\n    const timeout = setTimeout(async () => {\n      await handleSearch(keywords);\n    }, 500);\n    setSearchTimeout(timeout);\n  };\n\n  const handleSearchSelect = async (symbolSearchResult) => {\n    const doesExist = await dataStore.doesSymbolExist(symbolSearchResult.symbolTicker);\n\n    if (doesExist) {\n      notificationStore.enqueueSnackbar({\n        message: `Symbol: ${symbolSearchResult.symbolTicker} already part of portfolio`,\n        options: {\n          variant: \"warning\",\n          autoHideDuration: 2000,\n        },\n        key: `SYMBOL-DUPLICATE-${symbolSearchResult.symbolTicker}`,\n      });\n    } else {\n      dataStore.addSymbol(symbolSearchResult);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      loading={isLoadingSearch}\n      value={value}\n      onChange={(event, symbolSearchResult) => {\n        setValue(\"\");\n        if (symbolSearchResult && symbolSearchResult.symbolTicker) handleSearchSelect(symbolSearchResult);\n      }}\n      options={searchOptions}\n      filterOptions={filterOptions}\n      renderOption={(option) => (\n        <div>\n          <Typography>{option.name}</Typography>\n          <Typography variant=\"caption\">\n            {option.symbolTicker} - {option.region} - {option.currency}\n          </Typography>\n        </div>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Add Asset\"\n          variant=\"outlined\"\n          onChange={(event) => handleValueChange(event.target.value)}\n        />\n      )}\n      style={{ minWidth: \"100px\", paddingRight: \"10px\" }}\n    />\n  );\n});\nexport default SearchForSymbolInput;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Chip, Grid, Menu, MenuItem, ListItemIcon, Typography } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MoneyIcon from \"@material-ui/icons/Money\";\nimport { observer } from \"mobx-react-lite\";\nimport SearchForSymbolInput from \"../components/SearchForSymbolInput\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nconst SelectedSymbolsBar = observer(({ dataStore, notificationStore }) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [menuSelectedSymbolSet, setMenuSelectedSymbolSet] = React.useState(null);\n\n  const toggleVisibility = (symbolTickerToHide) => () => {\n    dataStore.toggleSymbolVisibility(symbolTickerToHide);\n  };\n\n  const handleDelete = (symbolTickerToDelete) => {\n    dataStore.removeSelectedSymbol(symbolTickerToDelete);\n    handleClose();\n  };\n\n  const handleMenuClick = (event, symbolSet) => {\n    setMenuSelectedSymbolSet(symbolSet);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>\n        <MenuItem>\n          <ListItemIcon>\n            <InfoIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap>\n            {menuSelectedSymbolSet ? menuSelectedSymbolSet.symbolTicker : null}\n          </Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <MoneyIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap>\n            {menuSelectedSymbolSet ? menuSelectedSymbolSet.currency : \"-\"}\n          </Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <TodayIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap>\n            {menuSelectedSymbolSet ? menuSelectedSymbolSet.dateFetched : \"-\"}\n          </Typography>\n        </MenuItem>\n        <MenuItem onClick={() => handleDelete(menuSelectedSymbolSet.symbolTicker)}>\n          <ListItemIcon>\n            <DeleteIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap color=\"error\">\n            Remove\n          </Typography>\n        </MenuItem>\n      </Menu>\n\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item xs={8}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            {dataStore.symbols.map((symbolSet) => {\n              return (\n                <Chip\n                  key={symbolSet.symbolTicker}\n                  label={symbolSet.symbolTicker}\n                  onClick={toggleVisibility(symbolSet.symbolTicker)}\n                  onDelete={\n                    symbolSet.symbolTicker !== \"Portfolio\" ? (event) => handleMenuClick(event, symbolSet) : false\n                  }\n                  deleteIcon={<InfoIcon />}\n                  className={classes.chip}\n                  color={symbolSet.isVisible ? \"primary\" : \"default\"}\n                  clickable={true}\n                  style={{ backgroundColor: symbolSet.isVisible ? symbolSet.color : \"#eeeeee\" }}\n                />\n              );\n            })}\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <SearchForSymbolInput dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\nexport default SelectedSymbolsBar;\n","import React from \"react\";\nimport { FormGroup, FormControlLabel, Switch } from \"@material-ui/core\";\n\nexport default function ChartSwitchStyle({ selectedChartStyleType, switchStyle }) {\n  const [state, setState] = React.useState({\n    checkedA: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    switchStyle();\n  };\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n        label={selectedChartStyleType}\n      />\n    </FormGroup>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRecalculatePortfolio = observer(({ dataStore, recalculateAndRenderPortfolio }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRecalculatePortfolio\");\n      if (dataStore.triggerRecalculatePortfolio) recalculateAndRenderPortfolio();\n      dataStore.setTriggerRecalculatePortfolio(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerRecalculatePortfolio;\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerShowVisibleLines = observer(({ dataStore, rerenderVisibleLines }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerShowVisibleLines\");\n      if (dataStore.triggerRerenderVisibleLines) rerenderVisibleLines();\n      dataStore.setTriggerRerenderVisibleLines(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerShowVisibleLines;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport { Paper, LinearProgress } from \"@material-ui/core\";\nimport ChartSwitchStyle from \"./ChartSwitchStyle\";\nimport TriggerRecalculatePortfolio from \"./TriggerRecalculatePortfolio\";\nimport TriggerShowVisibleLines from \"./TriggerShowVisibleLines\";\nimport symbolDataStore from \"../stores/SymbolDataStore\";\n\nexport default class Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedChartStyleType: \"percent\",\n    };\n    this.myRef = React.createRef();\n    this.chart = {};\n    this.lineSeriesObj = {};\n\n    this.recalculateAndRenderPortfolio = this.recalculateAndRenderPortfolio.bind(this);\n    this.rerenderVisibleLines = this.rerenderVisibleLines.bind(this);\n    this.switchStyle = this.switchStyle.bind(this);\n    this.createGraphForSelectedSymbols = this.createGraphForSelectedSymbols.bind(this);\n    this.addLineSeriesData = this.addLineSeriesData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n    if (!this.props.configStore.isRunningSetup) this.createGraphForSelectedSymbols();\n  }\n\n  renderChart() {\n    if (this.myRef.current.firstChild) {\n      this.myRef.current.removeChild(this.myRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(\n      this.myRef.current,\n      this.state.selectedChartStyleType === \"percent\" ? stylePercent : styleAbsolut\n    );\n  }\n\n  async recalculateAndRenderPortfolio() {\n    await symbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n    this.addLineSeriesData(this.props.dataStore.getSymbolSetForTicker(\"Portfolio\"));\n  }\n\n  rerenderVisibleLines() {\n    this.createGraphForSelectedSymbols();\n  }\n\n  switchStyle() {\n    console.log(\"switching style\");\n    if (this.state.selectedChartStyleType === \"absolut\") {\n      this.setState({ selectedChartStyleType: \"percent\" });\n      this.chart.applyOptions(stylePercent);\n    } else if (this.state.selectedChartStyleType === \"percent\") {\n      this.setState({ selectedChartStyleType: \"absolut\" });\n      this.chart.applyOptions(styleAbsolut);\n    }\n  }\n\n  async createGraphForSelectedSymbols() {\n    console.log(\"createGraphForSelectedSymbols\");\n\n    // Remove lines for deleted symbols\n    const tempListOfAllSymbols = this.props.dataStore.listOfSymbolTickers;\n    for (const [symbolTicker, lineSeries] of Object.entries(this.lineSeriesObj)) {\n      // Check if ticker in dataStore symbols, if then remove lineseries\n      if (!tempListOfAllSymbols.includes(symbolTicker)) {\n        this.chart.removeSeries(lineSeries[\"series\"]);\n        delete this.lineSeriesObj[symbolTicker];\n      }\n    }\n\n    this.props.dataStore.symbols.forEach((symbolSet) => {\n      if (symbolSet.isVisible) {\n        this.addLineSeriesData(symbolSet);\n      } else {\n        if (this.lineSeriesObj[symbolSet.symbolTicker] && this.lineSeriesObj[symbolSet.symbolTicker][\"series\"]) {\n          let tempLineSeries = this.lineSeriesObj[symbolSet.symbolTicker][\"series\"];\n          this.chart.removeSeries(tempLineSeries);\n          delete this.lineSeriesObj[symbolSet.symbolTicker];\n        }\n      }\n    });\n  }\n\n  async addLineSeriesData(symbolSet) {\n    console.log(\"addLineSeriesData: \" + symbolSet.symbolTicker);\n\n    // TODO If data not availible then fetch data\n    const dataForSymbol = await symbolDataStore.getSymbolTimeseriesDataFromMap(symbolSet.symbolTicker);\n\n    if (!this.lineSeriesObj[symbolSet.symbolTicker]) {\n      // If lineSeriesObj for ticker does not exist then create new lineSeriesObj\n      let tempLineSeries = this.chart.addLineSeries({\n        color: symbolSet.color,\n      });\n      if (dataForSymbol && dataForSymbol.length !== 0) {\n        tempLineSeries.setData(dataForSymbol);\n      }\n      // Create new lineSeries Object\n      this.lineSeriesObj[symbolSet.symbolTicker] = { series: tempLineSeries, color: symbolSet.color };\n    } else {\n      // If lineSeries exists then only update data, keep color\n      if (dataForSymbol && dataForSymbol.length !== 0)\n        this.lineSeriesObj[symbolSet.symbolTicker][\"series\"].setData(dataForSymbol);\n    }\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\" }}>\n        <ChartSwitchStyle\n          refreshData={this.refreshData}\n          switchStyle={this.switchStyle}\n          selectedChartStyleType={this.state.selectedChartStyleType === \"absolut\" ? \"absolut\" : \"percent\"}\n        />\n        <CalculatingProgress symbolDataStore={this.props.symbolDataStore} />\n        <div ref={this.myRef} id=\"chart-ref\"></div>\n        <TriggerRecalculatePortfolio\n          dataStore={this.props.dataStore}\n          recalculateAndRenderPortfolio={this.recalculateAndRenderPortfolio}\n        />\n        <TriggerShowVisibleLines dataStore={this.props.dataStore} rerenderVisibleLines={this.rerenderVisibleLines} />\n      </Paper>\n    );\n  }\n}\n\nconst CalculatingProgress = observer(({ symbolDataStore }) => (\n  <div>{symbolDataStore.isCalculatingPortfolioPerformance ? <LinearProgress /> : null}</div>\n));\n\nconst styleAbsolut = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Percentage,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\n\nconst useStyles = makeStyles({});\n\nconst PortfolioBuilder = observer(({ dataStore }) => {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>No.</TableCell>\n            <TableCell>Symbol</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell id=\"annualized\" align=\"right\">\n              Annualized Performance\n            </TableCell>\n            <TableCell id=\"performance\" align=\"right\">\n              Performance since start\n            </TableCell>\n            <TableCell align=\"right\" style={{ maxWidth: \"80px\" }}>\n              Value\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataStore.symbols.map((symbolSet, index) => {\n            return (\n              <TableRow key={symbolSet.symbolTicker}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {index !== 0 ? index + \".\" : null}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  {symbolSet.symbolTicker}\n                </TableCell>\n                <TableCell align=\"left\">{symbolSet.name}</TableCell>\n                <TableCell align=\"right\">\n                  {performanceToPercent(symbolSet.yearlyPerformanceSincePortfolioStart)}\n                </TableCell>\n                <TableCell align=\"right\">{performanceToPercent(symbolSet.performanceSincePortfolioStart)}</TableCell>\n                <TableCell align=\"right\">\n                  {symbolSet.symbolTicker === \"Portfolio\" ? (\n                    <Typography noWrap>End: ${symbolSet.endValue.toFixed(2)}</Typography>\n                  ) : (\n                    <input\n                      type=\"text\"\n                      value={symbolSet.value}\n                      onChange={(event) => dataStore.setValueForTicker(symbolSet.symbolTicker, event.target.value)}\n                      style={{ maxWidth: \"60px\" }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell align=\"right\">\n            <Typography noWrap>Total: ${dataStore.totalValueOfSymbols}</Typography>\n          </TableCell>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(2) + \"%\";\n}\n\nexport default PortfolioBuilder;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Paper, Typography, CircularProgress } from \"@material-ui/core\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\nconst KeyMetricCard = ({ titel, description, value = 0, showPercent = false }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid container item direction=\"column\" justify=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n              {titel}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h3\" component=\"h2\">\n              {value ? showPercent ? performanceToPercent(value) : value.toFixed(2) : <CircularProgress />}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"caption\" component=\"p\">\n              {description}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(0) + \"%\";\n}\n\nexport default KeyMetricCard;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport KeyMetricCard from \"./KeyMetricCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: 0,\n    margin: 0,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\nconst KeyIndicatorRow = observer(({ dataStore, keyMetricsStore }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3} justify=\"space-evenly\" alignItems=\"center\">\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Peformance\"}\n            description={\"Portfolio performance since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").performanceSincePortfolioStart}\n            showPercent={true}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Annualized\"}\n            description={\"Annualized portfolio performance since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").yearlyPerformanceSincePortfolioStart}\n            showPercent={true}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Dividend\"}\n            description={\"Dividends payed out since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").totalDividendPayout}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Sharp Ratio\"}\n            description={\"Calculated based on set risk free rate\"}\n            value={keyMetricsStore.portfolioSharpRatio}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nexport default KeyIndicatorRow;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst DatePicker = observer(({ dataStore }) => {\n  const handleDateChange = (date) => {\n    dataStore.setPortfolioStartingDate(date.format(\"YYYY-MM-DD\"));\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy-MM-DD\"\n        margin=\"normal\"\n        id=\"date-picker-starting-datet\"\n        label=\"Starting date\"\n        value={dataStore.portfolioStartingDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n});\n\nexport default DatePicker;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Typography, Slider, Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport DatePicker from \"./DatePicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(2),\n  },\n  gridItem: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst marks = [\n  {\n    value: -1.5,\n    label: \"-1.5%\",\n  },\n  {\n    value: 0,\n    label: \"0%\",\n  },\n  {\n    value: 1,\n    label: \"1%\",\n  },\n  {\n    value: 5,\n    label: \"5%\",\n  },\n  {\n    value: 10,\n    label: \"10%\",\n  },\n];\n\nfunction valuetext(value) {\n  return `${value}%`;\n}\n\nconst ChartConfigurationCard = observer(({ configStore, dataStore }) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root} elevation={1}>\n      <Typography variant=\"h4\" gutterBottom>\n        Configurations\n      </Typography>\n      <Grid container spacing={3} xs={12} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <DatePicker dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <Typography id=\"discrete-slider-custom\" gutterBottom>\n            Risk Free Rate: {JSON.stringify(configStore.riskFreeRate)}%\n          </Typography>\n          <Slider\n            defaultValue={configStore.riskFreeRate}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"discrete-slider-custom\"\n            min={-1.5}\n            max={10}\n            step={0.1}\n            valueLabelDisplay=\"auto\"\n            marks={marks}\n            onChangeCommitted={(e, val) => configStore.setRiskFreeRate(val)}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\n\nexport default ChartConfigurationCard;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport SelectedSymbolsBar from \"../components/SelectedSymbolsBar\";\nimport Chart from \"../components/Chart\";\nimport PortfolioBuilder from \"../components/PortfolioBuilder\";\nimport KeyMetricRow from \"../components/KeyMetricRow\";\nimport ChartConfigurationCard from \"../components/ChartConfigurationCard\";\n\nconst ChartingPage = ({ dataStore, notificationStore, configStore, symbolDataStore, keyMetricsStore }) => {\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12} spacing={3}>\n          <SelectedSymbolsBar dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <KeyMetricRow dataStore={dataStore} keyMetricsStore={keyMetricsStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <Chart dataStore={dataStore} configStore={configStore} symbolDataStore={symbolDataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <PortfolioBuilder dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <ChartConfigurationCard configStore={configStore} dataStore={dataStore} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ChartingPage;\n","import React from \"react\";\nimport { Paper, Typography, TextField, Link } from \"@material-ui/core\";\n\nconst SettingsPage = ({ configStore }) => {\n  return (\n    <div>\n      <Paper elevation={1} style={{ padding: \"20px\" }}>\n        <Typography variant=\"h1\" gutterBottom>\n          Settings\n        </Typography>\n\n        <Typography variant=\"h6\" gutterBottom>\n          Alpha Vantag API Token\n        </Typography>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"API-Token\"\n          variant=\"outlined\"\n          defaultValue={configStore.alphaVantage.apiToken}\n          onChange={(e) => configStore.setAlphaVantageAPITokenIDB(e.target.value)}\n        />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          Get your free token here:{\" \"}\n          <Link href=\"https://www.alphavantage.co/support/#api-key\" target=\"_blank\" rel=\"noreferrer\">\n            Alpha Vantage\n          </Link>{\" \"}\n          (Hint: try a random key)\n        </Typography>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","import { Component } from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { inject, observer } from \"mobx-react\";\nimport { autorun } from \"mobx\";\n\nclass Notifier extends Component {\n  displayed = [];\n\n  storeDisplayed = (id) => {\n    this.displayed = [...this.displayed, id];\n  };\n\n  removeDisplayedNotificationByKey(removeKey) {\n    this.displayed = this.displayed.filter((key) => removeKey !== key);\n  }\n\n  componentDidMount() {\n    autorun(() => {\n      const { notifications = [] } = this.props.notificationStore;\n\n      notifications.forEach((notification) => {\n        // Do nothing if snackbar is already displayed\n        if (this.displayed.includes(notification.key)) return;\n        // Display snackbar using notistack\n        this.props.enqueueSnackbar(notification.message, notification.options);\n        // Keep track of snackbars that we've displayed\n        this.storeDisplayed(notification.key);\n        // Dispatch action to remove snackbar from mobx store\n        this.props.notificationStore.removeSnackbar(notification.key);\n\n        // Calculate delay to remove notification from this.displayed\n        let delayUntilRemoveMs = 0;\n        if (notification.options && notification.options.autoHideDuration) {\n          delayUntilRemoveMs = notification.options.autoHideDuration + 100;\n        } else {\n          delayUntilRemoveMs = 2100;\n        }\n        // Remove notifaction from this.disyplayed after dealy\n        setTimeout(\n          function () {\n            this.removeDisplayedNotificationByKey(notification.key);\n          }.bind(this),\n          delayUntilRemoveMs\n        );\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withSnackbar(inject(\"notificationStore\")(observer(Notifier)));\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n// Content\nimport dataStore from \"./stores/DataStore\";\nimport notificationStore from \"./stores/NotificationStore\";\nimport configStore from \"./stores/ConfigStore\";\nimport symbolDataStore from \"./stores/SymbolDataStore\";\nimport ChartingPage from \"./pages/ChartingPage\";\nimport SettingsPage from \"./pages/SettingsPage\";\nimport keyMetricsStore from \"./stores/KeyMetricsStore\";\nimport Notifier from \"./components/Notifier\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [pages, setPages] = React.useState({ chartingPage: { showPage: true }, settingsPage: { showPage: false } });\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handlePageSelect = (pageToShow) => {\n    const tempPages = {};\n    for (const [page] of Object.entries(pages)) {\n      if (page === pageToShow) tempPages[page] = { showPage: true };\n      else tempPages[page] = { showPage: false };\n    }\n    setPages(tempPages);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Notifier notificationStore={notificationStore} />\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Historic-Portfolio-Analyzer (alpha)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key={\"charting-page\"} onClick={() => handlePageSelect(\"chartingPage\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Chart\"} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key={\"serttings-page\"} onClick={() => handlePageSelect(\"settingsPage\")}>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Settings\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {pages.chartingPage.showPage ? (\n          <ChartingPage\n            dataStore={dataStore}\n            notificationStore={notificationStore}\n            configStore={configStore}\n            symbolDataStore={symbolDataStore}\n            keyMetricsStore={keyMetricsStore}\n          />\n        ) : null}\n        {pages.settingsPage.showPage ? <SettingsPage configStore={configStore} /> : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Provider } from 'mobx-react';\nimport notificationStore from \"./stores/NotificationStore\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider notificationStore={notificationStore}>\n    <SnackbarProvider maxSnack={10}>\n      <App />\n    </SnackbarProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}