{"version":3,"sources":["stores/dbPromise.js","stores/idbConfigStore.js","stores/NotificationStore.js","stores/SymbolDataStore.js","stores/ConfigStore.js","services/KeyMetricsService.js","stores/idbPortfolioStore.js","stores/idbSymbolDataStore.js","services/FetchDataService.js","stores/DataStore.js","components/SearchForSymbolInput.js","components/SelectedSymbolsBar.js","components/ChartSwitchStyle.js","components/TriggerRecalculatePortfolio.js","components/TriggerShowVisibleLines.js","components/Chart.js","components/PortfolioBuilder.js","components/KeyMetricCard.js","components/KeyMetricRow.js","components/DatePicker.js","components/ChartConfigurationCard.js","pages/ChartingPage.js","pages/SettingsPage.js","components/Notifier.js","App.js","reportWebVitals.js","index.js"],"names":["window","console","log","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","idbConfigStore","get","key","set","val","put","delete","clear","keys","getAllKeys","notificationStore","extendObservable","this","notifications","API_TOKEN_MISSING","PORTFOLIO_CALCULATING","API_TOKEN_STORED","enqueueSnackbar","action","note","push","Date","getTime","Math","random","removeSnackbar","filter","notification","symbolDataStore","isCalculatingPortfolioPerformance","makeObservable","observable","setIsCalculatingPortfolioPerformance","bool","idbSymbolDataStore","calculateAndStoreHistoricPortfolioPerformance","symbolTicker","getDataChartFormatBySymbol","fakeToken","length","result","characters","charactersLength","i","charAt","floor","configStore","alphaVantage","url","apiToken","isRunningSetup","alphaVantageConstants","SYMBOL_SEARCH","TIME_SERIES_DAILY_ADJUSTED","riskFreeRate","startSetup","setAlphaVantageAPITokenHelper","setIsRunningSetup","setRiskFreeRate","autorun","trigger","JSON","stringify","token","setAlphaVantageAPITokenIDB","dataStore","addSymbol","name","region","currency","newToken","message","options","variant","autoHideDuration","newRate","KeyMetricsService","calculateAndStoreSharpRatio","portfolioDataset","annualizedPerformanceSinceStartPortfolio","dataSet","map","entry","value","standardDeviation","std","sharpRatio","setSharpRatioForTicker","idbPortfolioStore","doesDataSeriesExist","getAdjustedCloseByTickerAndDate","date","data","then","symbolData","a","formateDataToChartFormat","FetchDataService","fetchDataDailyAdjustedForSymbolAlphaVantage","doesTimesSeriesDailyAdjustedExistForSymbol","getTimeSeriesDailyByTicker","symbolQuantityMap","startingDate","moment","portfolioStartingDate","endDate","daysSinceStart","diff","Promise","all","getSymbolsWithoutPortfolio","symbolSet","format","startingDatePriceValue","add","endDatePriceValue","subtract","performanceSinceStart","parseFloat","setPerformanceSincePortfolioStartForTicker","yearlyPerformanceSinceStart","setYearlyPerformanceSincePortfolioStartForTicker","startingDateValueOfThisSymbol","getSymbolSetForTicker","quantity","endValue","setEndValueForTicker","datesToCheck","isBefore","tempSymbolDatasetMap","tempDataSet","sumOfDividends","forEach","tempSumForDate","Object","entries","dataset","dividend","time","res","endDatePriceValuePortfolio","startingDatePriceValuePortfolio","performanceSinceStartPortfolio","yearlyPerformanceSinceStartPortfolio","setTotalDividendPayoutForTicker","temp","dailyInformation","String","reverse","axios","params","function","symbol","outputsize","apikey","searchAlphaVantageByKeywords","keywords","matches","searchResultsFormated","DataStore","symbols","isVisible","performanceSincePortfolioStart","yearlyPerformanceSincePortfolioStart","color","nextAvailableColorValue","pendingRequests","appleData","triggerRecalculatePortfolio","triggerRerenderVisibleLines","toggleSymbolVisibility","removeSelectedSymbol","setValueForTicker","setTriggerRecalculatePortfolio","setTriggerRerenderVisibleLines","setPortfolioStartingDate","totalValueOfSymbols","computed","listOfSymbolTickers","trigger2","symbolSetSearchResult","compareSymbolSets","b","totalDividendPayout","sort","symbolTickerToDelete","removeColorInUse","changedSymbolbyTicker","doesExist","find","changedSymbolByTicker","availableColorValue","index","chartColorsForSeries","element","isBegingUsed","colorValue","reduce","pv","filterOptions","createFilterOptions","matchFrom","option","SearchForSymbolInput","observer","React","useState","searchOptions","setSearchOptions","isLoadingSearch","setIsLoadingSearch","searchTimeout","setSearchTimeout","setValue","handleValueChange","handleSearch","clearTimeout","timeout","setTimeout","handleSearchSelect","symbolSearchResult","doesSymbolExist","Autocomplete","id","loading","onChange","event","renderOption","Typography","renderInput","TextField","label","target","style","minWidth","paddingRight","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","SelectedSymbolsBar","classes","Paper","className","Grid","container","alignItems","item","xs","direction","justify","Chip","onClick","symbolTickerToHide","onDelete","clickable","backgroundColor","ChartSwitchStyle","selectedChartStyleType","switchStyle","checkedA","state","setState","FormGroup","row","FormControlLabel","control","Switch","checked","TriggerRecalculatePortfolio","recalculateAndRenderPortfolio","useEffect","TriggerShowVisibleLines","rerenderVisibleLines","Chart","props","myRef","createRef","chart","lineSeriesObj","bind","createGraphForSelectedSymbols","addLineSeriesData","renderChart","current","firstChild","removeChild","createChart","stylePercent","styleAbsolut","applyOptions","tempListOfAllSymbols","lineSeries","includes","removeSeries","tempLineSeries","dataForSymbol","setData","addLineSeries","series","refreshData","CalculatingProgress","ref","Component","LinearProgress","height","rightPriceScale","scaleMargins","top","bottom","mode","PriceScaleMode","Normal","borderColor","Percentage","performanceToPercent","performance","toFixed","PortfolioBuilder","TableContainer","component","Table","table","aria-label","size","TableHead","TableRow","TableCell","align","maxWidth","TableBody","scope","noWrap","type","flexGrow","paper","textAlign","palette","text","secondary","width","title","fontSize","KeyMetricCard","titel","description","showPercent","gutterBottom","KeyIndicatorRow","DatePicker","utils","MomentUtils","disableToolbar","KeyboardButtonProps","gridItem","marks","valuetext","ChartConfigurationCard","elevation","Slider","defaultValue","getAriaValueText","aria-labelledby","min","max","step","valueLabelDisplay","onChangeCommitted","e","ChartingPage","KeyMetricRow","SettingsPage","Link","href","rel","Notifier","displayed","storeDisplayed","removeKey","delayUntilRemoveMs","removeDisplayedNotificationByKey","withSnackbar","inject","drawerWidth","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","App","useTheme","open","setOpen","chartingPage","showPage","settingsPage","pages","setPages","handlePageSelect","pageToShow","tempPages","page","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","edge","Drawer","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.6778d95e.chunk.js","sourcesContent":["import { openDB } from \"idb\";\n\nif (!(\"indexedDB\" in window)) {\n  console.log(\"This browser doesn't support IndexedDB\");\n}\n\nconst dbPromise = openDB(\"historic-portfolio-analyzer\", 1, {\n  upgrade(db) {\n    if (!db.objectStoreNames.contains(\"symbolDataStore\")) {\n      console.log(\"Creating new symbolDataStore\");\n      db.createObjectStore(\"symbolDataStore\", {\n        keyPath: \"symbol\",\n        autoIncrement: false,\n      });\n    }\n    if (!db.objectStoreNames.contains(\"portfolioStore\")) {\n      console.log(\"Creating new portfolioStore\");\n      db.createObjectStore(\"portfolioStore\");\n    }\n    if (!db.objectStoreNames.contains(\"configStore\")) {\n      console.log(\"Creating new configStore\");\n      db.createObjectStore(\"configStore\");\n    }\n  },\n});\n\nexport default dbPromise;\n","import dbPromise from \"./dbPromise\";\n\nconst idbConfigStore = {\n  async get(key) {\n    return (await dbPromise).get(\"configStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"configStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"configStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"configStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"configStore\");\n  },\n};\n\nexport default idbConfigStore;\n","import { action, extendObservable } from \"mobx\";\n\nconst NotificationStore = function () {\n  extendObservable(this, {\n    notifications: [],\n    keys: {\n      API_TOKEN_MISSING: \"API_TOKEN_MISSING\",\n      PORTFOLIO_CALCULATING: \"PORTFOLIO_CALCULATING\",\n      API_TOKEN_STORED: \"API_TOKEN_STORED\",\n    },\n\n    enqueueSnackbar: action((note) => {\n      this.notifications.push({\n        key: note.key ? note.key : new Date().getTime() + Math.random(),\n        ...note,\n      });\n    }),\n\n    removeSnackbar: action((key) => {\n      this.notifications = this.notifications.filter((notification) => notification.key !== key);\n    }),\n  });\n};\n\nconst notificationStore = new NotificationStore();\nexport default notificationStore;\n","import { makeObservable, observable, action } from \"mobx\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\n\nclass SymbolDataStore {\n  isCalculatingPortfolioPerformance = false;\n\n  constructor() {\n    makeObservable(this, {\n      isCalculatingPortfolioPerformance: observable,\n      setIsCalculatingPortfolioPerformance: action,\n    });\n  }\n\n  setIsCalculatingPortfolioPerformance(bool) {\n    this.isCalculatingPortfolioPerformance = bool;\n  }\n\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    return await idbSymbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n  }\n\n  async getDataChartFormatBySymbol(symbolTicker) {\n    return await idbSymbolDataStore.getDataChartFormatBySymbol(symbolTicker);\n  }\n}\n\nconst symbolDataStore = new SymbolDataStore();\nexport default symbolDataStore;\n","import { makeObservable, observable, action, autorun } from \"mobx\";\nimport idbConfigStore from \"./idbConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport dataStore from \"./DataStore\";\nimport symbolDataStore from \"./SymbolDataStore\";\n\nclass ConfigStore {\n  alphaVantage = { url: \"https://www.alphavantage.co/query\", apiToken: \"\" };\n  isRunningSetup = true;\n  alphaVantageConstants = { SYMBOL_SEARCH: \"SYMBOL_SEARCH\", TIME_SERIES_DAILY_ADJUSTED: \"TIME_SERIES_DAILY_ADJUSTED\" };\n  riskFreeRate = 1;\n\n  constructor() {\n    this.startSetup();\n\n    makeObservable(this, {\n      alphaVantage: observable,\n      isRunningSetup: observable,\n      riskFreeRate: observable,\n      setAlphaVantageAPITokenHelper: action,\n      setIsRunningSetup: action,\n      setRiskFreeRate: action,\n    });\n\n    autorun(() => {\n      const trigger = this.riskFreeRate;\n\n      if (!this.isRunningSetup) symbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n      console.log(\"Autorun: triggering sharp ratio rercalculation: \" + JSON.stringify(trigger));\n    });\n  }\n\n  async startSetup() {\n    console.log(\"startSetup\");\n    // Load stored API token from idbConfigStore or create a Token\n    const token = await idbConfigStore.get(\"alphaVantagAPIToken\");\n    if (token) this.setAlphaVantageAPITokenHelper(token);\n    else {\n      await this.setAlphaVantageAPITokenIDB(fakeToken(16));\n    }\n\n    // Add default symbols\n    // If no deafult symbols added then dataStore trigger have to be called manually\n    dataStore.addSymbol({ symbolTicker: \"AAPL\", name: \"Apple Inc.\", region: \"testRegion\", currency: \"USD\" });\n\n    this.setIsRunningSetup(false);\n  }\n\n  setIsRunningSetup(bool) {\n    this.isRunningSetup = bool;\n  }\n\n  // Store new alphaVantagAPIToken to idbConfigStore then store in mobx store\n  async setAlphaVantageAPITokenIDB(newToken) {\n    await idbConfigStore.set(\"alphaVantagAPIToken\", newToken);\n    notificationStore.enqueueSnackbar({\n      message: `Stored new API-Token${this.alphaVantage.apiToken}`,\n      options: {\n        variant: \"success\",\n        autoHideDuration: 1000,\n      },\n      key: notificationStore.keys.API_TOKEN_STORED,\n    });\n    this.setAlphaVantageAPITokenHelper(newToken);\n  }\n\n  setAlphaVantageAPITokenHelper(newToken) {\n    console.log(\"setAlphaVantageAPITokenHelper: \" + newToken);\n    this.alphaVantage.apiToken = newToken;\n  }\n  setRiskFreeRate(newRate) {\n    console.log(\"setRiskFreeRate: \" + newRate);\n    this.riskFreeRate = newRate;\n  }\n}\n\nfunction fakeToken(length) {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst configStore = new ConfigStore();\nexport default configStore;\n","import { std } from \"mathjs\";\nimport dataStore from \"../stores/DataStore\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst KeyMetricsService = {\n  async calculateAndStoreSharpRatio(portfolioDataset, annualizedPerformanceSinceStartPortfolio) {\n    const dataSet = portfolioDataset.map((entry) => entry.value);\n    const standardDeviation = std(dataSet);\n\n    const riskFreeRate = configStore.riskFreeRate;\n    const sharpRatio = (annualizedPerformanceSinceStartPortfolio * 100 - riskFreeRate) / standardDeviation;\n\n    dataStore.setSharpRatioForTicker(\"Portfolio\", sharpRatio);\n  },\n};\nexport default KeyMetricsService;\n","import dbPromise from \"./dbPromise\";\n\nconst idbPortfolioStore = {\n  async get(key) {\n    return (await dbPromise).get(\"portfolioStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"portfolioStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"portfolioStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"portfolioStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"portfolioStore\");\n  },\n  async doesDataSeriesExist() {\n    const data = await this.get(\"dataSeries\");\n    if (data) return true;\n    else return false;\n  },\n};\n\nexport default idbPortfolioStore;\n","import dbPromise from \"./dbPromise\";\nimport dataStore from \"./DataStore\";\nimport moment from \"moment\";\nimport FetchDataService from \"../services/FetchDataService\";\nimport KeyMetricsService from \"../services/KeyMetricsService\";\nimport idbPortfolioStore from \"./idbPortfolioStore\";\nimport notificationStore from \"./NotificationStore\";\nimport configStore from \"./ConfigStore\";\nimport symbolDataStore from \"./SymbolDataStore\";\n\nconst idbSymbolDataStore = {\n  async get(key) {\n    return (await dbPromise).get(\"symbolDataStore\", key);\n  },\n  async set(val) {\n    return (await dbPromise).put(\"symbolDataStore\", val);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"symbolDataStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"symbolDataStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"symbolDataStore\");\n  },\n  async getAdjustedCloseByTickerAndDate(key, date) {\n    const data = await this.get(key);\n    if (data && \"Time Series (Daily)\" in data) {\n      if (data[\"Time Series (Daily)\"][date]) return data[\"Time Series (Daily)\"][date][\"5. adjusted close\"];\n    }\n    return false;\n  },\n  async getDataChartFormatBySymbol(key) {\n    console.log(\"getDataChartFormatBySymbol: \" + key);\n    // TODO ensure consistent order old -> new\n    if (key === \"Portfolio\") {\n      const doesPortfolioDataExist = await idbPortfolioStore.doesDataSeriesExist();\n      if (doesPortfolioDataExist) {\n        return idbPortfolioStore.get(\"dataSeries\");\n      } else {\n        return this.calculateAndStoreHistoricPortfolioPerformance();\n      }\n    } else {\n      return (await dbPromise).get(\"symbolDataStore\", key).then(async (symbolData) => {\n        // Check doesTimesSeriesDailyAdjustedExistForSymbol else fetch data\n        if (symbolData && \"Time Series (Daily)\" in symbolData && symbolData[\"Time Series (Daily)\"]) {\n          return formateDataToChartFormat(symbolData);\n        } else {\n          // Check if api token exist\n          if (configStore.alphaVantage.apiToken) {\n            const wasDataFetched = await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(key);\n            if (wasDataFetched) return this.getDataChartFormatBySymbol(key);\n          } else {\n            notificationStore.enqueueSnackbar({\n              message: `Please enter an API key on the Settings Page`,\n              options: {\n                variant: \"error\",\n                autoHideDuration: 2500,\n              },\n              key: notificationStore.keys.API_TOKEN_MISSING,\n            });\n          }\n        }\n      });\n    }\n  },\n  async doesTimesSeriesDailyAdjustedExistForSymbol(key) {\n    const data = await this.get(key);\n    if (data && \"Time Series (Daily)\" in data && data[\"Time Series (Daily)\"]) return true;\n    return false;\n  },\n  async getTimeSeriesDailyByTicker(symbolTicker) {\n    const data = await this.get(symbolTicker);\n    return data[\"Time Series (Daily)\"];\n  },\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    console.log(\"calculateAndStoreHistoricPortfolioPerformance\");\n    notificationStore.enqueueSnackbar({\n      message: `Calculating Portfolio value`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 2000,\n      },\n      key: notificationStore.keys.PORTFOLIO_CALCULATING,\n    });\n    symbolDataStore.setIsCalculatingPortfolioPerformance(true);\n\n    //  Calculate for each asset the quantity at portfolio start and the performance since\n    console.log(\"Portfolio - calculating quantity\");\n    let symbolQuantityMap = {};\n    let startingDate = moment(dataStore.portfolioStartingDate);\n    let endDate = moment();\n    const daysSinceStart = endDate.diff(startingDate, \"days\") + 1;\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        // Get price of asset for the portfolio starting date\n        let startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          startingDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!startingDatePriceValue) {\n          startingDate.add(1, \"days\");\n          startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            startingDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Get price of asset for the portfolio end date\n        let endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          endDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!endDatePriceValue) {\n          endDate.subtract(1, \"days\");\n          endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            endDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Calculate performanceSinceStart for this symbol and store the value\n        const performanceSinceStart = parseFloat(endDatePriceValue) / parseFloat(startingDatePriceValue) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, performanceSinceStart);\n        // Calculate yearlyPerformanceSinceStart for this symbol and store the value\n        const yearlyPerformanceSinceStart = performanceSinceStart * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, yearlyPerformanceSinceStart);\n\n        // Calculate quantity for this symbol\n        const startingDateValueOfThisSymbol = dataStore.getSymbolSetForTicker(symbolSet.symbolTicker)[\"value\"];\n        const quantity = parseFloat(startingDateValueOfThisSymbol) / parseFloat(startingDatePriceValue);\n\n        symbolQuantityMap[symbolSet.symbolTicker] = quantity;\n\n        const endValue = endDatePriceValue * quantity;\n        dataStore.setEndValueForTicker(symbolSet.symbolTicker, endValue);\n      })\n    );\n\n    // Generate a list of all days between dataStore.portfolioStartingDate and today (including both days)\n    console.log(\"Portfolio - list of dates\");\n    let datesToCheck = [];\n    let date = moment(dataStore.portfolioStartingDate);\n    while (date.isBefore()) {\n      datesToCheck.push(date.format(\"YYYY-MM-DD\"));\n      date.add(1, \"days\");\n    }\n\n    // Iterate through all days and calculate the total value\n    console.log(\"Portfolio - calculating for each day\");\n    let tempSymbolDatasetMap = {};\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        let tempDataSet = await idbSymbolDataStore.getTimeSeriesDailyByTicker(symbolSet.symbolTicker);\n        tempSymbolDatasetMap[symbolSet.symbolTicker] = tempDataSet;\n      })\n    );\n\n    let result = [];\n    let sumOfDividends = 0;\n    datesToCheck.forEach((date) => {\n      let tempSumForDate = 0;\n      for (const [symbolTicker, dataset] of Object.entries(tempSymbolDatasetMap)) {\n        if (!(date in dataset)) return;\n        const dividend = dataset[date][\"7. dividend amount\"];\n        sumOfDividends += dividend * symbolQuantityMap[symbolTicker];\n        const stockValue = dataset[date][\"5. adjusted close\"];\n        tempSumForDate += stockValue * symbolQuantityMap[symbolTicker];\n      }\n      if (tempSumForDate) result.push({ time: date, value: tempSumForDate });\n    });\n\n    idbPortfolioStore.set(\"dataSeries\", result).then((res) => {\n      if (result.length !== 0) {\n        const endDatePriceValuePortfolio = result[0].value;\n        const startingDatePriceValuePortfolio = result[result.length - 1].value;\n        // Calculate performanceSinceStart for portfolio and store the value\n        const performanceSinceStartPortfolio =\n          parseFloat(startingDatePriceValuePortfolio) / parseFloat(endDatePriceValuePortfolio) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(\"Portfolio\", performanceSinceStartPortfolio);\n        // Calculate yearlyPerformanceSinceStart for portfolio and store the value\n        const yearlyPerformanceSinceStartPortfolio = performanceSinceStartPortfolio * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(\"Portfolio\", yearlyPerformanceSinceStartPortfolio);\n\n        dataStore.setTotalDividendPayoutForTicker(\"Portfolio\", sumOfDividends);\n        dataStore.setEndValueForTicker(\"Portfolio\", startingDatePriceValuePortfolio);\n\n        // calculate sharp\n        KeyMetricsService.calculateAndStoreSharpRatio(result, yearlyPerformanceSinceStartPortfolio);\n      }\n    });\n\n    symbolDataStore.setIsCalculatingPortfolioPerformance(false);\n    return result;\n  },\n};\n\nconst formateDataToChartFormat = (symbolData) => {\n  let temp = [];\n  for (const [key, dailyInformation] of Object.entries(symbolData[\"Time Series (Daily)\"])) {\n    temp.push({ time: String(key), value: parseFloat(dailyInformation[\"5. adjusted close\"]) });\n  }\n  return temp.reverse();\n};\n\nexport default idbSymbolDataStore;\n","import axios from \"axios\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport notificationStore from \"../stores/NotificationStore\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst FetchDataService = {\n  async fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker) {\n    console.log(\"fetchDataDailyAdjustedForSymbolAlphaVantage\");\n    console.log(`Fetching data for ${symbolTicker}`);\n    notificationStore.enqueueSnackbar({\n      message: `Fetching data for: ${symbolTicker}`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 1500,\n      },\n      key: `FETCHING-${symbolTicker}`,\n    });\n    try {\n      const res = await axios.get(configStore.alphaVantage.url, {\n        params: {\n          function: configStore.alphaVantageConstants.TIME_SERIES_DAILY_ADJUSTED,\n          symbol: symbolTicker,\n          outputsize: \"full\",\n          apikey: configStore.alphaVantage.apiToken,\n        },\n      });\n      if (\"Note\" in res.data) {\n        console.log(\"Failed to fetch for: \" + symbolTicker);\n        notificationStore.enqueueSnackbar({\n          message: `Failed to fetch data for: ${symbolTicker}`,\n          options: {\n            variant: \"warning\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-FAILED-${symbolTicker}`,\n        });\n        return false;\n      } else {\n        res.data[\"symbol\"] = symbolTicker;\n        await idbSymbolDataStore.set(res.data);\n        // TODO check if received data was valid\n        notificationStore.enqueueSnackbar({\n          message: `Successfully fetched data for: ${symbolTicker}`,\n          options: {\n            variant: \"success\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-SUCCESS-${symbolTicker}`,\n        });\n        return symbolTicker;\n      }\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n    }\n  },\n  async searchAlphaVantageByKeywords(keywords) {\n    console.log(\"searchAlphaVantageByKeywords: \" + keywords);\n    const res = await axios.get(configStore.alphaVantage.url, {\n      params: {\n        function: configStore.alphaVantageConstants.SYMBOL_SEARCH,\n        keywords: keywords,\n        apikey: configStore.alphaVantage.apiToken,\n      },\n    });\n    if (\"Note\" in res.data) {\n      console.log(\"Failed to search for:\" + keywords);\n      notificationStore.enqueueSnackbar({\n        message: `Failed to search for: ${keywords}`,\n        options: {\n          variant: \"warning\",\n        },\n      });\n      return false;\n    } else {\n      const matches = res.data[\"bestMatches\"];\n      if (!matches) return [];\n      const searchResultsFormated = matches.map((result) => ({\n        symbolTicker: result[\"1. symbol\"],\n        name: result[\"2. name\"],\n        region: result[\"4. region\"],\n        currency: result[\"8. currency\"],\n      }));\n      return searchResultsFormated;\n    }\n  },\n};\n\nexport default FetchDataService;\n","import { makeObservable, observable, action, computed, autorun } from \"mobx\";\nimport moment from \"moment\";\nimport FetchDataService from \"../services/FetchDataService\";\nimport configStore from \"./ConfigStore\";\nimport idbSymbolDataStore from \"./idbSymbolDataStore\";\nimport notificationStore from \"./NotificationStore\";\nclass DataStore {\n  symbols = [\n    {\n      symbolTicker: \"Portfolio\",\n      name: \"Portfolio\",\n      isVisible: true,\n      value: 0,\n      currency: \"USD\",\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      color: this.nextAvailableColorValue(),\n      endValue: 0,\n    },\n  ];\n  pendingRequests = 0;\n  appleData = [];\n  portfolioStartingDate = \"\";\n  triggerRecalculatePortfolio = false;\n  triggerRerenderVisibleLines = false;\n\n  constructor() {\n    makeObservable(this, {\n      symbols: observable,\n      triggerRecalculatePortfolio: observable,\n      triggerRerenderVisibleLines: observable,\n      portfolioStartingDate: observable,\n      toggleSymbolVisibility: action,\n      addSymbol: action,\n      removeSelectedSymbol: action,\n      setValueForTicker: action,\n      setPerformanceSincePortfolioStartForTicker: action,\n      setYearlyPerformanceSincePortfolioStartForTicker: action,\n      setEndValueForTicker: action,\n      setTriggerRecalculatePortfolio: action,\n      setTriggerRerenderVisibleLines: action,\n      setTotalDividendPayoutForTicker: action,\n      setSharpRatioForTicker: action,\n      setPortfolioStartingDate: action,\n      totalValueOfSymbols: computed,\n      listOfSymbolTickers: computed,\n    });\n\n    this.portfolioStartingDate = moment().subtract(1, \"years\").format(\"YYYY-MM-DD\");\n\n    autorun(() => {\n      const trigger = this.portfolioStartingDate;\n      const trigger2 = this.totalValueOfSymbols;\n\n      this.setTriggerRecalculatePortfolio(true);\n      console.log(\"Autorun: triggering portfolio rercalculation\" + JSON.stringify(trigger) + JSON.stringify(trigger2));\n    });\n  }\n\n  setTriggerRecalculatePortfolio(bool) {\n    this.triggerRecalculatePortfolio = bool;\n  }\n\n  setTriggerRerenderVisibleLines(bool) {\n    this.triggerRerenderVisibleLines = bool;\n  }\n\n  async addSymbol(symbolSetSearchResult) {\n    const compareSymbolSets = (a, b) => {\n      if (b.symbolTicker === \"Portfolio\") {\n        return 1;\n      }\n      if (a.symbolTicker < b.symbolTicker) {\n        return -1;\n      }\n      if (a.symbolTicker > b.symbolTicker) {\n        return 1;\n      }\n      return 0;\n    };\n\n    if (!symbolSetSearchResult || !symbolSetSearchResult.symbolTicker) return false;\n    this.symbols.push({\n      symbolTicker: symbolSetSearchResult.symbolTicker,\n      name: symbolSetSearchResult.name,\n      currency: symbolSetSearchResult.currency,\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      isVisible: true,\n      value: 100,\n      endValue: 0,\n      totalDividendPayout: 0,\n      color: this.nextAvailableColorValue(),\n    });\n    this.symbols.sort(compareSymbolSets);\n    const doesDataAlreadyExists = await idbSymbolDataStore.doesTimesSeriesDailyAdjustedExistForSymbol(\n      symbolSetSearchResult.symbolTicker\n    );\n    if (!doesDataAlreadyExists) {\n      // Check if api token is set\n      if (configStore.alphaVantage.apiToken) {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolSetSearchResult.symbolTicker);\n      } else {\n        notificationStore.enqueueSnackbar({\n          message: `Please enter an API key on the Settings Page`,\n          options: {\n            variant: \"error\",\n            autoHideDuration: 2500,\n          },\n          key: notificationStore.keys.API_TOKEN_MISSING,\n        });\n      }\n    }\n    //  TODO check if this  could be optimized\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  removeSelectedSymbol(symbolTickerToDelete) {\n    this.removeColorInUse(this.getSymbolSetForTicker(symbolTickerToDelete).color);\n    this.symbols = this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== symbolTickerToDelete);\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  toggleSymbolVisibility(changedSymbolbyTicker) {\n    console.log(changedSymbolbyTicker);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolbyTicker) {\n        symbol.isVisible = !symbol.isVisible;\n      }\n    });\n    this.setTriggerRerenderVisibleLines(true);\n  }\n\n  setPortfolioStartingDate(date) {\n    this.portfolioStartingDate = date;\n  }\n\n  get totalValueOfSymbols() {\n    return this.symbols.reduce((pv, symbolSet) => {\n      if (symbolSet.symbolTicker !== \"Portfolio\") return +pv + +symbolSet.value;\n      else return pv;\n    }, 0);\n  }\n\n  async doesSymbolExist(symbolTicker) {\n    let doesExist = false;\n    this.symbols.forEach((symbolSet) => {\n      if (symbolSet.symbolTicker === symbolTicker) {\n        doesExist = true;\n      }\n    });\n    return doesExist;\n  }\n\n  getSymbolSetForTicker(symbolTicker) {\n    return this.symbols.find((symbolSet) => symbolSet.symbolTicker === symbolTicker);\n  }\n\n  getSymbolsWithoutPortfolio() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n  }\n\n  get listOfSymbolTickers() {\n    return this.symbols.map((symbolSet) => symbolSet.symbolTicker);\n  }\n\n  setValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating value: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.value = value;\n      }\n    });\n  }\n\n  setPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating performanceSincePortfolioStart: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.performanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setYearlyPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setYearlyPerformanceSincePortfolioStartForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.yearlyPerformanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setEndValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setEndValueForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.endValue = value;\n      }\n    });\n  }\n\n  setTotalDividendPayoutForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setTotalDividendPayoutForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.totalDividendPayout = value;\n      }\n    });\n  }\n\n  setSharpRatioForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setSharpRatioForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol[\"sharpRatio\"] = value;\n      }\n    });\n  }\n\n  nextAvailableColorValue() {\n    let availableColorValue = null;\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (!element.isBegingUsed) {\n        availableColorValue = element.colorValue;\n        element.isBegingUsed = true;\n        break;\n      }\n    }\n    return availableColorValue;\n  }\n\n  removeColorInUse(colorValue) {\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (element.colorValue === colorValue) {\n        element.isBegingUsed = false;\n        break;\n      }\n    }\n  }\n}\n\nconst chartColorsForSeries = [\n  { colorValue: \"#3f51b5\", isBegingUsed: false },\n  { colorValue: \"#2196f3\", isBegingUsed: false },\n  { colorValue: \"#03a9f4\", isBegingUsed: false },\n  { colorValue: \"#00bcd4\", isBegingUsed: false },\n  { colorValue: \"#009688\", isBegingUsed: false },\n  { colorValue: \"#4caf50\", isBegingUsed: false },\n  { colorValue: \"#8bc34a\", isBegingUsed: false },\n  { colorValue: \"#cddc39\", isBegingUsed: false },\n  { colorValue: \"#ffeb3b\", isBegingUsed: false },\n  { colorValue: \"#ffc107\", isBegingUsed: false },\n  { colorValue: \"#ff9800\", isBegingUsed: false },\n  { colorValue: \"#ff5722\", isBegingUsed: false },\n  { colorValue: \"#f44336\", isBegingUsed: false },\n  { colorValue: \"#e91e63\", isBegingUsed: false },\n  { colorValue: \"#9c27b0\", isBegingUsed: false },\n  { colorValue: \"#673ab7\", isBegingUsed: false },\n];\n\nconst dataStore = new DataStore();\nexport default dataStore;\n","import React from \"react\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport { observer } from \"mobx-react-lite\";\nimport FetchDataService from \"../services/FetchDataService\";\n\nconst filterOptions = createFilterOptions({\n  matchFrom: \"any\",\n  stringify: (option) => `${option.symbolTicker}-${option.name}`,\n});\n\nconst SearchForSymbolInput = observer(({ dataStore, notificationStore }) => {\n  const [searchOptions, setSearchOptions] = React.useState([]);\n  const [isLoadingSearch, setIsLoadingSearch] = React.useState(false);\n  const [searchTimeout, setSearchTimeout] = React.useState(null);\n  const [value, setValue] = React.useState(searchOptions[0]);\n\n  const handleValueChange = async (keywords) => {\n    const handleSearch = async (keywords) => {\n      setIsLoadingSearch(true);\n      const res = await FetchDataService.searchAlphaVantageByKeywords(keywords);\n      setIsLoadingSearch(false);\n      if (res) setSearchOptions(res);\n    };\n\n    if (searchTimeout) clearTimeout(searchTimeout);\n    if (!keywords) return;\n    const timeout = setTimeout(async () => {\n      await handleSearch(keywords);\n    }, 500);\n    setSearchTimeout(timeout);\n  };\n\n  const handleSearchSelect = async (symbolSearchResult) => {\n    const doesExist = await dataStore.doesSymbolExist(symbolSearchResult.symbolTicker);\n\n    if (doesExist) {\n      notificationStore.enqueueSnackbar({\n        message: `Symbol: ${symbolSearchResult.symbolTicker} already part of portfolio`,\n        options: {\n          variant: \"warning\",\n          autoHideDuration: 2000,\n        },\n        key: `SYMBOL-DUPLICATE-${symbolSearchResult.symbolTicker}`,\n      });\n    } else {\n      dataStore.addSymbol(symbolSearchResult);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      loading={isLoadingSearch}\n      value={value}\n      onChange={(event, symbolSearchResult) => {\n        setValue(\"\");\n        if (symbolSearchResult && symbolSearchResult.symbolTicker) handleSearchSelect(symbolSearchResult);\n      }}\n      options={searchOptions}\n      filterOptions={filterOptions}\n      renderOption={(option) => (\n        <div>\n          <Typography>{option.name}</Typography>\n          <Typography variant=\"caption\">\n            {option.symbolTicker} - {option.region} - {option.currency}\n          </Typography>\n        </div>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Add Asset\"\n          variant=\"outlined\"\n          onChange={(event) => handleValueChange(event.target.value)}\n        />\n      )}\n      style={{ minWidth: \"100px\", paddingRight: \"10px\" }}\n    />\n  );\n});\nexport default SearchForSymbolInput;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Chip, Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport SearchForSymbolInput from \"../components/SearchForSymbolInput\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nconst SelectedSymbolsBar = observer(({ dataStore, notificationStore }) => {\n  const classes = useStyles();\n\n  const toggleVisibility = (symbolTickerToHide) => () => {\n    dataStore.toggleSymbolVisibility(symbolTickerToHide);\n  };\n\n  const handleDelete = (symbolTickerToDelete) => {\n    dataStore.removeSelectedSymbol(symbolTickerToDelete);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item xs={8}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            {dataStore.symbols.map((symbolSet) => {\n              return (\n                <Chip\n                  key={symbolSet.symbolTicker}\n                  label={symbolSet.symbolTicker}\n                  onClick={toggleVisibility(symbolSet.symbolTicker)}\n                  onDelete={symbolSet.symbolTicker !== \"Portfolio\" ? () => handleDelete(symbolSet.symbolTicker) : false}\n                  className={classes.chip}\n                  color={symbolSet.isVisible ? \"primary\" : \"default\"}\n                  clickable={true}\n                  style={{ backgroundColor: symbolSet.isVisible ? symbolSet.color : \"#eeeeee\" }}\n                />\n              );\n            })}\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <SearchForSymbolInput dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\nexport default SelectedSymbolsBar;\n","import React from \"react\";\nimport { FormGroup, FormControlLabel, Switch } from \"@material-ui/core\";\n\nexport default function ChartSwitchStyle({ selectedChartStyleType, switchStyle }) {\n  const [state, setState] = React.useState({\n    checkedA: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    switchStyle();\n  };\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n        label={selectedChartStyleType}\n      />\n    </FormGroup>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRecalculatePortfolio = observer(({ dataStore, recalculateAndRenderPortfolio }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRecalculatePortfolio\");\n      if (dataStore.triggerRecalculatePortfolio) recalculateAndRenderPortfolio();\n      dataStore.setTriggerRecalculatePortfolio(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerRecalculatePortfolio;\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerShowVisibleLines = observer(({ dataStore, rerenderVisibleLines }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerShowVisibleLines\");\n      if (dataStore.triggerRerenderVisibleLines) rerenderVisibleLines();\n      dataStore.setTriggerRerenderVisibleLines(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerShowVisibleLines;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport { Paper, LinearProgress } from \"@material-ui/core\";\nimport ChartSwitchStyle from \"./ChartSwitchStyle\";\nimport TriggerRecalculatePortfolio from \"./TriggerRecalculatePortfolio\";\nimport TriggerShowVisibleLines from \"./TriggerShowVisibleLines\";\nimport symbolDataStore from \"../stores/SymbolDataStore\";\n\nexport default class Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedChartStyleType: \"percent\",\n    };\n    this.myRef = React.createRef();\n    this.chart = {};\n    this.lineSeriesObj = {};\n\n    this.recalculateAndRenderPortfolio = this.recalculateAndRenderPortfolio.bind(this);\n    this.rerenderVisibleLines = this.rerenderVisibleLines.bind(this);\n    this.switchStyle = this.switchStyle.bind(this);\n    this.createGraphForSelectedSymbols = this.createGraphForSelectedSymbols.bind(this);\n    this.addLineSeriesData = this.addLineSeriesData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n    if (!this.props.configStore.isRunningSetup) this.createGraphForSelectedSymbols();\n  }\n\n  renderChart() {\n    if (this.myRef.current.firstChild) {\n      this.myRef.current.removeChild(this.myRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(\n      this.myRef.current,\n      this.state.selectedChartStyleType === \"percent\" ? stylePercent : styleAbsolut\n    );\n  }\n\n  async recalculateAndRenderPortfolio() {\n    await symbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n    this.addLineSeriesData(this.props.dataStore.getSymbolSetForTicker(\"Portfolio\"));\n  }\n\n  rerenderVisibleLines() {\n    this.createGraphForSelectedSymbols();\n  }\n\n  switchStyle() {\n    console.log(\"switching style\");\n    if (this.state.selectedChartStyleType === \"absolut\") {\n      this.setState({ selectedChartStyleType: \"percent\" });\n      this.chart.applyOptions(stylePercent);\n    } else if (this.state.selectedChartStyleType === \"percent\") {\n      this.setState({ selectedChartStyleType: \"absolut\" });\n      this.chart.applyOptions(styleAbsolut);\n    }\n  }\n\n  async createGraphForSelectedSymbols() {\n    console.log(\"createGraphForSelectedSymbols\");\n\n    // Remove lines for deleted symbols\n    const tempListOfAllSymbols = this.props.dataStore.listOfSymbolTickers;\n    for (const [symbolTicker, lineSeries] of Object.entries(this.lineSeriesObj)) {\n      // Check if ticker in dataStore symbols, if then remove lineseries\n      if (!tempListOfAllSymbols.includes(symbolTicker)) {\n        this.chart.removeSeries(lineSeries[\"series\"]);\n        delete this.lineSeriesObj[symbolTicker];\n      }\n    }\n\n    this.props.dataStore.symbols.forEach((symbolSet) => {\n      if (symbolSet.isVisible) {\n        this.addLineSeriesData(symbolSet);\n      } else {\n        if (this.lineSeriesObj[symbolSet.symbolTicker] && this.lineSeriesObj[symbolSet.symbolTicker][\"series\"]) {\n          let tempLineSeries = this.lineSeriesObj[symbolSet.symbolTicker][\"series\"];\n          this.chart.removeSeries(tempLineSeries);\n          delete this.lineSeriesObj[symbolSet.symbolTicker];\n        }\n      }\n    });\n  }\n\n  async addLineSeriesData(symbolSet) {\n    console.log(\"addLineSeriesData: \" + symbolSet.symbolTicker);\n\n    // TODO If data not availible then fetch data\n    const dataForSymbol = await symbolDataStore.getDataChartFormatBySymbol(symbolSet.symbolTicker);\n\n    if (!this.lineSeriesObj[symbolSet.symbolTicker]) {\n      // If lineSeriesObj for ticker does not exist then create new lineSeriesObj\n      let tempLineSeries = this.chart.addLineSeries({\n        color: symbolSet.color,\n      });\n      if (dataForSymbol && dataForSymbol.length !== 0) {\n        tempLineSeries.setData(dataForSymbol);\n      }\n      // Create new lineSeries Object\n      this.lineSeriesObj[symbolSet.symbolTicker] = { series: tempLineSeries, color: symbolSet.color };\n    } else {\n      // If lineSeries exists then only update data, keep color\n      if (dataForSymbol && dataForSymbol.length !== 0)\n        this.lineSeriesObj[symbolSet.symbolTicker][\"series\"].setData(dataForSymbol);\n    }\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\" }}>\n        <ChartSwitchStyle\n          refreshData={this.refreshData}\n          switchStyle={this.switchStyle}\n          selectedChartStyleType={this.state.selectedChartStyleType === \"absolut\" ? \"absolut\" : \"percent\"}\n        />\n        <CalculatingProgress symbolDataStore={this.props.symbolDataStore} />\n        <div ref={this.myRef} id=\"chart-ref\"></div>\n        <TriggerRecalculatePortfolio\n          dataStore={this.props.dataStore}\n          recalculateAndRenderPortfolio={this.recalculateAndRenderPortfolio}\n        />\n        <TriggerShowVisibleLines dataStore={this.props.dataStore} rerenderVisibleLines={this.rerenderVisibleLines} />\n      </Paper>\n    );\n  }\n}\n\nconst CalculatingProgress = observer(({ symbolDataStore }) => (\n  <div>{symbolDataStore.isCalculatingPortfolioPerformance ? <LinearProgress /> : null}</div>\n));\n\nconst styleAbsolut = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Percentage,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\n\nconst useStyles = makeStyles({});\n\nconst PortfolioBuilder = observer(({ dataStore }) => {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Symbol</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell id=\"annualized\" align=\"right\">\n              Annualized Performance\n            </TableCell>\n            <TableCell id=\"performance\" align=\"right\">\n              Performance since start\n            </TableCell>\n            <TableCell align=\"right\" style={{ maxWidth: \"80px\" }}>\n              Value\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataStore.symbols.map((symbolSet) => {\n            return (\n              <TableRow key={symbolSet.symbolTicker}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {symbolSet.symbolTicker}\n                </TableCell>\n                <TableCell align=\"left\">{symbolSet.name}</TableCell>\n                <TableCell align=\"right\">\n                  {performanceToPercent(symbolSet.yearlyPerformanceSincePortfolioStart)}\n                </TableCell>\n                <TableCell align=\"right\">{performanceToPercent(symbolSet.performanceSincePortfolioStart)}</TableCell>\n                <TableCell align=\"right\">\n                  {symbolSet.symbolTicker === \"Portfolio\" ? (\n                    <Typography noWrap>End: ${symbolSet.endValue.toFixed(2)}</Typography>\n                  ) : (\n                    <input\n                      type=\"text\"\n                      value={symbolSet.value}\n                      onChange={(event) => dataStore.setValueForTicker(symbolSet.symbolTicker, event.target.value)}\n                      style={{ maxWidth: \"60px\" }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell align=\"right\">\n            <Typography noWrap>Total: ${dataStore.totalValueOfSymbols}</Typography>\n          </TableCell>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(2) + \"%\";\n}\n\nexport default PortfolioBuilder;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\nconst KeyMetricCard = ({ titel, description, value = 0, showPercent = false }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid container item direction=\"column\" justify=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n              {titel}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h3\" component=\"h2\">\n              {showPercent ? performanceToPercent(value) : value.toFixed(2)}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"caption\" component=\"p\">\n              {description}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(0) + \"%\";\n}\n\nexport default KeyMetricCard;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport KeyMetricCard from \"./KeyMetricCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: 0,\n    margin: 0,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\nconst KeyIndicatorRow = observer(({ dataStore, notificationStore, configStore, symbolDataStore }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3} justify=\"space-evenly\" alignItems=\"center\">\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Peformance\"}\n            description={\"Portfolio performance since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").performanceSincePortfolioStart}\n            showPercent={true}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Peformance\"}\n            description={\"Portfolio performance annualized since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").yearlyPerformanceSincePortfolioStart}\n            showPercent={true}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Dividend\"}\n            description={\"Dividends payed out since start\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").totalDividendPayout}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Sharp Ratio\"}\n            description={\"Calculated based on set risk free rate\"}\n            value={dataStore.getSymbolSetForTicker(\"Portfolio\").sharpRatio}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nexport default KeyIndicatorRow;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst DatePicker = observer(({ dataStore }) => {\n  const handleDateChange = (date) => {\n    dataStore.setPortfolioStartingDate(date.format(\"YYYY-MM-DD\"));\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy-MM-DD\"\n        margin=\"normal\"\n        id=\"date-picker-starting-datet\"\n        label=\"Starting date\"\n        value={dataStore.portfolioStartingDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n});\n\nexport default DatePicker;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Typography, Slider, Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport DatePicker from \"./DatePicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(2),\n  },\n  gridItem: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst marks = [\n  {\n    value: -1.5,\n    label: \"-1.5%\",\n  },\n  {\n    value: 0,\n    label: \"0%\",\n  },\n  {\n    value: 1,\n    label: \"1%\",\n  },\n  {\n    value: 5,\n    label: \"5%\",\n  },\n  {\n    value: 10,\n    label: \"10%\",\n  },\n];\n\nfunction valuetext(value) {\n  return `${value}%`;\n}\n\nconst ChartConfigurationCard = observer(({ configStore, dataStore }) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root} elevation={1}>\n      <Typography variant=\"h4\" gutterBottom>\n        Configurations\n      </Typography>\n      <Grid container spacing={3} xs={12} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <DatePicker dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <Typography id=\"discrete-slider-custom\" gutterBottom>\n            Risk Free Rate: {JSON.stringify(configStore.riskFreeRate)}%\n          </Typography>\n          <Slider\n            defaultValue={configStore.riskFreeRate}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"discrete-slider-custom\"\n            min={-1.5}\n            max={10}\n            step={0.1}\n            valueLabelDisplay=\"auto\"\n            marks={marks}\n            onChangeCommitted={(e, val) => configStore.setRiskFreeRate(val)}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\n\nexport default ChartConfigurationCard;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport SelectedSymbolsBar from \"../components/SelectedSymbolsBar\";\nimport Chart from \"../components/Chart\";\nimport PortfolioBuilder from \"../components/PortfolioBuilder\";\nimport KeyMetricRow from \"../components/KeyMetricRow\";\nimport ChartConfigurationCard from \"../components/ChartConfigurationCard\";\n\nconst ChartingPage = ({ dataStore, notificationStore, configStore, symbolDataStore }) => {\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12} spacing={3}>\n          <SelectedSymbolsBar dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <KeyMetricRow dataStore={dataStore} configStore={configStore} symbolDataStore={symbolDataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <Chart dataStore={dataStore} configStore={configStore} symbolDataStore={symbolDataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <PortfolioBuilder dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <ChartConfigurationCard configStore={configStore} dataStore={dataStore} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ChartingPage;\n","import React from \"react\";\nimport { Paper, Typography, TextField, Link } from \"@material-ui/core\";\n\nconst SettingsPage = ({ configStore }) => {\n  return (\n    <div>\n      <Paper elevation={1} style={{ padding: \"20px\" }}>\n        <Typography variant=\"h1\" gutterBottom>\n          Settings\n        </Typography>\n\n        <Typography variant=\"h6\" gutterBottom>\n          Alpha Vantag API Token\n        </Typography>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"API-Token\"\n          variant=\"outlined\"\n          defaultValue={configStore.alphaVantage.apiToken}\n          onChange={(e) => configStore.setAlphaVantageAPITokenIDB(e.target.value)}\n        />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          Get your free token here:{\" \"}\n          <Link href=\"https://www.alphavantage.co/support/#api-key\" target=\"_blank\" rel=\"noreferrer\">\n            Alpha Vantage\n          </Link>{\" \"}\n          (Hint: try a random key)\n        </Typography>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","import { Component } from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { inject, observer } from \"mobx-react\";\nimport { autorun } from \"mobx\";\n\nclass Notifier extends Component {\n  displayed = [];\n\n  storeDisplayed = (id) => {\n    this.displayed = [...this.displayed, id];\n  };\n\n  removeDisplayedNotificationByKey(removeKey) {\n    this.displayed = this.displayed.filter((key) => removeKey !== key);\n  }\n\n  componentDidMount() {\n    autorun(() => {\n      const { notifications = [] } = this.props.notificationStore;\n\n      notifications.forEach((notification) => {\n        // Do nothing if snackbar is already displayed\n        if (this.displayed.includes(notification.key)) return;\n        // Display snackbar using notistack\n        this.props.enqueueSnackbar(notification.message, notification.options);\n        // Keep track of snackbars that we've displayed\n        this.storeDisplayed(notification.key);\n        // Dispatch action to remove snackbar from mobx store\n        this.props.notificationStore.removeSnackbar(notification.key);\n\n        // Calculate delay to remove notification from this.displayed\n        let delayUntilRemoveMs = 0;\n        if (notification.options && notification.options.autoHideDuration) {\n          delayUntilRemoveMs = notification.options.autoHideDuration + 100;\n        } else {\n          delayUntilRemoveMs = 2100;\n        }\n        // Remove notifaction from this.disyplayed after dealy\n        setTimeout(\n          function () {\n            this.removeDisplayedNotificationByKey(notification.key);\n          }.bind(this),\n          delayUntilRemoveMs\n        );\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withSnackbar(inject(\"notificationStore\")(observer(Notifier)));\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n// Content\nimport dataStore from \"./stores/DataStore\";\nimport notificationStore from \"./stores/NotificationStore\";\nimport configStore from \"./stores/ConfigStore\";\nimport symbolDataStore from \"./stores/SymbolDataStore\";\nimport ChartingPage from \"./pages/ChartingPage\";\nimport SettingsPage from \"./pages/SettingsPage\";\n\nimport Notifier from \"./components/Notifier\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [pages, setPages] = React.useState({ chartingPage: { showPage: true }, settingsPage: { showPage: false } });\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handlePageSelect = (pageToShow) => {\n    const tempPages = {};\n    for (const [page] of Object.entries(pages)) {\n      if (page === pageToShow) tempPages[page] = { showPage: true };\n      else tempPages[page] = { showPage: false };\n    }\n    setPages(tempPages);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Notifier notificationStore={notificationStore} />\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Historic-Portfolio-Analyzer (alpha)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key={\"charting-page\"} onClick={() => handlePageSelect(\"chartingPage\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Chart\"} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key={\"serttings-page\"} onClick={() => handlePageSelect(\"settingsPage\")}>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Settings\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {pages.chartingPage.showPage ? (\n          <ChartingPage\n            dataStore={dataStore}\n            notificationStore={notificationStore}\n            configStore={configStore}\n            symbolDataStore={symbolDataStore}\n          />\n        ) : null}\n        {pages.settingsPage.showPage ? <SettingsPage configStore={configStore} /> : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Provider } from 'mobx-react';\nimport notificationStore from \"./stores/NotificationStore\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider notificationStore={notificationStore}>\n    <SnackbarProvider maxSnack={10}>\n      <App />\n    </SnackbarProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}