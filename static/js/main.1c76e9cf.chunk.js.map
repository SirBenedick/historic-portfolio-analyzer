{"version":3,"sources":["stores/dbPromise.js","stores/idbPortfolioStore.js","stores/NotificationStore.js","stores/idbConfigStore.js","stores/ConfigStore.js","stores/idbSymbolDataStore.js","services/FetchDataService.js","stores/DataStore.js","components/SearchForSymbolInput.js","components/SelectedSymbolsBar.js","components/DatePicker.js","components/ChartSwitchStyle.js","components/TriggerRecalculatePortfolio.js","components/TriggerShowVisibleLines.js","components/Chart.js","components/PortfolioBuilder.js","pages/ChartingPage.js","pages/SettingsPage.js","components/Notifier.js","App.js","reportWebVitals.js","index.js"],"names":["window","console","log","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","idbPortfolioStore","get","key","set","val","put","delete","clear","keys","getAllKeys","doesDataSeriesExist","notificationStore","extendObservable","this","notifications","API_TOKEN_MISSING","PORTFOLIO_CALCULATING","API_TOKEN_STORED","enqueueSnackbar","action","note","push","Date","getTime","Math","random","removeSnackbar","filter","notification","idbConfigStore","fakeToken","length","result","characters","charactersLength","i","charAt","floor","configStore","alphaVantage","url","apiToken","isRunningSetup","alphaVantageConstants","SYMBOL_SEARCH","TIME_SERIES_DAILY_ADJUSTED","startSetup","makeObservable","observable","setAlphaVantageAPITokenHelper","setIsRunningSetup","token","setAlphaVantageAPITokenIDB","dataStore","addSymbol","symbolTicker","name","region","currency","bool","newToken","message","options","variant","autoHideDuration","idbSymbolDataStore","getAdjustedCloseByTickerAndDate","date","data","getDataChartFormatBySymbol","calculateAndStoreHistoricPortfolioPerformance","then","symbolData","a","formateDataToChartFormat","FetchDataService","fetchDataDailyAdjustedForSymbolAlphaVantage","doesTimesSeriesDailyAdjustedExistForSymbol","getTimeSeriesDailyByTicker","symbolQuantityMap","startingDate","moment","portfolioStartingDate","endDate","daysSinceStart","diff","Promise","all","getSymbolsWithoutPortfolio","map","symbolSet","format","startingDatePriceValue","add","endDatePriceValue","subtract","performanceSinceStart","parseFloat","setPerformanceSincePortfolioStartForTicker","yearlyPerformanceSinceStart","setYearlyPerformanceSincePortfolioStartForTicker","startingDateValueOfThisSymbol","getSymbolSetForTicker","quantity","endValue","setEndValueForTicker","datesToCheck","isBefore","tempSymbolDatasetMap","tempDataSet","forEach","tempSumForDate","Object","entries","dataset","time","value","res","endDatePriceValuePortfolio","startingDatePriceValuePortfolio","performanceSinceStartPortfolio","yearlyPerformanceSinceStartPortfolio","temp","dailyInformation","String","reverse","axios","params","function","symbol","outputsize","apikey","searchAlphaVantageByKeywords","keywords","matches","searchResultsFormated","DataStore","symbols","isVisible","performanceSincePortfolioStart","yearlyPerformanceSincePortfolioStart","color","nextAvailableColorValue","pendingRequests","appleData","triggerRecalculatePortfolio","triggerRerenderVisibleLines","toggleSymbolVisibility","removeSelectedSymbol","setValueForTicker","setTriggerRecalculatePortfolio","setTriggerRerenderVisibleLines","setPortfolioStartingDate","totalValueOfSymbols","computed","listOfSymbolTickers","autorun","trigger","trigger2","JSON","stringify","symbolSetSearchResult","compareSymbolSets","b","sort","symbolTickerToDelete","removeColorInUse","changedSymbolbyTicker","doesExist","toJS","find","changedSymbolByTicker","availableColorValue","index","chartColorsForSeries","element","isBegingUsed","colorValue","reduce","pv","filterOptions","createFilterOptions","matchFrom","option","SearchForSymbolInput","observer","React","useState","searchOptions","setSearchOptions","isLoadingSearch","setIsLoadingSearch","searchTimeout","setSearchTimeout","setValue","handleValueChange","handleSearch","clearTimeout","timeout","setTimeout","handleSearchSelect","symbolSearchResult","doesSymbolExist","Autocomplete","id","loading","onChange","event","renderOption","Typography","renderInput","TextField","label","target","style","minWidth","paddingRight","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","SelectedSymbolsBar","classes","Paper","className","Grid","container","alignItems","item","xs","direction","justify","Chip","onClick","symbolTickerToHide","onDelete","clickable","backgroundColor","DatePicker","utils","MomentUtils","disableToolbar","KeyboardButtonProps","ChartSwitchStyle","selectedChartStyleType","switchStyle","checkedA","state","setState","FormGroup","row","FormControlLabel","control","Switch","checked","TriggerRecalculatePortfolio","recalculateAndRenderPortfolio","useEffect","TriggerShowVisibleLines","rerenderVisibleLines","Chart","props","myRef","createRef","chart","lineSeriesObj","bind","createGraphForSelectedSymbols","addLineSeriesData","renderChart","current","firstChild","removeChild","createChart","stylePercent","styleAbsolut","applyOptions","tempListOfAllSymbols","lineSeries","includes","removeSeries","tempLineSeries","dataForSymbol","setData","addLineSeries","series","marginTop","refreshData","ref","Component","height","rightPriceScale","scaleMargins","top","bottom","mode","PriceScaleMode","Normal","borderColor","Percentage","performanceToPercent","performance","toFixed","PortfolioBuilder","TableContainer","component","Table","table","aria-label","size","TableHead","TableRow","TableCell","align","maxWidth","TableBody","scope","noWrap","type","ChartingPage","SettingsPage","elevation","gutterBottom","defaultValue","e","Link","href","rel","Notifier","displayed","storeDisplayed","removeKey","delayUntilRemoveMs","removeDisplayedNotificationByKey","withSnackbar","inject","drawerWidth","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","flexGrow","App","useTheme","open","setOpen","chartingPage","showPage","settingsPage","pages","setPages","handlePageSelect","pageToShow","tempPages","page","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","edge","Drawer","paper","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.1c76e9cf.chunk.js","sourcesContent":["import { openDB } from \"idb\";\n\nif (!(\"indexedDB\" in window)) {\n  console.log(\"This browser doesn't support IndexedDB\");\n}\n\nconst dbPromise = openDB(\"historic-portfolio-analyzer\", 1, {\n  upgrade(db) {\n    if (!db.objectStoreNames.contains(\"symbolDataStore\")) {\n      console.log(\"Creating new symbolDataStore\");\n      db.createObjectStore(\"symbolDataStore\", {\n        keyPath: \"symbol\",\n        autoIncrement: false,\n      });\n    }\n    if (!db.objectStoreNames.contains(\"portfolioStore\")) {\n      console.log(\"Creating new portfolioStore\");\n      db.createObjectStore(\"portfolioStore\");\n    }\n    if (!db.objectStoreNames.contains(\"configStore\")) {\n      console.log(\"Creating new configStore\");\n      db.createObjectStore(\"configStore\");\n    }\n  },\n});\n\nexport default dbPromise;\n","import dbPromise from \"./dbPromise\";\n\nconst idbPortfolioStore = {\n  async get(key) {\n    return (await dbPromise).get(\"portfolioStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"portfolioStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"portfolioStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"portfolioStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"portfolioStore\");\n  },\n  async doesDataSeriesExist() {\n    const data = await this.get(\"dataSeries\");\n    if (data) return true;\n    else return false;\n  },\n};\n\nexport default idbPortfolioStore;\n","import { action, extendObservable } from \"mobx\";\n\nconst NotificationStore = function () {\n  extendObservable(this, {\n    notifications: [],\n    keys: {\n      API_TOKEN_MISSING: \"API_TOKEN_MISSING\",\n      PORTFOLIO_CALCULATING: \"PORTFOLIO_CALCULATING\",\n      API_TOKEN_STORED: \"API_TOKEN_STORED\",\n    },\n\n    enqueueSnackbar: action((note) => {\n      this.notifications.push({\n        key: note.key ? note.key : new Date().getTime() + Math.random(),\n        ...note,\n      });\n    }),\n\n    removeSnackbar: action((key) => {\n      this.notifications = this.notifications.filter((notification) => notification.key !== key);\n    }),\n  });\n};\n\nconst notificationStore = new NotificationStore();\nexport default notificationStore;\n","import dbPromise from \"./dbPromise\";\n\nconst idbConfigStore = {\n  async get(key) {\n    return (await dbPromise).get(\"configStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"configStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"configStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"configStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"configStore\");\n  },\n};\n\nexport default idbConfigStore;\n","import { makeObservable, observable, action } from \"mobx\";\nimport idbConfigStore from \"./idbConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport dataStore from \"./DataStore\";\n\nclass ConfigStore {\n  alphaVantage = { url: \"https://www.alphavantage.co/query\", apiToken: \"\" };\n  isRunningSetup = true;\n  alphaVantageConstants = { SYMBOL_SEARCH: \"SYMBOL_SEARCH\", TIME_SERIES_DAILY_ADJUSTED: \"TIME_SERIES_DAILY_ADJUSTED\" };\n\n  constructor() {\n    this.startSetup();\n\n    makeObservable(this, {\n      alphaVantage: observable,\n      isRunningSetup: observable,\n      setAlphaVantageAPITokenHelper: action,\n      setIsRunningSetup: action,\n    });\n  }\n\n  async startSetup() {\n    console.log(\"startSetup\");\n    // Load stored API token from idbConfigStore or create a Token\n    const token = await idbConfigStore.get(\"alphaVantagAPIToken\");\n    if (token) this.setAlphaVantageAPITokenHelper(token);\n    else {\n      await this.setAlphaVantageAPITokenIDB(fakeToken(16));\n    }\n\n    // Add default symbols\n    // If no deafult symbols added then dataStore trigger have to be called manually\n    dataStore.addSymbol({ symbolTicker: \"AAPL\", name: \"Apple Inc.\", region: \"testRegion\", currency: \"USD\" });\n\n    this.setIsRunningSetup(false);\n  }\n\n  setIsRunningSetup(bool) {\n    this.isRunningSetup = bool;\n  }\n\n  // Store new alphaVantagAPIToken to idbConfigStore then store in mobx store\n  async setAlphaVantageAPITokenIDB(newToken) {\n    await idbConfigStore.set(\"alphaVantagAPIToken\", newToken);\n    notificationStore.enqueueSnackbar({\n      message: `Stored new API-Token${this.alphaVantage.apiToken}`,\n      options: {\n        variant: \"success\",\n        autoHideDuration: 1000,\n      },\n      key: notificationStore.keys.API_TOKEN_STORED,\n    });\n    this.setAlphaVantageAPITokenHelper(newToken);\n  }\n\n  setAlphaVantageAPITokenHelper(newToken) {\n    console.log(\"setAlphaVantageAPITokenHelper: \" + newToken);\n    this.alphaVantage.apiToken = newToken;\n  }\n}\n\nfunction fakeToken(length) {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst configStore = new ConfigStore();\nexport default configStore;\n","import dbPromise from \"./dbPromise\";\nimport dataStore from \"./DataStore\";\nimport moment from \"moment\";\nimport FetchDataService from \"../services/FetchDataService\";\nimport idbPortfolioStore from \"./idbPortfolioStore\";\nimport notificationStore from \"./NotificationStore\";\nimport configStore from \"./ConfigStore\";\n\nconst idbSymbolDataStore = {\n  async get(key) {\n    return (await dbPromise).get(\"symbolDataStore\", key);\n  },\n  async set(val) {\n    return (await dbPromise).put(\"symbolDataStore\", val);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"symbolDataStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"symbolDataStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"symbolDataStore\");\n  },\n  async getAdjustedCloseByTickerAndDate(key, date) {\n    const data = await this.get(key);\n    if (data && \"Time Series (Daily)\" in data) {\n      if (data[\"Time Series (Daily)\"][date]) return data[\"Time Series (Daily)\"][date][\"5. adjusted close\"];\n    }\n    return false;\n  },\n  async getDataChartFormatBySymbol(key) {\n    console.log(\"getDataChartFormatBySymbol: \" + key);\n    // TODO ensure consistent order old -> new\n    if (key === \"Portfolio\") {\n      const doesPortfolioDataExist = await idbPortfolioStore.doesDataSeriesExist();\n      if (doesPortfolioDataExist) {\n        return idbPortfolioStore.get(\"dataSeries\");\n      } else {\n        return this.calculateAndStoreHistoricPortfolioPerformance();\n      }\n    } else {\n      return (await dbPromise).get(\"symbolDataStore\", key).then(async (symbolData) => {\n        // Check doesTimesSeriesDailyAdjustedExistForSymbol else fetch data\n        if (symbolData && \"Time Series (Daily)\" in symbolData && symbolData[\"Time Series (Daily)\"]) {\n          return formateDataToChartFormat(symbolData);\n        } else {\n          // Check if api token exist\n          if (configStore.alphaVantage.apiToken) {\n            const wasDataFetched = await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(key);\n            if (wasDataFetched) return this.getDataChartFormatBySymbol(key);\n          } else {\n            notificationStore.enqueueSnackbar({\n              message: `Please enter an API key on the Settings Page`,\n              options: {\n                variant: \"error\",\n                autoHideDuration: 2500,\n              },\n              key: notificationStore.keys.API_TOKEN_MISSING,\n            });\n          }\n        }\n      });\n    }\n  },\n  async doesTimesSeriesDailyAdjustedExistForSymbol(key) {\n    const data = await this.get(key);\n    if (data && \"Time Series (Daily)\" in data && data[\"Time Series (Daily)\"]) return true;\n    return false;\n  },\n  async getTimeSeriesDailyByTicker(symbolTicker) {\n    const data = await this.get(symbolTicker);\n    return data[\"Time Series (Daily)\"];\n  },\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    console.log(\"calculateAndStoreHistoricPortfolioPerformance\");\n    notificationStore.enqueueSnackbar({\n      message: `Calculating Portfolio value`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 2000,\n      },\n      key: notificationStore.keys.PORTFOLIO_CALCULATING,\n    });\n\n    //  Calculate for each asset the quantity at portfolio start and the performance since\n    console.log(\"Portfolio - calculating quantity\");\n    let symbolQuantityMap = {};\n    let startingDate = moment(dataStore.portfolioStartingDate);\n    let endDate = moment();\n    const daysSinceStart = endDate.diff(startingDate, \"days\") + 1;\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        // Get price of asset for the portfolio starting date\n        let startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          startingDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!startingDatePriceValue) {\n          startingDate.add(1, \"days\");\n          startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            startingDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Get price of asset for the portfolio end date\n        let endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          endDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!endDatePriceValue) {\n          endDate.subtract(1, \"days\");\n          endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            endDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Calculate performanceSinceStart for this symbol and store the value\n        const performanceSinceStart = parseFloat(endDatePriceValue) / parseFloat(startingDatePriceValue) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, performanceSinceStart);\n        // Calculate yearlyPerformanceSinceStart for this symbol and store the value\n        const yearlyPerformanceSinceStart = performanceSinceStart * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, yearlyPerformanceSinceStart);\n\n        // Calculate quantity for this symbol\n        const startingDateValueOfThisSymbol = dataStore.getSymbolSetForTicker(symbolSet.symbolTicker)[\"value\"];\n        const quantity = parseFloat(startingDateValueOfThisSymbol) / parseFloat(startingDatePriceValue);\n\n        symbolQuantityMap[symbolSet.symbolTicker] = quantity;\n\n        const endValue = endDatePriceValue * quantity;\n        dataStore.setEndValueForTicker(symbolSet.symbolTicker, endValue);\n      })\n    );\n\n    // Generate a list of all days between dataStore.portfolioStartingDate and today (including both days)\n    console.log(\"Portfolio - list of dates\");\n    let datesToCheck = [];\n    let date = moment(dataStore.portfolioStartingDate);\n    while (date.isBefore()) {\n      datesToCheck.push(date.format(\"YYYY-MM-DD\"));\n      date.add(1, \"days\");\n    }\n\n    // Iterate through all days and calculate the total value\n    console.log(\"Portfolio - calculating for each day\");\n    let tempSymbolDatasetMap = {};\n    await Promise.all(\n      dataStore.getSymbolsWithoutPortfolio().map(async (symbolSet) => {\n        let tempDataSet = await idbSymbolDataStore.getTimeSeriesDailyByTicker(symbolSet.symbolTicker);\n        tempSymbolDatasetMap[symbolSet.symbolTicker] = tempDataSet;\n      })\n    );\n\n    let result = [];\n    datesToCheck.forEach((date) => {\n      let tempSumForDate = 0;\n      for (const [symbolTicker, dataset] of Object.entries(tempSymbolDatasetMap)) {\n        if (!(date in dataset)) return;\n        let tempValue = dataset[date][\"5. adjusted close\"];\n        tempSumForDate += tempValue * symbolQuantityMap[symbolTicker];\n      }\n      if (tempSumForDate) result.push({ time: date, value: tempSumForDate });\n    });\n\n    idbPortfolioStore.set(\"dataSeries\", result).then((res) => {\n      if (result.length !== 0) {\n        const endDatePriceValuePortfolio = result[0].value;\n        const startingDatePriceValuePortfolio = result[result.length - 1].value;\n        // Calculate performanceSinceStart for portfolio and store the value\n        const performanceSinceStartPortfolio =\n          parseFloat(startingDatePriceValuePortfolio) / parseFloat(endDatePriceValuePortfolio) - 1;\n        dataStore.setPerformanceSincePortfolioStartForTicker(\"Portfolio\", performanceSinceStartPortfolio);\n        // Calculate yearlyPerformanceSinceStart for portfolio and store the value\n        const yearlyPerformanceSinceStartPortfolio = performanceSinceStartPortfolio * (365 / daysSinceStart);\n        dataStore.setYearlyPerformanceSincePortfolioStartForTicker(\"Portfolio\", yearlyPerformanceSinceStartPortfolio);\n\n        dataStore.setEndValueForTicker(\"Portfolio\", startingDatePriceValuePortfolio);\n      }\n    });\n\n    return result;\n  },\n};\n\nconst formateDataToChartFormat = (symbolData) => {\n  let temp = [];\n  for (const [key, dailyInformation] of Object.entries(symbolData[\"Time Series (Daily)\"])) {\n    temp.push({ time: String(key), value: parseFloat(dailyInformation[\"5. adjusted close\"]) });\n  }\n  return temp.reverse();\n};\n\nexport default idbSymbolDataStore;\n","import axios from \"axios\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport notificationStore from \"../stores/NotificationStore\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst FetchDataService = {\n  async fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker) {\n    console.log(\"fetchDataDailyAdjustedForSymbolAlphaVantage\");\n    console.log(`Fetching data for ${symbolTicker}`);\n    notificationStore.enqueueSnackbar({\n      message: `Fetching data for: ${symbolTicker}`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 1500,\n      },\n      key: `FETCHING-${symbolTicker}`,\n    });\n    try {\n      const res = await axios.get(configStore.alphaVantage.url, {\n        params: {\n          function: configStore.alphaVantageConstants.TIME_SERIES_DAILY_ADJUSTED,\n          symbol: symbolTicker,\n          outputsize: \"full\",\n          apikey: configStore.alphaVantage.apiToken,\n        },\n      });\n      if (\"Note\" in res.data) {\n        console.log(\"Failed to fetch for: \" + symbolTicker);\n        notificationStore.enqueueSnackbar({\n          message: `Failed to fetch data for: ${symbolTicker}`,\n          options: {\n            variant: \"warning\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-FAILED-${symbolTicker}`,\n        });\n        return false;\n      } else {\n        res.data[\"symbol\"] = symbolTicker;\n        await idbSymbolDataStore.set(res.data);\n        // TODO check if received data was valid\n        notificationStore.enqueueSnackbar({\n          message: `Successfully fetched data for: ${symbolTicker}`,\n          options: {\n            variant: \"success\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-SUCCESS-${symbolTicker}`,\n        });\n        return symbolTicker;\n      }\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n    }\n  },\n  async searchAlphaVantageByKeywords(keywords) {\n    console.log(\"searchAlphaVantageByKeywords: \" + keywords);\n    const res = await axios.get(configStore.alphaVantage.url, {\n      params: {\n        function: configStore.alphaVantageConstants.SYMBOL_SEARCH,\n        keywords: keywords,\n        apikey: configStore.alphaVantage.apiToken,\n      },\n    });\n    if (\"Note\" in res.data) {\n      console.log(\"Failed to search for:\" + keywords);\n      notificationStore.enqueueSnackbar({\n        message: `Failed to search for: ${keywords}`,\n        options: {\n          variant: \"warning\",\n        },\n      });\n      return false;\n    } else {\n      const matches = res.data[\"bestMatches\"];\n      if (!matches) return [];\n      const searchResultsFormated = matches.map((result) => ({\n        symbolTicker: result[\"1. symbol\"],\n        name: result[\"2. name\"],\n        region: result[\"4. region\"],\n        currency: result[\"8. currency\"],\n      }));\n      return searchResultsFormated;\n    }\n  },\n};\n\nexport default FetchDataService;\n","import { makeObservable, observable, action, computed, toJS, autorun } from \"mobx\";\nimport moment from \"moment\";\nimport FetchDataService from \"../services/FetchDataService\";\nimport configStore from \"./ConfigStore\";\nimport idbSymbolDataStore from \"./idbSymbolDataStore\";\nimport notificationStore from \"./NotificationStore\";\nclass DataStore {\n  symbols = [\n    {\n      symbolTicker: \"Portfolio\",\n      name: \"Portfolio\",\n      isVisible: true,\n      value: 0,\n      currency: \"USD\",\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      color: this.nextAvailableColorValue(),\n      endValue: 0,\n    },\n  ];\n  pendingRequests = 0;\n  appleData = [];\n  portfolioStartingDate = \"\";\n  triggerRecalculatePortfolio = false;\n  triggerRerenderVisibleLines = false;\n\n  constructor() {\n    makeObservable(this, {\n      symbols: observable,\n      triggerRecalculatePortfolio: observable,\n      triggerRerenderVisibleLines: observable,\n      portfolioStartingDate: observable,\n      toggleSymbolVisibility: action,\n      addSymbol: action,\n      removeSelectedSymbol: action,\n      setValueForTicker: action,\n      setPerformanceSincePortfolioStartForTicker: action,\n      setYearlyPerformanceSincePortfolioStartForTicker: action,\n      setEndValueForTicker: action,\n      setTriggerRecalculatePortfolio: action,\n      setTriggerRerenderVisibleLines: action,\n      setPortfolioStartingDate: action,\n      totalValueOfSymbols: computed,\n      listOfSymbolTickers: computed,\n    });\n\n    this.portfolioStartingDate = moment().subtract(1, \"years\").format(\"YYYY-MM-DD\");\n\n    autorun(() => {\n      const trigger = this.portfolioStartingDate;\n      const trigger2 = this.totalValueOfSymbols;\n\n      this.setTriggerRecalculatePortfolio(true);\n      console.log(\"Autorun: triggering portfolio rercalculation\" + JSON.stringify(trigger) + JSON.stringify(trigger2));\n    });\n  }\n\n  setTriggerRecalculatePortfolio(bool) {\n    this.triggerRecalculatePortfolio = bool;\n  }\n\n  setTriggerRerenderVisibleLines(bool) {\n    this.triggerRerenderVisibleLines = bool;\n  }\n\n  async addSymbol(symbolSetSearchResult) {\n    const compareSymbolSets = (a, b) => {\n      if (b.symbolTicker === \"Portfolio\") {\n        return 1;\n      }\n      if (a.symbolTicker < b.symbolTicker) {\n        return -1;\n      }\n      if (a.symbolTicker > b.symbolTicker) {\n        return 1;\n      }\n      return 0;\n    };\n\n    if (!symbolSetSearchResult || !symbolSetSearchResult.symbolTicker) return false;\n    this.symbols.push({\n      symbolTicker: symbolSetSearchResult.symbolTicker,\n      name: symbolSetSearchResult.name,\n      currency: symbolSetSearchResult.currency,\n      performanceSincePortfolioStart: 1,\n      yearlyPerformanceSincePortfolioStart: 1,\n      isVisible: true,\n      value: 100,\n      endValue: 0,\n      color: this.nextAvailableColorValue(),\n    });\n    this.symbols.sort(compareSymbolSets);\n    const doesDataAlreadyExists = await idbSymbolDataStore.doesTimesSeriesDailyAdjustedExistForSymbol(\n      symbolSetSearchResult.symbolTicker\n    );\n    if (!doesDataAlreadyExists) {\n      // Check if api token is set\n      if (configStore.alphaVantage.apiToken) {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolSetSearchResult.symbolTicker);\n      } else {\n        notificationStore.enqueueSnackbar({\n          message: `Please enter an API key on the Settings Page`,\n          options: {\n            variant: \"error\",\n            autoHideDuration: 2500,\n          },\n          key: notificationStore.keys.API_TOKEN_MISSING,\n        });\n      }\n    }\n    //  TODO check if this  could be optimized\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  removeSelectedSymbol(symbolTickerToDelete) {\n    this.removeColorInUse(this.getSymbolSetForTicker(symbolTickerToDelete).color);\n    this.symbols = this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== symbolTickerToDelete);\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRecalculatePortfolio(true);\n  }\n\n  toggleSymbolVisibility(changedSymbolbyTicker) {\n    console.log(changedSymbolbyTicker);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolbyTicker) {\n        symbol.isVisible = !symbol.isVisible;\n      }\n    });\n    this.setTriggerRerenderVisibleLines(true);\n  }\n\n  setPortfolioStartingDate(date) {\n    this.portfolioStartingDate = date;\n  }\n\n  get totalValueOfSymbols() {\n    return this.symbols.reduce((pv, symbolSet) => {\n      if (symbolSet.symbolTicker !== \"Portfolio\") return +pv + +symbolSet.value;\n      else return pv;\n    }, 0);\n  }\n\n  async doesSymbolExist(symbolTicker) {\n    let doesExist = false;\n    this.symbols.forEach((symbolSet) => {\n      if (symbolSet.symbolTicker === symbolTicker) {\n        doesExist = true;\n      }\n    });\n    return doesExist;\n  }\n\n  getSymbolSetForTicker(symbolTicker) {\n    return toJS(this.symbols.find((symbolSet) => symbolSet.symbolTicker === symbolTicker));\n  }\n\n  getSymbolsWithoutPortfolio() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n  }\n\n  get listOfSymbolTickers() {\n    return this.symbols.map((symbolSet) => symbolSet.symbolTicker);\n  }\n\n  setValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating value: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.value = value;\n      }\n    });\n  }\n\n  setPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating performanceSincePortfolioStart: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.performanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setYearlyPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setYearlyPerformanceSincePortfolioStartForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.yearlyPerformanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setEndValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setEndValueForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.endValue = value;\n      }\n    });\n  }\n\n  nextAvailableColorValue() {\n    let availableColorValue = null;\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (!element.isBegingUsed) {\n        availableColorValue = element.colorValue;\n        element.isBegingUsed = true;\n        break;\n      }\n    }\n    return availableColorValue;\n  }\n\n  removeColorInUse(colorValue) {\n    for (let index = 0; index < chartColorsForSeries.length; index++) {\n      const element = chartColorsForSeries[index];\n      if (element.colorValue === colorValue) {\n        element.isBegingUsed = false;\n        break;\n      }\n    }\n  }\n}\n\nconst chartColorsForSeries = [\n  { colorValue: \"#3f51b5\", isBegingUsed: false },\n  { colorValue: \"#2196f3\", isBegingUsed: false },\n  { colorValue: \"#03a9f4\", isBegingUsed: false },\n  { colorValue: \"#00bcd4\", isBegingUsed: false },\n  { colorValue: \"#009688\", isBegingUsed: false },\n  { colorValue: \"#4caf50\", isBegingUsed: false },\n  { colorValue: \"#8bc34a\", isBegingUsed: false },\n  { colorValue: \"#cddc39\", isBegingUsed: false },\n  { colorValue: \"#ffeb3b\", isBegingUsed: false },\n  { colorValue: \"#ffc107\", isBegingUsed: false },\n  { colorValue: \"#ff9800\", isBegingUsed: false },\n  { colorValue: \"#ff5722\", isBegingUsed: false },\n  { colorValue: \"#f44336\", isBegingUsed: false },\n  { colorValue: \"#e91e63\", isBegingUsed: false },\n  { colorValue: \"#9c27b0\", isBegingUsed: false },\n  { colorValue: \"#673ab7\", isBegingUsed: false },\n];\n\nconst dataStore = new DataStore();\nexport default dataStore;\n","import React from \"react\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport { observer } from \"mobx-react-lite\";\nimport FetchDataService from \"../services/FetchDataService\";\n\nconst filterOptions = createFilterOptions({\n  matchFrom: \"any\",\n  stringify: (option) => `${option.symbolTicker}-${option.name}`,\n});\n\nconst SearchForSymbolInput = observer(({ dataStore, notificationStore }) => {\n  const [searchOptions, setSearchOptions] = React.useState([]);\n  const [isLoadingSearch, setIsLoadingSearch] = React.useState(false);\n  const [searchTimeout, setSearchTimeout] = React.useState(null);\n  const [value, setValue] = React.useState(searchOptions[0]);\n\n  const handleValueChange = async (keywords) => {\n    const handleSearch = async (keywords) => {\n      setIsLoadingSearch(true);\n      const res = await FetchDataService.searchAlphaVantageByKeywords(keywords);\n      setIsLoadingSearch(false);\n      if (res) setSearchOptions(res);\n    };\n\n    if (searchTimeout) clearTimeout(searchTimeout);\n    if (!keywords) return;\n    const timeout = setTimeout(async () => {\n      await handleSearch(keywords);\n    }, 500);\n    setSearchTimeout(timeout);\n  };\n\n  const handleSearchSelect = async (symbolSearchResult) => {\n    const doesExist = await dataStore.doesSymbolExist(symbolSearchResult.symbolTicker);\n\n    if (doesExist) {\n      notificationStore.enqueueSnackbar({\n        message: `Symbol: ${symbolSearchResult.symbolTicker} already part of portfolio`,\n        options: {\n          variant: \"warning\",\n          autoHideDuration: 2000,\n        },\n        key: `SYMBOL-DUPLICATE-${symbolSearchResult.symbolTicker}`,\n      });\n    } else {\n      dataStore.addSymbol(symbolSearchResult);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      loading={isLoadingSearch}\n      value={value}\n      onChange={(event, symbolSearchResult) => {\n        setValue(\"\");\n        if (symbolSearchResult && symbolSearchResult.symbolTicker) handleSearchSelect(symbolSearchResult);\n      }}\n      options={searchOptions}\n      filterOptions={filterOptions}\n      renderOption={(option) => (\n        <div>\n          <Typography>{option.name}</Typography>\n          <Typography variant=\"caption\">\n            {option.symbolTicker} - {option.region} - {option.currency}\n          </Typography>\n        </div>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Add Asset\"\n          variant=\"outlined\"\n          onChange={(event) => handleValueChange(event.target.value)}\n        />\n      )}\n      style={{ minWidth: \"100px\", paddingRight: \"10px\" }}\n    />\n  );\n});\nexport default SearchForSymbolInput;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Chip, Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport SearchForSymbolInput from \"../components/SearchForSymbolInput\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nconst SelectedSymbolsBar = observer(({ dataStore, notificationStore }) => {\n  const classes = useStyles();\n\n  const toggleVisibility = (symbolTickerToHide) => () => {\n    dataStore.toggleSymbolVisibility(symbolTickerToHide);\n  };\n\n  const handleDelete = (symbolTickerToDelete) => {\n    dataStore.removeSelectedSymbol(symbolTickerToDelete);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item xs={8}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            {dataStore.symbols.map((symbolSet) => {\n              return (\n                <Chip\n                  key={symbolSet.symbolTicker}\n                  label={symbolSet.symbolTicker}\n                  onClick={toggleVisibility(symbolSet.symbolTicker)}\n                  onDelete={symbolSet.symbolTicker !== \"Portfolio\" ? () => handleDelete(symbolSet.symbolTicker) : false}\n                  className={classes.chip}\n                  color={symbolSet.isVisible ? \"primary\" : \"default\"}\n                  clickable={true}\n                  style={{ backgroundColor: symbolSet.isVisible ? symbolSet.color : \"#eeeeee\" }}\n                />\n              );\n            })}\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <SearchForSymbolInput dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\nexport default SelectedSymbolsBar;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst DatePicker = observer(({ dataStore }) => {\n  const handleDateChange = (date) => {\n    dataStore.setPortfolioStartingDate(date.format(\"YYYY-MM-DD\"));\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy-MM-DD\"\n        margin=\"normal\"\n        id=\"date-picker-starting-datet\"\n        label=\"Starting date\"\n        value={dataStore.portfolioStartingDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n});\n\nexport default DatePicker;\n","import React from \"react\";\nimport { FormGroup, FormControlLabel, Switch } from \"@material-ui/core\";\nimport DatePicker from \"./DatePicker\";\n\nexport default function ChartSwitchStyle({ dataStore, selectedChartStyleType, switchStyle }) {\n  const [state, setState] = React.useState({\n    checkedA: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    switchStyle();\n  };\n\n  return (\n    <FormGroup row>\n      <DatePicker dataStore={dataStore} />\n      <FormControlLabel\n        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n        label={selectedChartStyleType}\n      />\n    </FormGroup>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRecalculatePortfolio = observer(({ dataStore, recalculateAndRenderPortfolio }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRecalculatePortfolio\");\n      if (dataStore.triggerRecalculatePortfolio) recalculateAndRenderPortfolio();\n      dataStore.setTriggerRecalculatePortfolio(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerRecalculatePortfolio;\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerShowVisibleLines = observer(({ dataStore, rerenderVisibleLines }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerShowVisibleLines\");\n      if (dataStore.triggerRerenderVisibleLines) rerenderVisibleLines();\n      dataStore.setTriggerRerenderVisibleLines(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerShowVisibleLines;\n","import React from \"react\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport { Paper } from \"@material-ui/core\";\nimport ChartSwitchStyle from \"./ChartSwitchStyle\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport TriggerRecalculatePortfolio from \"./TriggerRecalculatePortfolio\";\nimport TriggerShowVisibleLines from \"./TriggerShowVisibleLines\";\n\nexport default class Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedChartStyleType: \"percent\",\n    };\n    this.myRef = React.createRef();\n    this.chart = {};\n    this.lineSeriesObj = {};\n\n    this.recalculateAndRenderPortfolio = this.recalculateAndRenderPortfolio.bind(this);\n    this.rerenderVisibleLines = this.rerenderVisibleLines.bind(this);\n    this.switchStyle = this.switchStyle.bind(this);\n    this.createGraphForSelectedSymbols = this.createGraphForSelectedSymbols.bind(this);\n    this.addLineSeriesData = this.addLineSeriesData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n  }\n\n  renderChart() {\n    if (this.myRef.current.firstChild) {\n      this.myRef.current.removeChild(this.myRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(\n      this.myRef.current,\n      this.state.selectedChartStyleType === \"percent\" ? stylePercent : styleAbsolut\n    );\n  }\n\n  async recalculateAndRenderPortfolio() {\n    await idbSymbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n    this.addLineSeriesData(this.props.dataStore.getSymbolSetForTicker(\"Portfolio\"));\n  }\n\n  rerenderVisibleLines() {\n    this.createGraphForSelectedSymbols();\n  }\n\n  switchStyle() {\n    console.log(\"switching style\");\n    if (this.state.selectedChartStyleType === \"absolut\") {\n      this.setState({ selectedChartStyleType: \"percent\" });\n      this.chart.applyOptions(stylePercent);\n    } else if (this.state.selectedChartStyleType === \"percent\") {\n      this.setState({ selectedChartStyleType: \"absolut\" });\n      this.chart.applyOptions(styleAbsolut);\n    }\n  }\n\n  async createGraphForSelectedSymbols() {\n    console.log(\"createGraphForSelectedSymbols\");\n\n    // Remove lines for deleted symbols\n    const tempListOfAllSymbols = this.props.dataStore.listOfSymbolTickers;\n    for (const [symbolTicker, lineSeries] of Object.entries(this.lineSeriesObj)) {\n      // Check if ticker in dataStore symbols, if then remove lineseries\n      if (!tempListOfAllSymbols.includes(symbolTicker)) {\n        this.chart.removeSeries(lineSeries[\"series\"]);\n        delete this.lineSeriesObj[symbolTicker];\n      }\n    }\n\n    this.props.dataStore.symbols.forEach((symbolSet) => {\n      if (symbolSet.isVisible) {\n        this.addLineSeriesData(symbolSet);\n      } else {\n        if (this.lineSeriesObj[symbolSet.symbolTicker] && this.lineSeriesObj[symbolSet.symbolTicker][\"series\"]) {\n          let tempLineSeries = this.lineSeriesObj[symbolSet.symbolTicker][\"series\"];\n          this.chart.removeSeries(tempLineSeries);\n          delete this.lineSeriesObj[symbolSet.symbolTicker];\n        }\n      }\n    });\n  }\n\n  async addLineSeriesData(symbolSet) {\n    console.log(\"addLineSeriesData: \" + symbolSet.symbolTicker);\n\n    // TODO If data not availible then fetch data\n    const dataForSymbol = await idbSymbolDataStore.getDataChartFormatBySymbol(symbolSet.symbolTicker);\n\n    if (!this.lineSeriesObj[symbolSet.symbolTicker]) {\n      // If lineSeriesObj for ticker does not exist then create new lineSeriesObj\n      let tempLineSeries = this.chart.addLineSeries({\n        color: symbolSet.color,\n      });\n      if (dataForSymbol && dataForSymbol.length !== 0) {\n        tempLineSeries.setData(dataForSymbol);\n      }\n      // Create new lineSeries Object\n      this.lineSeriesObj[symbolSet.symbolTicker] = { series: tempLineSeries, color: symbolSet.color };\n    } else {\n      // If lineSeries exists then only update data, keep color\n      if (dataForSymbol && dataForSymbol.length !== 0)\n        this.lineSeriesObj[symbolSet.symbolTicker][\"series\"].setData(dataForSymbol);\n    }\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\", marginTop: \"10px\" }}>\n        <ChartSwitchStyle\n          refreshData={this.refreshData}\n          switchStyle={this.switchStyle}\n          selectedChartStyleType={this.state.selectedChartStyleType === \"absolut\" ? \"absolut\" : \"percent\"}\n          dataStore={this.props.dataStore}\n        />\n        <div ref={this.myRef} id=\"chart-ref\"></div>\n        <TriggerRecalculatePortfolio\n          dataStore={this.props.dataStore}\n          recalculateAndRenderPortfolio={this.recalculateAndRenderPortfolio}\n        />\n        <TriggerShowVisibleLines dataStore={this.props.dataStore} rerenderVisibleLines={this.rerenderVisibleLines} />\n      </Paper>\n    );\n  }\n}\n\nconst styleAbsolut = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Percentage,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\n\nconst useStyles = makeStyles({});\n\nconst PortfolioBuilder = observer(({ dataStore }) => {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Symbol</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell id=\"annualized\" align=\"right\">\n              Annualized Performance\n            </TableCell>\n            <TableCell id=\"performance\" align=\"right\">\n              Performance since start\n            </TableCell>\n            <TableCell align=\"right\" style={{ maxWidth: \"80px\" }}>\n              Value\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataStore.symbols.map((symbolSet) => {\n            return (\n              <TableRow key={symbolSet.symbolTicker}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {symbolSet.symbolTicker}\n                </TableCell>\n                <TableCell align=\"left\">{symbolSet.name}</TableCell>\n                <TableCell align=\"right\">\n                  {performanceToPercent(symbolSet.yearlyPerformanceSincePortfolioStart)}\n                </TableCell>\n                <TableCell align=\"right\">{performanceToPercent(symbolSet.performanceSincePortfolioStart)}</TableCell>\n                <TableCell align=\"right\">\n                  {symbolSet.symbolTicker === \"Portfolio\" ? (\n                    <Typography noWrap>End: ${symbolSet.endValue.toFixed(2)}</Typography>\n                  ) : (\n                    <input\n                      type=\"text\"\n                      value={symbolSet.value}\n                      onChange={(event) => dataStore.setValueForTicker(symbolSet.symbolTicker, event.target.value)}\n                      style={{ maxWidth: \"60px\" }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell align=\"right\">\n            <Typography noWrap>Total: ${dataStore.totalValueOfSymbols}</Typography>\n          </TableCell>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(2) + \"%\";\n}\n\nexport default PortfolioBuilder;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport SelectedSymbolsBar from \"../components/SelectedSymbolsBar\";\nimport Chart from \"../components/Chart\";\nimport PortfolioBuilder from \"../components/PortfolioBuilder\";\n\nconst ChartingPage = ({ dataStore, notificationStore }) => {\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <SelectedSymbolsBar dataStore={dataStore} notificationStore={notificationStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <Chart dataStore={dataStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <PortfolioBuilder dataStore={dataStore} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ChartingPage;\n","import React from \"react\";\nimport { Paper, Typography, TextField, Link } from \"@material-ui/core\";\n\nconst SettingsPage = ({ configStore }) => {\n  return (\n    <div>\n      <Paper elevation={1} style={{ padding: \"20px\" }}>\n        <Typography variant=\"h1\" gutterBottom>\n          Settings\n        </Typography>\n\n        <Typography variant=\"h6\" gutterBottom>\n          Alpha Vantag API Token\n        </Typography>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"API-Token\"\n          variant=\"outlined\"\n          defaultValue={configStore.alphaVantage.apiToken}\n          onChange={(e) => configStore.setAlphaVantageAPITokenIDB(e.target.value)}\n        />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          Get your free token here:{\" \"}\n          <Link href=\"https://www.alphavantage.co/support/#api-key\" target=\"_blank\" rel=\"noreferrer\">\n            Alpha Vantage\n          </Link>{\" \"}\n          (Hint: try a random key)\n        </Typography>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","import { Component } from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { inject, observer } from \"mobx-react\";\nimport { autorun } from \"mobx\";\n\nclass Notifier extends Component {\n  displayed = [];\n\n  storeDisplayed = (id) => {\n    this.displayed = [...this.displayed, id];\n  };\n\n  removeDisplayedNotificationByKey(removeKey) {\n    this.displayed = this.displayed.filter((key) => removeKey !== key);\n  }\n\n  componentDidMount() {\n    autorun(() => {\n      const { notifications = [] } = this.props.notificationStore;\n\n      notifications.forEach((notification) => {\n        // Do nothing if snackbar is already displayed\n        if (this.displayed.includes(notification.key)) return;\n        // Display snackbar using notistack\n        this.props.enqueueSnackbar(notification.message, notification.options);\n        // Keep track of snackbars that we've displayed\n        this.storeDisplayed(notification.key);\n        // Dispatch action to remove snackbar from mobx store\n        this.props.notificationStore.removeSnackbar(notification.key);\n\n        // Calculate delay to remove notification from this.displayed\n        let delayUntilRemoveMs = 0;\n        if (notification.options && notification.options.autoHideDuration) {\n          delayUntilRemoveMs = notification.options.autoHideDuration + 100;\n        } else {\n          delayUntilRemoveMs = 2100;\n        }\n        // Remove notifaction from this.disyplayed after dealy\n        setTimeout(\n          function () {\n            this.removeDisplayedNotificationByKey(notification.key);\n          }.bind(this),\n          delayUntilRemoveMs\n        );\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withSnackbar(inject(\"notificationStore\")(observer(Notifier)));\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n// Content\nimport dataStore from \"./stores/DataStore\";\nimport notificationStore from \"./stores/NotificationStore\";\nimport configStore from \"./stores/ConfigStore\";\nimport ChartingPage from \"./pages/ChartingPage\";\nimport SettingsPage from \"./pages/SettingsPage\";\n\nimport Notifier from \"./components/Notifier\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [pages, setPages] = React.useState({ chartingPage: { showPage: true }, settingsPage: { showPage: false } });\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handlePageSelect = (pageToShow) => {\n    const tempPages = {};\n    for (const [page] of Object.entries(pages)) {\n      if (page === pageToShow) tempPages[page] = { showPage: true };\n      else tempPages[page] = { showPage: false };\n    }\n    setPages(tempPages);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Notifier notificationStore={notificationStore} />\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Historic-Portfolio-Analyzer (alpha)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key={\"charting-page\"} onClick={() => handlePageSelect(\"chartingPage\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Chart\"} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key={\"serttings-page\"} onClick={() => handlePageSelect(\"settingsPage\")}>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Settings\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {pages.chartingPage.showPage ? (\n          <ChartingPage dataStore={dataStore} notificationStore={notificationStore} />\n        ) : null}\n        {pages.settingsPage.showPage ? <SettingsPage configStore={configStore} /> : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Provider } from 'mobx-react';\nimport notificationStore from \"./stores/NotificationStore\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider notificationStore={notificationStore}>\n    <SnackbarProvider maxSnack={10}>\n      <App />\n    </SnackbarProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}