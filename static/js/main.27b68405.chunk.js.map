{"version":3,"sources":["stores/dbPromise.js","stores/idbPortfoliosStore.js","stores/NotificationStore.js","stores/idbConfigStore.js","stores/ConfigStore.js","services/KeyMetricsService.js","stores/KeyMetricsStore.js","stores/idbSymbolDataStore.js","services/FetchDataService.js","stores/SymbolDataStore.js","stores/helper.js","stores/PortfolioStore.js","components/SearchForSymbolInput.js","components/DialogPortfolioList.js","components/DialogPortfolioSaveForm.js","components/SelectedSymbolsBar.js","components/PortfolioBuilder.js","components/KeyMetricsDialog.js","components/KeyMetricCard.js","components/KeyMetricRow.js","components/DatePicker.js","components/ChartConfigurationCard.js","components/ChartSwitchStyle.js","components/TriggerRerenderPortfolio.js","components/TriggerShowVisibleLines.js","components/ChartPortfolioOverview.js","components/TriggerRerenderDrawdown.js","components/ChartDrawdown.js","components/TabBar.js","pages/ChartingPage.js","pages/SettingsPage.js","components/Notifier.js","App.js","reportWebVitals.js","index.js"],"names":["window","console","log","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","idbPortfoliosStore","get","key","set","val","put","delete","clear","keys","getAllKeys","getInfoOfAllSavedPortfolios","allSavedPortfolioNames","getSavedPortfolio","map","a","name","Promise","all","notificationStore","extendObservable","this","notifications","API_TOKEN_MISSING","PORTFOLIO_CALCULATING","API_TOKEN_STORED","enqueueSnackbar","action","note","push","Date","getTime","Math","random","removeSnackbar","filter","notification","idbConfigStore","fakeToken","length","result","characters","charactersLength","i","charAt","floor","configStore","alphaVantage","url","apiToken","isRunningSetup","alphaVantageConstants","SYMBOL_SEARCH","TIME_SERIES_DAILY_ADJUSTED","riskFreeRate","startSetup","makeObservable","observable","setAlphaVantageAPITokenHelper","setIsRunningSetup","setRiskFreeRate","autorun","trigger","keyMetricsStore","calculateAndSetPortfolioSharpRatio","JSON","stringify","token","setAlphaVantageAPITokenIDB","portfolioStore","addSymbol","symbolTicker","region","currency","bool","newToken","message","options","variant","autoHideDuration","newRate","KeyMetricsService","calculateAndStoreSharpRatio","timeseries","dataSetTemp","riskFreeTemp","forEach","entry","value","sharpDaily","PortfolioAnalytics","sharpeRatio","sharpAnnulized","calculatePortfolioDrawdownTimeSeries","portfolioTimeseries","values","timeseriesObj","drawdownFunction","e","time","portfolioSharpRatio","portfolioDrawdownTimeSeries","calculateAndSetPortfolioDrawdown","symbolDataStore","getSymbolTimeseriesDataFromMap","res","idbSymbolDataStore","getAdjustedCloseByTickerAndDate","date","data","getTimeSeriesDailyByTicker","getTimeSeriesDailyByTickerFormated","formateDataToChartFormat","formatAndStoreSymbolData","rawData","meta_data","symbol_ticker","date_fetched","time_zone","formatedData","symbol","time_series_daily","calculateAndStoreHistoricPortfolioPerformance","setIsCalculatingPortfolioPerformance","symbolQuantityMap","startingDate","moment","portfolioStartingDate","endDate","daysSinceStart","diff","symbolsWithoutPortfolio","symbolSet","format","startingDatePriceValue","add","endDatePriceValue","subtract","performanceSinceStart","parseFloat","setPerformanceSincePortfolioStartForTicker","yearlyPerformanceSinceStart","setAnnualizedPerformanceSincePortfolioStartForTicker","startingDateValueOfThisSymbol","getSymbolSetForTicker","quantity","endValue","setEndValueForTicker","datesToCheck","isBefore","tempSymbolDatasetMap","tempDataSet","sumOfDividends","tempSumForDate","Object","entries","dataset","dividend","setTimeseriesForTicker","then","endDatePriceValuePortfolio","startingDatePriceValuePortfolio","performanceSinceStartPortfolio","yearlyPerformanceSinceStartPortfolio","setTotalDividendPayoutForTicker","symbolData","temp","dailyInformation","String","reverse","FetchDataService","fetchDataDailyAdjustedForSymbolAlphaVantage","axios","params","function","outputsize","apikey","searchAlphaVantageByKeywords","keywords","matches","searchResultsFormated","isCalculatingPortfolioPerformance","symbolChartTimeseriesDataMap","Portfolio","addSymbolToMap","removeSymbolFromMap","resetStore","dataForSymbol","symbolToDelete","defaultPortfolio","isVisible","performanceSincePortfolioStart","annualizedPerformanceSincePortfolioStart","color","dateFetched","chartColors","nextAvailableColorValue","availableColorValue","index","chartColorsForSeries","element","isBegingUsed","colorValue","removeColorInUse","PortfolioStore","symbols","portfolioBuilderSetting","triggerRerenderPortfolio","triggerRerenderVisibleLines","triggerRecalculatePortfolioTimeout","areTriggersEnabled","toggleSymbolVisibility","setVisibilityForHideOther","addSymbolFromSavedPortfolio","removeSelectedSymbol","setValueForTicker","setTriggerRerenderPortfolio","setTriggerRerenderVisibleLines","setSharpRatioForTicker","setPortfolioStartingDate","setPortfolioBuilderSetting","setAreTriggersEnabled","loadSavedPortfolio","totalValueOfSymbols","computed","listOfSymbolTickers","symbolPortfolioOnly","symbolsSortedByTickerPortfolioFirst","symbolsSortedByTickerWithoutPortfolio","symbolsSortedByPortfolioBuilderSetting","trigger2","debouncePortfolioRecalculation","clearTimeout","timeout","setTimeout","symbolSetSearchResult","totalDividendPayout","getMetaDataAndStoreIt","symbolTickerToDelete","deleteDataSetForSymbol","symbolTickerToRemove","deleteDataSet","changedSymbolbyTicker","symbolToShow","changedSymbolByTicker","newVal","getMetaDataForSymbol","metaData","setDateFetchedForTicker","symbolTickerToReload","doesExist","find","creationDate","toJS","portfolioName","savedPortfolio","reduce","pv","slice","sort","compareSymbolSetsByTickerPortfolioFirst","compareSymbolSetsByTicker","compareSymbolSetsByName","compareSymbolSetsByPerformanceAnnulized","compareSymbolSetsByPerformanceSinceStart","compareSymbolSetsByValue","b","filterOptions","createFilterOptions","matchFrom","option","SearchForSymbolInput","observer","React","useState","searchOptions","setSearchOptions","isLoadingSearch","setIsLoadingSearch","searchTimeout","setSearchTimeout","setValue","handleValueChange","handleSearch","handleSearchSelect","symbolSearchResult","doesSymbolExist","Autocomplete","id","loading","onChange","event","renderOption","Typography","renderInput","TextField","label","target","style","minWidth","paddingRight","DialogPortfolioList","onClose","selectedValue","open","portfolios","setPortfolios","useEffect","getPortfolios","getListOfAllSavedPortfolioNames","_portfolios","Dialog","aria-labelledby","DialogTitle","List","storedPortfolio","ListItem","button","onClick","ListItemAvatar","Avatar","ListItemText","primary","secondary","DialogPortfolioSaveForm","setPortfolioName","handleSavePortfolio","saveCurrentPortfolio","DialogContent","DialogContentText","autoFocus","margin","type","fullWidth","DialogActions","Button","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","chip","divider","backgroundColor","width","height","SelectedSymbolsBar","classes","anchorEl","setAnchorEl","isNormalMenuOpen","setIsNormalMenuOpen","isPortfolioMenuOpen","setIsPortfolioMenuOpen","menuSelectedSymbolSet","setMenuSelectedSymbolSet","openDialogPortfolioList","setOpenDialogPortfolioList","selectedPortfolioValue","setSelectedPortfolioValue","openDialogPortfolioSaveForm","setOpenDialogPortfolioSaveForm","handleOnlyShow","symbolTickerToShow","handleClose","handlePortfolioClose","isBadgeInvisible","today","isoWeekday","getBadgeContent","Paper","className","Grid","container","alignItems","item","xs","IconButton","component","direction","justify","Badge","overlap","badgeContent","invisible","Chip","symbolTickerToHide","onDelete","currentTarget","handleMenuClick","handlePortfolioOpen","deleteIcon","clickable","ChipMenuPortfolio","keepMounted","MenuItem","ListItemIcon","fontSize","noWrap","ChipMenuNormal","reloadDataFor","removeAndDeleteSymbol","tabellCellClickable","cursor","performanceToPercent","performance","toFixed","PortfolioBuilder","getItemNumber","TableContainer","Table","table","aria-label","size","TableHead","TableRow","TableCell","align","maxWidth","TableBody","scope","KeyMetricsDialog","dialogTitle","dialogText","flexGrow","paper","palette","text","grid","title","KeyMetricCard","titel","description","showPercent","showProgress","setOpen","handleClickOpen","alignSelf","CircularProgress","textAlign","KeyIndicatorRow","Link","href","rel","DatePicker","utils","MomentUtils","disableToolbar","dateString","exec","KeyboardButtonProps","gridItem","marks","valuetext","ChartConfigurationCard","elevation","gutterBottom","Slider","defaultValue","getAriaValueText","min","max","step","valueLabelDisplay","onChangeCommitted","ChartSwitchStyle","selectedChartStyleType","switchStyle","checkedA","state","setState","FormGroup","row","FormControlLabel","control","Switch","checked","TriggerRerenderPortfolio","rerenderPortfolio","TriggerShowVisibleLines","rerenderVisibleLines","ChartPortfolioOverview","props","myRef","createRef","chart","lineSeriesObj","bind","createGraphForSelectedSymbols","addLineSeriesData","renderChart","current","firstChild","removeChild","createChart","stylePercent","styleAbsolut","applyOptions","tempListOfAllSymbols","lineSeries","includes","removeSeries","tempLineSeries","setData","addLineSeries","series","refreshData","CalculatingProgress","ref","Component","LinearProgress","rightPriceScale","scaleMargins","top","bottom","mode","PriceScaleMode","Normal","borderColor","Percentage","TriggerRerenderDrawdown","rerenderDrawdown","ChartDrawdown","drawdownChartRef","drawdownLineSeries","addDrawdownLineSeries","priceLineVisible","priceFormat","minMove","formatter","TabPanel","children","other","role","hidden","Box","p","a11yProps","background","TabBar","Tabs","newValue","indicatorColor","textColor","centered","Tab","ChartingPage","KeyMetricRow","SettingsPage","apiTimeout","setAPITimeout","newAPIValue","handleAPIValueChange","Notifier","displayed","storeDisplayed","removeKey","delayUntilRemoveMs","removeDisplayedNotificationByKey","withSnackbar","inject","drawerWidth","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","App","useTheme","chartingPage","showPage","settingsPage","pages","setPages","handlePageSelect","pageToShow","tempPages","page","CssBaseline","AppBar","position","clsx","Toolbar","edge","Drawer","Divider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.27b68405.chunk.js","sourcesContent":["import { openDB } from \"idb\";\n\nif (!(\"indexedDB\" in window)) {\n  console.log(\"This browser doesn't support IndexedDB\");\n}\n\nconst dbPromise = openDB(\"historic-portfolio-analyzer\", 3, {\n  upgrade(db) {\n    if (!db.objectStoreNames.contains(\"symbolDataStore\")) {\n      console.log(\"Creating new symbolDataStore\");\n      db.createObjectStore(\"symbolDataStore\", {\n        keyPath: \"symbol\",\n        autoIncrement: false,\n      });\n    }\n    if (!db.objectStoreNames.contains(\"configStore\")) {\n      console.log(\"Creating new configStore\");\n      db.createObjectStore(\"configStore\");\n    }\n    if (!db.objectStoreNames.contains(\"portfoliosStore\")) {\n      console.log(\"Creating new portfoliosStore\");\n      db.createObjectStore(\"portfoliosStore\", {\n        keyPath: \"name\",\n        autoIncrement: false,\n      });\n    }\n  },\n});\n\nexport default dbPromise;\n","import dbPromise from \"./dbPromise\";\n\nconst idbPortfoliosStore = {\n  async get(key) {\n    return (await dbPromise).get(\"portfoliosStore\", key);\n  },\n  async set(val) {\n    return (await dbPromise).put(\"portfoliosStore\", val);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"portfoliosStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"portfoliosStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"portfoliosStore\");\n  },\n  async getInfoOfAllSavedPortfolios() {\n    const allSavedPortfolioNames = await this.keys();\n    const getSavedPortfolio = allSavedPortfolioNames.map(async (name) => {\n      return await this.get(name);\n    });\n    return Promise.all(getSavedPortfolio);\n  },\n};\n\nexport default idbPortfoliosStore;\n","import { action, extendObservable } from \"mobx\";\n\nconst NotificationStore = function () {\n  extendObservable(this, {\n    notifications: [],\n    keys: {\n      API_TOKEN_MISSING: \"API_TOKEN_MISSING\",\n      PORTFOLIO_CALCULATING: \"PORTFOLIO_CALCULATING\",\n      API_TOKEN_STORED: \"API_TOKEN_STORED\",\n    },\n\n    enqueueSnackbar: action((note) => {\n      this.notifications.push({\n        key: note.key ? note.key : new Date().getTime() + Math.random(),\n        ...note,\n      });\n    }),\n\n    removeSnackbar: action((key) => {\n      this.notifications = this.notifications.filter((notification) => notification.key !== key);\n    }),\n  });\n};\n\nconst notificationStore = new NotificationStore();\nexport default notificationStore;\n","import dbPromise from \"./dbPromise\";\n\nconst idbConfigStore = {\n  async get(key) {\n    return (await dbPromise).get(\"configStore\", key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put(\"configStore\", val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"configStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"configStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"configStore\");\n  },\n};\n\nexport default idbConfigStore;\n","import { makeObservable, observable, action, autorun } from \"mobx\";\nimport idbConfigStore from \"./idbConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport portfolioStore from \"./PortfolioStore\";\nimport keyMetricsStore from \"./KeyMetricsStore\";\n\nclass ConfigStore {\n  alphaVantage = { url: \"https://www.alphavantage.co/query\", apiToken: \"\" };\n  isRunningSetup = true;\n  alphaVantageConstants = { SYMBOL_SEARCH: \"SYMBOL_SEARCH\", TIME_SERIES_DAILY_ADJUSTED: \"TIME_SERIES_DAILY_ADJUSTED\" };\n  riskFreeRate = 1;\n\n  constructor() {\n    this.startSetup();\n\n    makeObservable(this, {\n      alphaVantage: observable,\n      isRunningSetup: observable,\n      riskFreeRate: observable,\n      setAlphaVantageAPITokenHelper: action,\n      setIsRunningSetup: action,\n      setRiskFreeRate: action,\n    });\n\n    autorun(() => {\n      const trigger = this.riskFreeRate;\n\n      if (!this.isRunningSetup) keyMetricsStore.calculateAndSetPortfolioSharpRatio();\n      console.log(\"Autorun: triggering sharp ratio rercalculation: \" + JSON.stringify(trigger));\n    });\n  }\n  // isRunningSetup operations\n  async startSetup() {\n    console.log(\"startSetup\");\n    // Load stored API token from idbConfigStore or create a Token\n    const token = await idbConfigStore.get(\"alphaVantagAPIToken\");\n    if (token) this.setAlphaVantageAPITokenHelper(token);\n    else {\n      await this.setAlphaVantageAPITokenIDB(fakeToken(16));\n    }\n\n    // Add default symbols\n    // If no deafult symbols added then portfolioStore trigger have to be called manually\n    portfolioStore.addSymbol({ symbolTicker: \"AAPL\", name: \"Apple Inc.\", region: \"testRegion\", currency: \"USD\" });\n\n    this.setIsRunningSetup(false);\n  }\n\n  setIsRunningSetup(bool) {\n    this.isRunningSetup = bool;\n  }\n\n  // alphaVantage operations\n  // Store new alphaVantagAPIToken to idbConfigStore then store in mobx store\n  async setAlphaVantageAPITokenIDB(newToken) {\n    await idbConfigStore.set(\"alphaVantagAPIToken\", newToken);\n    notificationStore.enqueueSnackbar({\n      message: `Stored new API-Token: ${newToken}`,\n      options: {\n        variant: \"success\",\n        autoHideDuration: 1000,\n      },\n      key: notificationStore.keys.API_TOKEN_STORED,\n    });\n    this.setAlphaVantageAPITokenHelper(newToken);\n  }\n\n  setAlphaVantageAPITokenHelper(newToken) {\n    console.log(\"setAlphaVantageAPITokenHelper: \" + newToken);\n    this.alphaVantage.apiToken = newToken;\n  }\n\n  // riskFreeRate operations\n  setRiskFreeRate(newRate) {\n    console.log(\"setRiskFreeRate: \" + newRate);\n    this.riskFreeRate = newRate;\n  }\n}\n\nfunction fakeToken(length) {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst configStore = new ConfigStore();\nexport default configStore;\n","import configStore from \"../stores/ConfigStore\";\nimport PortfolioAnalytics from \"portfolio-analytics\";\n\nconst KeyMetricsService = {\n  async calculateAndStoreSharpRatio(timeseries) {\n    const riskFreeRate = configStore.riskFreeRate / 100 + 1;\n\n    // Create lists for PortfolioAnalytics.sharpRatio()\n    let dataSetTemp = [];\n    let riskFreeTemp = [];\n    timeseries.forEach((entry, i) => {\n      dataSetTemp.push(entry.value);\n      riskFreeTemp.push(riskFreeRate ** ((1 / 252) * i));\n    });\n\n    const sharpDaily = PortfolioAnalytics.sharpeRatio(dataSetTemp, riskFreeTemp);\n    // Multiply sharpDaily ratio by square root of trading days in a year\n    // Assumption: 252 trading days in a regular year\n    const sharpAnnulized = sharpDaily * 252 ** 0.5;\n    return sharpAnnulized;\n  },\n  async calculatePortfolioDrawdownTimeSeries(portfolioTimeseries) {\n    let values = portfolioTimeseries.map((timeseriesObj) => timeseriesObj.value);\n\n    const drawdownFunction = PortfolioAnalytics.drawdownFunction(values);\n\n    let result = [];\n    portfolioTimeseries.forEach((e, i) => result.push({ time: e.time, value: drawdownFunction[i] * -100 }));\n\n    return result;\n  },\n};\nexport default KeyMetricsService;\n","import { makeObservable, observable, action } from \"mobx\";\nimport symbolDataStore from \"./SymbolDataStore\";\nimport KeyMetricsService from \"../services/KeyMetricsService\";\n\nclass KeyMetricsStore {\n  portfolioSharpRatio = 0;\n  portfolioDrawdownTimeSeries = [];\n\n  constructor() {\n    makeObservable(this, {\n      portfolioSharpRatio: observable,\n      calculateAndSetPortfolioSharpRatio: action,\n      portfolioDrawdownTimeSeries: observable,\n      calculateAndSetPortfolioDrawdown: action,\n    });\n  }\n\n  async calculateAndSetPortfolioSharpRatio() {\n    this.portfolioSharpRatio = 0;\n\n    const timeseries = await symbolDataStore.getSymbolTimeseriesDataFromMap(\"Portfolio\");\n\n    if (timeseries.length !== 0) {\n      const res = await KeyMetricsService.calculateAndStoreSharpRatio(timeseries);\n      this.portfolioSharpRatio = res;\n    } else {\n      this.portfolioSharpRatio = 0;\n    }\n  }\n\n  async calculateAndSetPortfolioDrawdown(portfolioTimeseries) {\n    this.portfolioDrawdownTimeSeries = [];\n    this.portfolioDrawdownTimeSeries = await KeyMetricsService.calculatePortfolioDrawdownTimeSeries(\n      portfolioTimeseries\n    );\n  }\n}\n\nconst keyMetricsStore = new KeyMetricsStore();\nexport default keyMetricsStore;\n","import dbPromise from \"./dbPromise\";\nimport portfolioStore from \"./PortfolioStore\";\nimport moment from \"moment\";\nimport notificationStore from \"./NotificationStore\";\nimport symbolDataStore from \"./SymbolDataStore\";\nimport keyMetricsStore from \"./KeyMetricsStore\";\n\n/**\n * primary key: symbol\n * Format of object stored (example):\n{\n  symbol: \"AAPL\", \n  meta_data: {\n  symbol_ticker: \"AAPL\"\n  data_fetched: \"2020-11-18\",\n  time_zone: \"US/Eastern\",\n  },\n  time_series_daily:{\n    \"2020-11-10\": {...}\n  } \n}\n */\nconst idbSymbolDataStore = {\n  async get(key) {\n    return (await dbPromise).get(\"symbolDataStore\", key);\n  },\n  async set(val) {\n    return (await dbPromise).put(\"symbolDataStore\", val);\n  },\n  async delete(key) {\n    return (await dbPromise).delete(\"symbolDataStore\", key);\n  },\n  async clear() {\n    return (await dbPromise).clear(\"symbolDataStore\");\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys(\"symbolDataStore\");\n  },\n  async getAdjustedCloseByTickerAndDate(key, date) {\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data) {\n      if (data[\"time_series_daily\"][date]) return data[\"time_series_daily\"][date][\"5. adjusted close\"];\n    }\n    return false;\n  },\n  async getTimeSeriesDailyByTicker(key) {\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data && data[\"time_series_daily\"]) return data[\"time_series_daily\"];\n    return false;\n  },\n  async getTimeSeriesDailyByTickerFormated(key) {\n    console.log(\"getTimeSeriesDailyByTickerFormated: \" + key);\n    const data = await this.get(key);\n    if (data && \"time_series_daily\" in data && data[\"time_series_daily\"]) return formateDataToChartFormat(data);\n    return false;\n  },\n  async formatAndStoreSymbolData(symbolTicker, rawData) {\n    let meta_data = {\n      symbol_ticker: rawData[\"Meta Data\"][\"2. Symbol\"],\n      date_fetched: rawData[\"Meta Data\"][\"3. Last Refreshed\"],\n      time_zone: rawData[\"Meta Data\"][\"5. Time Zone\"],\n    };\n\n    let formatedData = {\n      symbol: symbolTicker,\n      meta_data: meta_data,\n      time_series_daily: rawData[\"Time Series (Daily)\"],\n    };\n    await this.set(formatedData);\n  },\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    console.log(\"calculateAndStoreHistoricPortfolioPerformance\");\n    notificationStore.enqueueSnackbar({\n      message: `Calculating Portfolio value`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 2000,\n      },\n      key: notificationStore.keys.PORTFOLIO_CALCULATING,\n    });\n    symbolDataStore.setIsCalculatingPortfolioPerformance(true);\n\n    //  Calculate for each asset the quantity at portfolio start and the performance since\n    console.log(\"Portfolio - calculating quantity\");\n    let symbolQuantityMap = {};\n    let startingDate = moment(portfolioStore.portfolioStartingDate);\n    let endDate = moment();\n    const daysSinceStart = endDate.diff(startingDate, \"days\") + 1;\n    await Promise.all(\n      portfolioStore.symbolsWithoutPortfolio.map(async (symbolSet) => {\n        // Get price of asset for the portfolio starting date\n        let startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          startingDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!startingDatePriceValue) {\n          startingDate.add(1, \"days\");\n          startingDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            startingDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Get price of asset for the portfolio end date\n        let endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n          symbolSet.symbolTicker,\n          endDate.format(\"YYYY-MM-DD\")\n        );\n\n        while (!endDatePriceValue) {\n          endDate.subtract(1, \"days\");\n          endDatePriceValue = await idbSymbolDataStore.getAdjustedCloseByTickerAndDate(\n            symbolSet.symbolTicker,\n            endDate.format(\"YYYY-MM-DD\")\n          );\n        }\n\n        // Calculate performanceSinceStart for this symbol and store the value\n        const performanceSinceStart = parseFloat(endDatePriceValue) / parseFloat(startingDatePriceValue) - 1;\n        portfolioStore.setPerformanceSincePortfolioStartForTicker(symbolSet.symbolTicker, performanceSinceStart);\n        // Calculate yearlyPerformanceSinceStart for this symbol and store the value\n        const yearlyPerformanceSinceStart = performanceSinceStart * (365 / daysSinceStart);\n        portfolioStore.setAnnualizedPerformanceSincePortfolioStartForTicker(\n          symbolSet.symbolTicker,\n          yearlyPerformanceSinceStart\n        );\n\n        // Calculate quantity for this symbol\n        const startingDateValueOfThisSymbol = portfolioStore.getSymbolSetForTicker(symbolSet.symbolTicker)[\"value\"];\n        const quantity = parseFloat(startingDateValueOfThisSymbol) / parseFloat(startingDatePriceValue);\n\n        symbolQuantityMap[symbolSet.symbolTicker] = quantity;\n\n        const endValue = endDatePriceValue * quantity;\n        portfolioStore.setEndValueForTicker(symbolSet.symbolTicker, endValue);\n      })\n    );\n\n    // Generate a list of all days between portfolioStore.portfolioStartingDate and today (including both days)\n    console.log(\"Portfolio - list of dates\");\n    let datesToCheck = [];\n    let date = moment(portfolioStore.portfolioStartingDate);\n    while (date.isBefore()) {\n      datesToCheck.push(date.format(\"YYYY-MM-DD\"));\n      date.add(1, \"days\");\n    }\n\n    // Iterate through all days and calculate the total value\n    console.log(\"Portfolio - calculating for each day\");\n    let tempSymbolDatasetMap = {};\n    await Promise.all(\n      portfolioStore.symbolsWithoutPortfolio.map(async (symbolSet) => {\n        let tempDataSet = await idbSymbolDataStore.getTimeSeriesDailyByTicker(symbolSet.symbolTicker);\n        tempSymbolDatasetMap[symbolSet.symbolTicker] = tempDataSet;\n      })\n    );\n\n    let result = [];\n    let sumOfDividends = 0;\n    datesToCheck.forEach((date) => {\n      let tempSumForDate = 0;\n      for (const [symbolTicker, dataset] of Object.entries(tempSymbolDatasetMap)) {\n        if (dataset && !(date in dataset)) return;\n        const dividend = dataset[date][\"7. dividend amount\"];\n        sumOfDividends += dividend * symbolQuantityMap[symbolTicker];\n        const stockValue = dataset[date][\"5. adjusted close\"];\n        tempSumForDate += stockValue * symbolQuantityMap[symbolTicker];\n      }\n      if (tempSumForDate) result.push({ time: date, value: tempSumForDate });\n    });\n\n    symbolDataStore.setTimeseriesForTicker(\"Portfolio\", result).then((res) => {\n      if (result.length !== 0) {\n        const endDatePriceValuePortfolio = result[0].value;\n        const startingDatePriceValuePortfolio = result[result.length - 1].value;\n        // Calculate performanceSinceStart for portfolio and store the value\n        const performanceSinceStartPortfolio =\n          parseFloat(startingDatePriceValuePortfolio) / parseFloat(endDatePriceValuePortfolio) - 1;\n        portfolioStore.setPerformanceSincePortfolioStartForTicker(\"Portfolio\", performanceSinceStartPortfolio);\n        // Calculate yearlyPerformanceSinceStart for portfolio and store the value\n        const yearlyPerformanceSinceStartPortfolio = performanceSinceStartPortfolio * (365 / daysSinceStart);\n        portfolioStore.setAnnualizedPerformanceSincePortfolioStartForTicker(\n          \"Portfolio\",\n          yearlyPerformanceSinceStartPortfolio\n        );\n\n        portfolioStore.setTotalDividendPayoutForTicker(\"Portfolio\", sumOfDividends);\n        portfolioStore.setEndValueForTicker(\"Portfolio\", startingDatePriceValuePortfolio);\n\n        // Calculate key metrics\n        keyMetricsStore.calculateAndSetPortfolioSharpRatio();\n\n        // Calculate drawdown function\n        keyMetricsStore.calculateAndSetPortfolioDrawdown(result);\n      }\n    });\n\n    symbolDataStore.setIsCalculatingPortfolioPerformance(false);\n    return result;\n  },\n};\n\nconst formateDataToChartFormat = (symbolData) => {\n  let temp = [];\n  for (const [key, dailyInformation] of Object.entries(symbolData[\"time_series_daily\"])) {\n    temp.push({ time: String(key), value: parseFloat(dailyInformation[\"5. adjusted close\"]) });\n  }\n  return temp.reverse();\n};\n\nexport default idbSymbolDataStore;\n","import axios from \"axios\";\nimport idbSymbolDataStore from \"../stores/idbSymbolDataStore\";\nimport notificationStore from \"../stores/NotificationStore\";\nimport configStore from \"../stores/ConfigStore\";\n\nconst FetchDataService = {\n  async fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker) {\n    console.log(\"fetchDataDailyAdjustedForSymbolAlphaVantage\");\n    console.log(`Fetching data for ${symbolTicker}`);\n    notificationStore.enqueueSnackbar({\n      message: `Fetching data for: ${symbolTicker}`,\n      options: {\n        variant: \"info\",\n        autoHideDuration: 1500,\n      },\n      key: `FETCHING-${symbolTicker}`,\n    });\n    try {\n      //  Call API\n      const res = await axios.get(configStore.alphaVantage.url, {\n        params: {\n          function: configStore.alphaVantageConstants.TIME_SERIES_DAILY_ADJUSTED,\n          symbol: symbolTicker,\n          outputsize: \"full\",\n          apikey: configStore.alphaVantage.apiToken,\n        },\n      });\n      // Failed request\n      if (\"Note\" in res.data) {\n        console.log(\"Failed to fetch for: \" + symbolTicker);\n        notificationStore.enqueueSnackbar({\n          message: `Failed to fetch data for: ${symbolTicker}`,\n          options: {\n            variant: \"warning\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-FAILED-${symbolTicker}`,\n        });\n        return false;\n      } else {\n        //  Store request results\n        // TODO check if received data was valid\n        await idbSymbolDataStore.formatAndStoreSymbolData(symbolTicker, res.data);\n        notificationStore.enqueueSnackbar({\n          message: `Successfully fetched data for: ${symbolTicker}`,\n          options: {\n            variant: \"success\",\n            autoHideDuration: 1500,\n          },\n          key: `FETCHING-SUCCESS-${symbolTicker}`,\n        });\n        return symbolTicker;\n      }\n    } catch (error) {\n      console.log(Object.keys(error), error.message);\n    }\n  },\n  async searchAlphaVantageByKeywords(keywords) {\n    console.log(\"searchAlphaVantageByKeywords: \" + keywords);\n    const res = await axios.get(configStore.alphaVantage.url, {\n      params: {\n        function: configStore.alphaVantageConstants.SYMBOL_SEARCH,\n        keywords: keywords,\n        apikey: configStore.alphaVantage.apiToken,\n      },\n    });\n    if (\"Note\" in res.data) {\n      console.log(\"Failed to search for:\" + keywords);\n      notificationStore.enqueueSnackbar({\n        message: `Failed to search for: ${keywords}`,\n        options: {\n          variant: \"warning\",\n        },\n      });\n      return false;\n    } else {\n      const matches = res.data[\"bestMatches\"];\n      if (!matches) return [];\n      const searchResultsFormated = matches.map((result) => ({\n        symbolTicker: result[\"1. symbol\"],\n        name: result[\"2. name\"],\n        region: result[\"4. region\"],\n        currency: result[\"8. currency\"],\n      }));\n      return searchResultsFormated;\n    }\n  },\n};\n\nexport default FetchDataService;\n","import { makeObservable, observable, action } from \"mobx\";\nimport idbSymbolDataStore from \"./idbSymbolDataStore\";\nimport configStore from \"./ConfigStore\";\nimport notificationStore from \"./NotificationStore\";\nimport FetchDataService from \"../services/FetchDataService\";\nclass SymbolDataStore {\n  isCalculatingPortfolioPerformance = false;\n  symbolChartTimeseriesDataMap = { Portfolio: [] };\n\n  constructor() {\n    makeObservable(this, {\n      isCalculatingPortfolioPerformance: observable,\n      symbolChartTimeseriesDataMap: observable,\n      setIsCalculatingPortfolioPerformance: action,\n      addSymbolToMap: action,\n      removeSymbolFromMap: action,\n      resetStore: action,\n      setTimeseriesForTicker: action,\n    });\n  }\n\n  setIsCalculatingPortfolioPerformance(bool) {\n    this.isCalculatingPortfolioPerformance = bool;\n  }\n\n  async addSymbolToMap(symbolTicker) {\n    console.log(\"addSymbolToMap: \" + symbolTicker);\n    if (symbolTicker === \"Portfolio\") return false;\n\n    const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n    if (dataForSymbol) {\n      this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n    } else {\n      // Check if api token is set\n      if (configStore.alphaVantage.apiToken) {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker);\n        const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n        if (dataForSymbol) this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n      } else {\n        notificationStore.enqueueSnackbar({\n          message: `Please enter an API key on the Settings Page`,\n          options: {\n            variant: \"error\",\n            autoHideDuration: 2500,\n          },\n          key: notificationStore.keys.API_TOKEN_MISSING,\n        });\n      }\n    }\n  }\n\n  async removeSymbolFromMap(symbolTicker) {\n    delete this.symbolChartTimeseriesDataMap[symbolTicker];\n  }\n\n  async deleteDataSet(symbolToDelete) {\n    await idbSymbolDataStore.delete(symbolToDelete);\n  }\n\n  async resetStore() {\n    this.isCalculatingPortfolioPerformance = false;\n    this.symbolChartTimeseriesDataMap = { Portfolio: [] };\n  }\n\n  async getSymbolTimeseriesDataFromMap(symbolTicker) {\n    console.log(\"getSymbolTimeseriesDataFromMap: \" + symbolTicker);\n    if (this.symbolChartTimeseriesDataMap[symbolTicker]) return this.symbolChartTimeseriesDataMap[symbolTicker];\n    else {\n      if (symbolTicker === \"Portfolio\") {\n        return;\n      } else {\n        await FetchDataService.fetchDataDailyAdjustedForSymbolAlphaVantage(symbolTicker);\n        const dataForSymbol = await idbSymbolDataStore.getTimeSeriesDailyByTickerFormated(symbolTicker);\n        if (dataForSymbol) this.setTimeseriesForTicker(symbolTicker, dataForSymbol);\n        return dataForSymbol;\n      }\n    }\n  }\n\n  async setTimeseriesForTicker(symbolTicker, timeseries) {\n    console.log(\"setTimeseriesForTicker: \" + symbolTicker);\n    this.symbolChartTimeseriesDataMap[symbolTicker] = timeseries;\n  }\n\n  async calculateAndStoreHistoricPortfolioPerformance() {\n    return await idbSymbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n  }\n\n  async getMetaDataForSymbol(symbolTicker) {\n    const data = await idbSymbolDataStore.get(symbolTicker);\n    return data ? data.meta_data : false;\n  }\n}\n\nconst symbolDataStore = new SymbolDataStore();\nexport default symbolDataStore;\n","export const defaultPortfolio = {\n  symbolTicker: \"Portfolio\",\n  name: \"Portfolio\",\n  isVisible: true,\n  value: 0,\n  currency: \"USD\",\n  performanceSincePortfolioStart: 1,\n  annualizedPerformanceSincePortfolioStart: 1,\n  color: \"#3f51b5\",\n  endValue: 0,\n  dateFetched: \"-\",\n};\n\nexport const chartColors = {\n  nextAvailableColorValue() {\n    let availableColorValue = null;\n    for (let index = 0; index < this.chartColorsForSeries.length; index++) {\n      const element = this.chartColorsForSeries[index];\n      if (!element.isBegingUsed) {\n        availableColorValue = element.colorValue;\n        element.isBegingUsed = true;\n        break;\n      }\n    }\n    return availableColorValue;\n  },\n  removeColorInUse(colorValue) {\n    for (let index = 0; index < this.chartColorsForSeries.length; index++) {\n      const element = this.chartColorsForSeries[index];\n      if (element.colorValue === colorValue) {\n        element.isBegingUsed = false;\n        break;\n      }\n    }\n  },\n  chartColorsForSeries: [\n    { colorValue: \"#2196f3\", isBegingUsed: false },\n    { colorValue: \"#03a9f4\", isBegingUsed: false },\n    { colorValue: \"#00bcd4\", isBegingUsed: false },\n    { colorValue: \"#009688\", isBegingUsed: false },\n    { colorValue: \"#4caf50\", isBegingUsed: false },\n    { colorValue: \"#8bc34a\", isBegingUsed: false },\n    { colorValue: \"#cddc39\", isBegingUsed: false },\n    { colorValue: \"#ffeb3b\", isBegingUsed: false },\n    { colorValue: \"#ffc107\", isBegingUsed: false },\n    { colorValue: \"#ff9800\", isBegingUsed: false },\n    { colorValue: \"#ff5722\", isBegingUsed: false },\n    { colorValue: \"#f44336\", isBegingUsed: false },\n    { colorValue: \"#e91e63\", isBegingUsed: false },\n    { colorValue: \"#9c27b0\", isBegingUsed: false },\n    { colorValue: \"#673ab7\", isBegingUsed: false },\n\n    { colorValue: \"#2c387e\", isBegingUsed: false },\n    { colorValue: \"#1769aa\", isBegingUsed: false },\n    { colorValue: \"#0276aa\", isBegingUsed: false },\n    { colorValue: \"#008394\", isBegingUsed: false },\n    { colorValue: \"#00695f\", isBegingUsed: false },\n    { colorValue: \"#357a38\", isBegingUsed: false },\n    { colorValue: \"#618833\", isBegingUsed: false },\n    { colorValue: \"#8f9a27\", isBegingUsed: false },\n    { colorValue: \"#b2a429\", isBegingUsed: false },\n    { colorValue: \"#b28704\", isBegingUsed: false },\n    { colorValue: \"#b26a00\", isBegingUsed: false },\n    { colorValue: \"#b23c17\", isBegingUsed: false },\n    { colorValue: \"#aa2e25\", isBegingUsed: false },\n    { colorValue: \"#a31545\", isBegingUsed: false },\n    { colorValue: \"#6d1b7b\", isBegingUsed: false },\n    { colorValue: \"#482880\", isBegingUsed: false },\n\n    { colorValue: \"#6573c3\", isBegingUsed: false },\n    { colorValue: \"#4dabf5\", isBegingUsed: false },\n    { colorValue: \"#35baf6\", isBegingUsed: false },\n    { colorValue: \"#33c9dc\", isBegingUsed: false },\n    { colorValue: \"#33ab9f\", isBegingUsed: false },\n    { colorValue: \"#6fbf73\", isBegingUsed: false },\n    { colorValue: \"#a2cf6e\", isBegingUsed: false },\n    { colorValue: \"#d7e360\", isBegingUsed: false },\n    { colorValue: \"#ffef62\", isBegingUsed: false },\n    { colorValue: \"#ffcd38\", isBegingUsed: false },\n    { colorValue: \"#ffac33\", isBegingUsed: false },\n    { colorValue: \"#ff784e\", isBegingUsed: false },\n    { colorValue: \"#f6685e\", isBegingUsed: false },\n    { colorValue: \"#ed4b82\", isBegingUsed: false },\n    { colorValue: \"#af52bf\", isBegingUsed: false },\n    { colorValue: \"#8561c5\", isBegingUsed: false },\n  ],\n};\n","import { makeObservable, observable, action, computed, autorun, toJS } from \"mobx\";\nimport moment from \"moment\";\nimport idbPortfoliosStore from \"./idbPortfoliosStore\";\nimport symbolDataStore from \"./SymbolDataStore\";\nimport { defaultPortfolio, chartColors } from \"./helper\";\n\nclass PortfolioStore {\n  symbols = [defaultPortfolio];\n  portfolioStartingDate = \"\";\n  portfolioBuilderSetting = \"ticker\"; // \"ticker\", \"name\", \"value\", \"performance_since_start\", \"performance_annualized\"\n  triggerRerenderPortfolio = false;\n  triggerRerenderVisibleLines = false;\n  triggerRecalculatePortfolioTimeout = null;\n  areTriggersEnabled = true;\n\n  constructor() {\n    makeObservable(this, {\n      symbols: observable,\n      portfolioBuilderSetting: observable,\n      triggerRerenderPortfolio: observable,\n      triggerRerenderVisibleLines: observable,\n      portfolioStartingDate: observable,\n      areTriggersEnabled: observable,\n      toggleSymbolVisibility: action,\n      setVisibilityForHideOther: action,\n      addSymbol: action,\n      addSymbolFromSavedPortfolio: action,\n      resetStore: action,\n      removeSelectedSymbol: action,\n      setValueForTicker: action,\n      setPerformanceSincePortfolioStartForTicker: action,\n      setAnnualizedPerformanceSincePortfolioStartForTicker: action,\n      setEndValueForTicker: action,\n      setTriggerRerenderPortfolio: action,\n      setTriggerRerenderVisibleLines: action,\n      setTotalDividendPayoutForTicker: action,\n      setSharpRatioForTicker: action,\n      setPortfolioStartingDate: action,\n      setPortfolioBuilderSetting: action,\n      setAreTriggersEnabled: action,\n      loadSavedPortfolio: action,\n      totalValueOfSymbols: computed,\n      listOfSymbolTickers: computed,\n      symbolsWithoutPortfolio: computed,\n      symbolPortfolioOnly: computed,\n      symbolsSortedByTickerPortfolioFirst: computed,\n      symbolsSortedByTickerWithoutPortfolio: computed,\n      symbolsSortedByPortfolioBuilderSetting: computed,\n    });\n\n    this.portfolioStartingDate = moment().subtract(1, \"years\").format(\"YYYY-MM-DD\");\n\n    autorun(() => {\n      if (this.areTriggersEnabled) {\n        // triggerRerenderPortfolio\n        const trigger = this.portfolioStartingDate;\n        const trigger2 = this.totalValueOfSymbols;\n\n        // Debounce\n        const debouncePortfolioRecalculation = async () => {\n          console.log(\n            \"Autorun: triggering portfolio rercalculation\" + JSON.stringify(trigger) + JSON.stringify(trigger2)\n          );\n          await symbolDataStore.calculateAndStoreHistoricPortfolioPerformance();\n          this.setTriggerRerenderPortfolio(true);\n        };\n\n        //  Check if timeout exists, if so clear and start a new one\n        if (this.triggerRecalculatePortfolioTimeout) clearTimeout(this.triggerRecalculatePortfolioTimeout);\n        const timeout = setTimeout(async () => {\n          await debouncePortfolioRecalculation();\n        }, 500);\n        this.triggerRecalculatePortfolioTimeout = timeout;\n      }\n    });\n  }\n\n  // symbols operations\n  async addSymbol(symbolSetSearchResult) {\n    if (!symbolSetSearchResult || !symbolSetSearchResult.symbolTicker) return false;\n    this.symbols.push({\n      symbolTicker: symbolSetSearchResult.symbolTicker,\n      name: symbolSetSearchResult.name,\n      currency: symbolSetSearchResult.currency,\n      performanceSincePortfolioStart: 1,\n      annualizedPerformanceSincePortfolioStart: 1,\n      isVisible: true,\n      value: 100,\n      endValue: 0,\n      totalDividendPayout: 0,\n      color: chartColors.nextAvailableColorValue(),\n      dateFetched: \"-\",\n    });\n\n    await symbolDataStore.addSymbolToMap(symbolSetSearchResult.symbolTicker);\n    await this.getMetaDataAndStoreIt(symbolSetSearchResult.symbolTicker);\n\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRerenderPortfolio(true);\n  }\n\n  async addSymbolFromSavedPortfolio(symbolSet) {\n    if (!symbolSet || !symbolSet.symbolTicker) return false;\n    this.symbols.push(symbolSet);\n\n    await symbolDataStore.addSymbolToMap(symbolSet.symbolTicker);\n    await this.getMetaDataAndStoreIt(symbolSet.symbolTicker);\n  }\n\n  async removeAndDeleteSymbol(symbolTickerToDelete) {\n    await this.removeSelectedSymbol(symbolTickerToDelete);\n    await this.deleteDataSetForSymbol(symbolTickerToDelete);\n  }\n\n  async removeSelectedSymbol(symbolTickerToRemove) {\n    chartColors.removeColorInUse(this.getSymbolSetForTicker(symbolTickerToRemove).color);\n    this.symbols = this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== symbolTickerToRemove);\n\n    await symbolDataStore.removeSymbolFromMap(symbolTickerToRemove);\n\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRerenderPortfolio(true);\n  }\n\n  async deleteDataSetForSymbol(symbolTickerToDelete) {\n    await symbolDataStore.deleteDataSet(symbolTickerToDelete);\n  }\n\n  async resetStore() {\n    // Clear colors\n    this.symbols.forEach((symbolSet) => chartColors.removeColorInUse(symbolSet.color));\n    // Reset symbols\n    this.symbols = [defaultPortfolio];\n    // Reset portfolioStartingDate\n    this.portfolioStartingDate = moment().subtract(1, \"years\").format(\"YYYY-MM-DD\");\n    // Reset symbolDataStore\n    await symbolDataStore.resetStore();\n  }\n\n  toggleSymbolVisibility(changedSymbolbyTicker) {\n    console.log(changedSymbolbyTicker);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolbyTicker) {\n        symbol.isVisible = !symbol.isVisible;\n      }\n    });\n    this.setTriggerRerenderVisibleLines(true);\n  }\n\n  setVisibilityForHideOther(symbolToShow) {\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === symbolToShow) {\n        symbol.isVisible = true;\n      } else {\n        symbol.isVisible = false;\n      }\n    });\n    this.setTriggerRerenderVisibleLines(true);\n  }\n\n  setValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating value: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.value = value;\n      }\n    });\n  }\n\n  setDateFetchedForTicker(changedSymbolByTicker, date) {\n    console.log(\"Updating dateFetched: \" + date);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.dateFetched = date;\n      }\n    });\n  }\n\n  setPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating performanceSincePortfolioStart: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.performanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setAnnualizedPerformanceSincePortfolioStartForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setAnnualizedPerformanceSincePortfolioStartForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.annualizedPerformanceSincePortfolioStart = value;\n      }\n    });\n  }\n\n  setEndValueForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setEndValueForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.endValue = value;\n      }\n    });\n  }\n\n  setTotalDividendPayoutForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setTotalDividendPayoutForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol.totalDividendPayout = value;\n      }\n    });\n  }\n\n  setSharpRatioForTicker(changedSymbolByTicker, value) {\n    console.log(\"Updating setSharpRatioForTicker: \" + value);\n    this.symbols.forEach((symbol) => {\n      if (symbol.symbolTicker === changedSymbolByTicker) {\n        symbol[\"sharpRatio\"] = value;\n      }\n    });\n  }\n\n  // portfolioStartingDate operations\n  setPortfolioStartingDate(date) {\n    this.portfolioStartingDate = date;\n  }\n\n  // portfolioBuilderSetting operations\n  setPortfolioBuilderSetting(newVal) {\n    this.portfolioBuilderSetting = newVal;\n  }\n\n  // areTriggersEnabled operations\n  setAreTriggersEnabled(val) {\n    this.areTriggersEnabled = val;\n  }\n  // triggerRerenderPortfolio operations\n  setTriggerRerenderPortfolio(bool) {\n    this.triggerRerenderPortfolio = bool;\n  }\n\n  // triggerRerenderVisibleLines operations\n  setTriggerRerenderVisibleLines(bool) {\n    this.triggerRerenderVisibleLines = bool;\n  }\n\n  // Computed methodes\n  get totalValueOfSymbols() {\n    return this.symbols.reduce((pv, symbolSet) => {\n      if (symbolSet.symbolTicker !== \"Portfolio\") return +pv + +symbolSet.value;\n      else return pv;\n    }, 0);\n  }\n\n  get symbolsWithoutPortfolio() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n  }\n\n  get symbolPortfolioOnly() {\n    return this.symbols.filter((symbolSet) => symbolSet.symbolTicker === \"Portfolio\");\n  }\n\n  get symbolsSortedByTickerPortfolioFirst() {\n    let temp = this.symbols;\n    temp = temp.slice().sort(compareSymbolSetsByTickerPortfolioFirst);\n    return temp;\n  }\n\n  get symbolsSortedByPortfolioBuilderSetting() {\n    let temp = this.symbols;\n    if (this.portfolioBuilderSetting === \"ticker\") {\n      temp = temp.slice().sort(compareSymbolSetsByTicker);\n    } else if (this.portfolioBuilderSetting === \"name\") {\n      temp = temp.slice().sort(compareSymbolSetsByName);\n    } else if (this.portfolioBuilderSetting === \"performance_annualized\") {\n      temp = temp.slice().sort(compareSymbolSetsByPerformanceAnnulized);\n    } else if (this.portfolioBuilderSetting === \"performance_since_start\") {\n      temp = temp.slice().sort(compareSymbolSetsByPerformanceSinceStart);\n    } else if (this.portfolioBuilderSetting === \"value\") {\n      temp = temp.slice().sort(compareSymbolSetsByValue);\n    }\n    return temp;\n  }\n\n  get symbolsSortedByTickerWithoutPortfolio() {\n    let temp = this.symbols;\n    temp = temp.filter((symbolSet) => symbolSet.symbolTicker !== \"Portfolio\");\n    temp = temp.slice().sort(compareSymbolSetsByTickerPortfolioFirst);\n    return temp;\n  }\n\n  get listOfSymbolTickers() {\n    return this.symbols.map((symbolSet) => symbolSet.symbolTicker);\n  }\n\n  // Helper operations\n  async getMetaDataAndStoreIt(symbolTicker) {\n    //  Get meta data and store it inside this store\n    const metaData = await symbolDataStore.getMetaDataForSymbol(symbolTicker);\n    this.setDateFetchedForTicker(symbolTicker, metaData.date_fetched);\n  }\n\n  async reloadDataFor(symbolTickerToReload) {\n    this.setDateFetchedForTicker(symbolTickerToReload, \"-\");\n    await this.deleteDataSetForSymbol(symbolTickerToReload);\n    await symbolDataStore.removeSymbolFromMap(symbolTickerToReload);\n    await symbolDataStore.addSymbolToMap(symbolTickerToReload);\n    await this.getMetaDataAndStoreIt(symbolTickerToReload);\n  }\n\n  async doesSymbolExist(symbolTicker) {\n    let doesExist = false;\n    this.symbols.forEach((symbolSet) => {\n      if (symbolSet.symbolTicker === symbolTicker) {\n        doesExist = true;\n      }\n    });\n    return doesExist;\n  }\n\n  getSymbolSetForTicker(symbolTicker) {\n    return this.symbols.find((symbolSet) => symbolSet.symbolTicker === symbolTicker);\n  }\n\n  async saveCurrentPortfolio(name) {\n    console.log(\"saveCurrentPortfolio\");\n    await idbPortfoliosStore.set({\n      name: name,\n      creationDate: moment().format(),\n      portfolioStartingDate: this.portfolioStartingDate,\n      symbols: toJS(this.symbols),\n    });\n  }\n\n  async getListOfAllSavedPortfolioNames() {\n    return await idbPortfoliosStore.getInfoOfAllSavedPortfolios();\n  }\n\n  async loadSavedPortfolio(portfolioName) {\n    console.log(\"loadSavedPortfolio: \" + portfolioName);\n    this.setAreTriggersEnabled(false);\n    const savedPortfolio = await idbPortfoliosStore.get(portfolioName);\n    if (!savedPortfolio) {\n      console.log(\"Failed to load portfolio: \" + portfolioName);\n      this.areTriggersEnabled = false;\n      return;\n    }\n\n    await this.resetStore();\n    // Remove defaultPortfolio from symbols\n    this.symbols = [];\n    this.setPortfolioStartingDate(savedPortfolio.portfolioStartingDate);\n\n    await Promise.all(\n      savedPortfolio.symbols.map(async (symbolSet) => {\n        await this.addSymbolFromSavedPortfolio(symbolSet);\n      })\n    );\n    // Trigger line and recalculation\n    this.setAreTriggersEnabled(true);\n    this.setTriggerRerenderVisibleLines(true);\n    this.setTriggerRerenderPortfolio(true);\n  }\n}\n\nconst compareSymbolSetsByTicker = (a, b) => {\n  if (a.symbolTicker < b.symbolTicker) {\n    return -1;\n  }\n  if (a.symbolTicker > b.symbolTicker) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByTickerPortfolioFirst = (a, b) => {\n  if (b.symbolTicker === \"Portfolio\") {\n    return 1;\n  }\n  if (a.symbolTicker < b.symbolTicker) {\n    return -1;\n  }\n  if (a.symbolTicker > b.symbolTicker) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByPerformanceAnnulized = (a, b) => {\n  if (a.annualizedPerformanceSincePortfolioStart > b.annualizedPerformanceSincePortfolioStart) {\n    return -1;\n  }\n  if (a.annualizedPerformanceSincePortfolioStart < b.annualizedPerformanceSincePortfolioStart) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByPerformanceSinceStart = (a, b) => {\n  if (a.performanceSincePortfolioStart > b.performanceSincePortfolioStart) {\n    return -1;\n  }\n  if (a.performanceSincePortfolioStart < b.performanceSincePortfolioStart) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByName = (a, b) => {\n  if (a.name < b.name) {\n    return -1;\n  }\n  if (a.name > b.name) {\n    return 1;\n  }\n  return 0;\n};\nconst compareSymbolSetsByValue = (a, b) => {\n  if (a.value > b.value) {\n    return -1;\n  }\n  if (a.value < b.value) {\n    return 1;\n  }\n  return 0;\n};\n\nconst portfolioStore = new PortfolioStore();\nexport default portfolioStore;\n","import React from \"react\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport { observer } from \"mobx-react-lite\";\nimport FetchDataService from \"../services/FetchDataService\";\n\nconst filterOptions = createFilterOptions({\n  matchFrom: \"any\",\n  stringify: (option) => `${option.symbolTicker}-${option.name}`,\n});\n\nconst SearchForSymbolInput = observer(({ portfolioStore, notificationStore }) => {\n  const [searchOptions, setSearchOptions] = React.useState([]);\n  const [isLoadingSearch, setIsLoadingSearch] = React.useState(false);\n  const [searchTimeout, setSearchTimeout] = React.useState(null);\n  const [value, setValue] = React.useState(searchOptions[0]);\n\n  const handleValueChange = async (keywords) => {\n    const handleSearch = async (keywords) => {\n      setIsLoadingSearch(true);\n      const res = await FetchDataService.searchAlphaVantageByKeywords(keywords);\n      setIsLoadingSearch(false);\n      if (res) setSearchOptions(res);\n    };\n\n    if (searchTimeout) clearTimeout(searchTimeout);\n    if (!keywords) return;\n    const timeout = setTimeout(async () => {\n      await handleSearch(keywords);\n    }, 500);\n    setSearchTimeout(timeout);\n  };\n\n  const handleSearchSelect = async (symbolSearchResult) => {\n    const doesExist = await portfolioStore.doesSymbolExist(symbolSearchResult.symbolTicker);\n\n    if (doesExist) {\n      notificationStore.enqueueSnackbar({\n        message: `Symbol: ${symbolSearchResult.symbolTicker} already part of portfolio`,\n        options: {\n          variant: \"warning\",\n          autoHideDuration: 2000,\n        },\n        key: `SYMBOL-DUPLICATE-${symbolSearchResult.symbolTicker}`,\n      });\n    } else {\n      portfolioStore.addSymbol(symbolSearchResult);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"combo-box-demo\"\n      loading={isLoadingSearch}\n      value={value}\n      onChange={(event, symbolSearchResult) => {\n        setValue(\"\");\n        if (symbolSearchResult && symbolSearchResult.symbolTicker) handleSearchSelect(symbolSearchResult);\n      }}\n      options={searchOptions}\n      filterOptions={filterOptions}\n      renderOption={(option) => (\n        <div>\n          <Typography>{option.name}</Typography>\n          <Typography variant=\"caption\">\n            {option.symbolTicker} - {option.region} - {option.currency}\n          </Typography>\n        </div>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Add Asset\"\n          variant=\"outlined\"\n          onChange={(event) => handleValueChange(event.target.value)}\n        />\n      )}\n      style={{ minWidth: \"100px\", paddingRight: \"10px\" }}\n    />\n  );\n});\nexport default SearchForSymbolInput;\n","import React, { useEffect, useState } from \"react\";\nimport { Dialog, DialogTitle, List, ListItem, ListItemText, ListItemAvatar, Avatar } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\n\nconst DialogPortfolioList = ({ onClose, selectedValue, open, portfolioStore }) => {\n  const [portfolios, setPortfolios] = useState([]);\n\n  useEffect(() => {\n    getPortfolios();\n  });\n\n  const getPortfolios = async () => {\n    const _portfolios = await portfolioStore.getListOfAllSavedPortfolioNames();\n    setPortfolios(_portfolios);\n  };\n\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  const handleLoadPortfolio = (portfolioName) => {\n    portfolioStore.loadSavedPortfolio(portfolioName);\n    onClose();\n  };\n\n  return (\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">Load a saved Portfolio</DialogTitle>\n      <List>\n        {portfolios.map((storedPortfolio) => (\n          <ListItem button onClick={() => handleLoadPortfolio(storedPortfolio.name)} key={storedPortfolio.name}>\n            <ListItemAvatar>\n              <Avatar>\n                <DonutLargeIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={storedPortfolio.name} secondary={storedPortfolio.creationDate} />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  );\n};\nexport default DialogPortfolioList;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst DialogPortfolioSaveForm = ({ open, onClose, portfolioStore, notificationStore }) => {\n  const [portfolioName, setPortfolioName] = React.useState(\"\");\n\n  const handleSavePortfolio = async () => {\n    console.log(portfolioName);\n    await portfolioStore.saveCurrentPortfolio(portfolioName);\n    notificationStore.enqueueSnackbar({\n      message: `Saved current Portfolio: ${portfolioName}`,\n      options: {\n        variant: \"success\",\n        autoHideDuration: 2000,\n      },\n      key: `STORED-${portfolioName}`,\n    });\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Save Portfolio</DialogTitle>\n      <DialogContent>\n        <DialogContentText>Save the current Portfolio to reuse later.</DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"name\"\n          label=\"Portfolio Name\"\n          type=\"texts\"\n          fullWidth\n          onChange={(e) => setPortfolioName(e.target.value)}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSavePortfolio} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DialogPortfolioSaveForm;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Chip, Grid, Menu, MenuItem, ListItemIcon, Typography, Badge, IconButton } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport MoneyIcon from \"@material-ui/icons/Money\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport { observer } from \"mobx-react-lite\";\nimport SearchForSymbolInput from \"../components/SearchForSymbolInput\";\nimport moment from \"moment\";\nimport DialogPortfolioList from \"./DialogPortfolioList\";\nimport DialogPortfolioSaveForm from \"./DialogPortfolioSaveForm\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n  divider: { backgroundColor: \"#829baf\", width: \"100%\", height: \"2px\" },\n}));\n\nconst SelectedSymbolsBar = observer(({ portfolioStore, notificationStore }) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [isNormalMenuOpen, setIsNormalMenuOpen] = React.useState(false);\n  const [isPortfolioMenuOpen, setIsPortfolioMenuOpen] = React.useState(false);\n  const [menuSelectedSymbolSet, setMenuSelectedSymbolSet] = React.useState(null);\n  const [openDialogPortfolioList, setOpenDialogPortfolioList] = React.useState(false);\n  const [selectedPortfolioValue, setSelectedPortfolioValue] = React.useState();\n  const [openDialogPortfolioSaveForm, setOpenDialogPortfolioSaveForm] = React.useState(false);\n\n  const toggleVisibility = (symbolTickerToHide) => () => {\n    portfolioStore.toggleSymbolVisibility(symbolTickerToHide);\n  };\n\n  const handleOnlyShow = (symbolTickerToShow) => {\n    portfolioStore.setVisibilityForHideOther(symbolTickerToShow);\n    handleClose();\n    handlePortfolioClose();\n  };\n\n  const handleMenuClick = (event, symbolSet) => {\n    setMenuSelectedSymbolSet(symbolSet);\n    setAnchorEl(event.currentTarget);\n    setIsNormalMenuOpen(true);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    setIsNormalMenuOpen(false);\n  };\n\n  const handlePortfolioOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    setIsPortfolioMenuOpen(true);\n  };\n\n  const handlePortfolioClose = () => {\n    setAnchorEl(null);\n    setIsPortfolioMenuOpen(false);\n  };\n\n  const isBadgeInvisible = (symbolSet) => {\n    if (symbolSet.symbolTicker === \"Portfolio\") return true;\n    if (symbolSet.dateFetched === \"-\") return false;\n\n    let dateFetched = moment(symbolSet.dateFetched);\n    let today = moment();\n\n    if (today.diff(dateFetched, \"days\") === 0) return true;\n    if (today.isoWeekday() === 6) {\n      if (today.diff(dateFetched, \"days\") <= 1) return true;\n    }\n    if (today.isoWeekday() === 7) {\n      if (today.diff(dateFetched, \"days\") <= 2) return true;\n    }\n    return false;\n  };\n\n  const getBadgeContent = (symbolSet) => {\n    if (symbolSet.dateFetched === \"-\") return \"...\";\n    return \"date\";\n  };\n\n  const handleDialogPortfolioListOpen = () => {\n    setOpenDialogPortfolioList(true);\n  };\n\n  const handleDialogPortfolioListClose = (value) => {\n    setOpenDialogPortfolioList(false);\n    setSelectedPortfolioValue(value);\n  };\n\n  const handleDialogPortfolioSaveFormOpen = () => {\n    setOpenDialogPortfolioSaveForm(true);\n  };\n\n  const handleDialogPortfolioSaveFormClose = () => {\n    setOpenDialogPortfolioSaveForm(false);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <ChipMenuPortfolio\n        anchorEl={anchorEl}\n        isPortfolioMenuOpen={isPortfolioMenuOpen}\n        handlePortfolioClose={handlePortfolioClose}\n        handleOnlyShow={handleOnlyShow}\n      />\n\n      <ChipMenuNormal\n        anchorEl={anchorEl}\n        isNormalMenuOpen={isNormalMenuOpen}\n        handleClose={handleClose}\n        handleOnlyShow={handleOnlyShow}\n        menuSelectedSymbolSet={menuSelectedSymbolSet}\n        portfolioStore={portfolioStore}\n      />\n\n      {openDialogPortfolioList && (\n        <DialogPortfolioList\n          selectedValue={selectedPortfolioValue}\n          open={openDialogPortfolioList}\n          onClose={handleDialogPortfolioListClose}\n          portfolioStore={portfolioStore}\n        />\n      )}\n\n      <DialogPortfolioSaveForm\n        open={openDialogPortfolioSaveForm}\n        onClose={handleDialogPortfolioSaveFormClose}\n        portfolioStore={portfolioStore}\n        notificationStore={notificationStore}\n      />\n\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item xs={2}>\n          <IconButton component=\"span\" onClick={handleDialogPortfolioListOpen}>\n            <FolderIcon />\n          </IconButton>\n          <IconButton component=\"span\" onClick={handleDialogPortfolioSaveFormOpen}>\n            <SaveIcon />\n          </IconButton>\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            {portfolioStore.symbolsSortedByTickerPortfolioFirst.map((symbolSet) => {\n              return (\n                <Badge\n                  color=\"error\"\n                  overlap=\"circle\"\n                  badgeContent={getBadgeContent(symbolSet)}\n                  invisible={isBadgeInvisible(symbolSet)}\n                >\n                  <Chip\n                    key={symbolSet.symbolTicker}\n                    label={symbolSet.symbolTicker}\n                    onClick={toggleVisibility(symbolSet.symbolTicker)}\n                    onDelete={\n                      symbolSet.symbolTicker !== \"Portfolio\"\n                        ? (event) => handleMenuClick(event, symbolSet)\n                        : (event) => handlePortfolioOpen(event)\n                    }\n                    deleteIcon={<InfoIcon />}\n                    className={classes.chip}\n                    color={symbolSet.isVisible ? \"primary\" : \"default\"}\n                    clickable={true}\n                    style={{ backgroundColor: symbolSet.isVisible ? symbolSet.color : \"#eeeeee\" }}\n                  />\n                </Badge>\n              );\n            })}\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <SearchForSymbolInput portfolioStore={portfolioStore} notificationStore={notificationStore} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\n\nconst ChipMenuPortfolio = ({ isPortfolioMenuOpen, handlePortfolioClose, handleOnlyShow, anchorEl }) => {\n  return (\n    <Menu\n      id=\"simple-menu-portfolio\"\n      anchorEl={anchorEl}\n      keepMounted\n      open={isPortfolioMenuOpen}\n      onClose={handlePortfolioClose}\n    >\n      <MenuItem onClick={() => handleOnlyShow(\"Portfolio\")}>\n        <ListItemIcon>\n          <VisibilityIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap color=\"primary\">\n          Hide other assets\n        </Typography>\n      </MenuItem>\n    </Menu>\n  );\n};\n\nconst ChipMenuNormal = ({\n  anchorEl,\n  isNormalMenuOpen,\n  handleClose,\n  handleOnlyShow,\n  menuSelectedSymbolSet,\n  portfolioStore,\n}) => {\n  const classes = useStyles();\n  const handleRemoveFromPortfolio = (symbolTickerToRemove) => {\n    portfolioStore.removeSelectedSymbol(symbolTickerToRemove);\n    handleClose();\n  };\n\n  const handleDeleteDataSet = (symbolTickerToDelete) => {\n    portfolioStore.removeAndDeleteSymbol(symbolTickerToDelete);\n    handleClose();\n  };\n\n  const handleReloadDataSet = (symbolTickerToDelete) => {\n    portfolioStore.reloadDataFor(symbolTickerToDelete);\n    handleClose();\n  };\n  return (\n    <Menu\n      id=\"simple-menu\"\n      anchorEl={anchorEl}\n      keepMounted\n      open={isNormalMenuOpen}\n      onClose={handleClose}\n      handleOnlyShow={handleOnlyShow}\n    >\n      <MenuItem>\n        <ListItemIcon>\n          <InfoIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap>\n          {menuSelectedSymbolSet ? menuSelectedSymbolSet.name : null}\n        </Typography>\n      </MenuItem>\n      <MenuItem>\n        <ListItemIcon>\n          <MoneyIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap>\n          {menuSelectedSymbolSet ? menuSelectedSymbolSet.currency : \"-\"}\n        </Typography>\n      </MenuItem>\n      <MenuItem>\n        <ListItemIcon>\n          <TodayIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap>\n          {menuSelectedSymbolSet ? menuSelectedSymbolSet.dateFetched : \"-\"}\n        </Typography>\n      </MenuItem>\n      <MenuItem>\n        <span className={classes.divider} />\n      </MenuItem>\n      <MenuItem onClick={() => handleOnlyShow(menuSelectedSymbolSet.symbolTicker)}>\n        <ListItemIcon>\n          <VisibilityIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap color=\"primary\">\n          Hide other assets\n        </Typography>\n      </MenuItem>\n      <MenuItem onClick={() => handleReloadDataSet(menuSelectedSymbolSet.symbolTicker)}>\n        <ListItemIcon>\n          <RefreshIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap color=\"primary\">\n          Reload data\n        </Typography>\n      </MenuItem>\n      <MenuItem onClick={() => handleRemoveFromPortfolio(menuSelectedSymbolSet.symbolTicker)}>\n        <ListItemIcon>\n          <DeleteIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap color=\"error\">\n          Remove from Portfolio\n        </Typography>\n      </MenuItem>\n      <MenuItem onClick={() => handleDeleteDataSet(menuSelectedSymbolSet.symbolTicker)}>\n        <ListItemIcon>\n          <DeleteForeverIcon fontSize=\"small\" />\n        </ListItemIcon>\n        <Typography variant=\"inherit\" noWrap color=\"error\">\n          Delete Dataset\n        </Typography>\n      </MenuItem>\n    </Menu>\n  );\n};\n\nexport default SelectedSymbolsBar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\n\nconst useStyles = makeStyles({ tabellCellClickable: { cursor: \"pointer\" } });\n\nconst PortfolioBuilder = observer(({ portfolioStore }) => {\n  const classes = useStyles();\n  let index = 1;\n\n  const getItemNumber = (symbolTicker) => {\n    if (symbolTicker === \"Portfolio\") {\n      return null;\n    } else {\n      const result = index + \".\";\n      index++;\n      return result;\n    }\n  };\n\n  const setPortfolioBuilderSetting = (newVal) => {\n    portfolioStore.setPortfolioBuilderSetting(newVal);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>No.</TableCell>\n            <TableCell onClick={() => setPortfolioBuilderSetting(\"ticker\")} className={classes.tabellCellClickable}>\n              Symbol\n            </TableCell>\n            <TableCell onClick={() => setPortfolioBuilderSetting(\"name\")} className={classes.tabellCellClickable}>\n              Name\n            </TableCell>\n            <TableCell\n              id=\"annualized\"\n              align=\"right\"\n              onClick={() => setPortfolioBuilderSetting(\"performance_annualized\")}\n              className={classes.tabellCellClickable}\n            >\n              Annualized Performance\n            </TableCell>\n            <TableCell\n              id=\"performance\"\n              align=\"right\"\n              onClick={() => setPortfolioBuilderSetting(\"performance_since_start\")}\n              className={classes.tabellCellClickable}\n            >\n              Performance since start\n            </TableCell>\n            <TableCell\n              align=\"right\"\n              style={{ maxWidth: \"80px\" }}\n              onClick={() => setPortfolioBuilderSetting(\"value\")}\n              className={classes.tabellCellClickable}\n            >\n              Value\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {portfolioStore.symbolsSortedByPortfolioBuilderSetting.map((symbolSet) => {\n            return (\n              <TableRow key={symbolSet.symbolTicker}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {getItemNumber(symbolSet.symbolTicker)}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  {symbolSet.symbolTicker === \"Portfolio\" ? <b>{symbolSet.symbolTicker}</b> : symbolSet.symbolTicker}\n                </TableCell>\n                <TableCell align=\"left\">\n                  {symbolSet.name === \"Portfolio\" ? <b>{symbolSet.name}</b> : symbolSet.name}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {performanceToPercent(symbolSet.annualizedPerformanceSincePortfolioStart)}\n                </TableCell>\n                <TableCell align=\"right\">{performanceToPercent(symbolSet.performanceSincePortfolioStart)}</TableCell>\n                <TableCell align=\"right\">\n                  {symbolSet.symbolTicker === \"Portfolio\" ? (\n                    <Typography noWrap>End: ${symbolSet.endValue.toFixed(2)}</Typography>\n                  ) : (\n                    <input\n                      type=\"text\"\n                      value={symbolSet.value}\n                      onChange={(event) => portfolioStore.setValueForTicker(symbolSet.symbolTicker, event.target.value)}\n                      style={{ maxWidth: \"60px\" }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell />\n          <TableCell align=\"right\">\n            <Typography noWrap>Total: ${portfolioStore.totalValueOfSymbols}</Typography>\n          </TableCell>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(2) + \"%\";\n}\n\nexport default PortfolioBuilder;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default function KeyMetricsDialog({ dialogTitle, dialogText, handleClose, open }) {\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{dialogTitle}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{dialogText}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Paper, Typography, CircularProgress } from \"@material-ui/core\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport KeyMetricsDialog from \"./KeyMetricsDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  grid: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  title: {\n    fontSize: 16,\n  },\n}));\nconst KeyMetricCard = ({\n  titel,\n  description,\n  value = 0,\n  showPercent = false,\n  showProgress = true,\n  dialogTitle,\n  dialogText,\n}) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    console.log(\"click\");\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid\n          container\n          item\n          direction=\"column\"\n          justify=\"space-between\"\n          alignItems=\"flex-start\"\n          className={classes.grid}\n        >\n          <Grid item container direction=\"row\" justify=\"space-between\">\n            <Grid item>\n              <Typography className={classes.title} color=\"textPrimary\">\n                {titel}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <InfoOutlinedIcon onClick={handleClickOpen} style={{ cursor: \"pointer\" }} />\n            </Grid>\n          </Grid>\n          <Grid item style={{ alignSelf: \"center\" }}>\n            <Typography variant=\"h3\" component=\"h2\">\n              {value ? (\n                showPercent ? (\n                  performanceToPercent(value)\n                ) : (\n                  value.toFixed(2)\n                )\n              ) : showProgress ? (\n                <CircularProgress />\n              ) : (\n                value\n              )}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"caption\" component=\"p\">\n              {description}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n      <KeyMetricsDialog\n        open={open}\n        handleClickOpen={handleClickOpen}\n        handleClose={handleClose}\n        dialogTitle={dialogTitle}\n        dialogText={dialogText}\n      />\n    </div>\n  );\n};\n\nfunction performanceToPercent(performance) {\n  return (parseFloat(performance) * 100).toFixed(0) + \"%\";\n}\n\nexport default KeyMetricCard;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Typography, Link } from \"@material-ui/core\";\nimport KeyMetricCard from \"./KeyMetricCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: 0,\n    margin: 0,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    width: theme.spacing(20),\n    height: theme.spacing(20),\n  },\n  title: {\n    fontSize: 14,\n  },\n}));\n\nconst KeyIndicatorRow = observer(({ portfolioStore, keyMetricsStore }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3} justify=\"space-evenly\" alignItems=\"center\">\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Peformance\"}\n            description={\"Portfolio performance since start\"}\n            value={\n              portfolioStore.getSymbolSetForTicker(\"Portfolio\")\n                ? portfolioStore.getSymbolSetForTicker(\"Portfolio\").performanceSincePortfolioStart\n                : 0\n            }\n            showPercent={true}\n            dialogTitle={\"Performance since start\"}\n            dialogText={\n              <div>\n                <Typography>\n                  Shows the performance of the portfolio since the given start date based on the configured start\n                  values.\n                </Typography>\n                <Typography>Dividends are reinvested and not payed out.</Typography>\n              </div>\n            }\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Annualized\"}\n            description={\"Annualized portfolio performance since start\"}\n            value={\n              portfolioStore.getSymbolSetForTicker(\"Portfolio\")\n                ? portfolioStore.getSymbolSetForTicker(\"Portfolio\").annualizedPerformanceSincePortfolioStart\n                : 0\n            }\n            showPercent={true}\n            dialogTitle={\"Annualized Performance\"}\n            dialogText={\n              <div>\n                <Typography>\n                  Shows the annualized performance of the portfolio since the given start date. Total perfomance is\n                  divided by the number of days since start and then multiplied by 252 days.\n                </Typography>\n                <Typography>Assumption: A regular year has 252 trading days.</Typography>\n              </div>\n            }\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Dividend\"}\n            description={\"Dividends accumulated since start\"}\n            value={\n              portfolioStore.getSymbolSetForTicker(\"Portfolio\")\n                ? portfolioStore.getSymbolSetForTicker(\"Portfolio\").totalDividendPayout\n                : 0\n            }\n            showProgress={false}\n            dialogTitle={\"Dividends\"}\n            dialogText={\n              <div>\n                <Typography>\n                  Total amount of dividends since portfolio start based on the amount of each share.\n                </Typography>\n                <Typography color=\"error\">\n                  IMPORTANT: Dividends are not payed out, they are reinvested into the stock which payed the dividend.\n                </Typography>\n              </div>\n            }\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <KeyMetricCard\n            titel={\"Sharp Ratio\"}\n            description={\"Return compared to configured risk\"}\n            value={keyMetricsStore.portfolioSharpRatio}\n            dialogTitle={\"Sharp Ratio\"}\n            dialogText={\n              <div>\n                <Typography>\n                  ‚The Sharpe ratio was developed by Nobel laureate William F. Sharpe and is used to help investors\n                  understand the return of an investment compared to its risk. The ratio is the average return earned in\n                  excess of the risk-free rate per unit of volatility or total risk. Volatility is a measure of the\n                  price fluctuations of an asset or portfolio.’ -{\" \"}\n                  <Link href=\"https://www.investopedia.com/terms/s/sharperatio.asp\" target=\"_blank\" rel=\"noreferrer\">\n                    Investopedia\n                  </Link>\n                </Typography>\n                <Typography>Calculated with the configured risk free rate.</Typography>\n              </div>\n            }\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nexport default KeyIndicatorRow;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\n\nconst DatePicker = observer(({ portfolioStore }) => {\n  const handleDateChange = (date) => {\n    const dateString = date.format(\"YYYY-MM-DD\");\n\n    // Regex to evaluate YYYY-MM-DD  format\n    const patternDateFormat = /^\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;\n\n    // If a match exists then set portfolioStartingDate\n    if (patternDateFormat.exec(dateString)) {\n      portfolioStore.setPortfolioStartingDate(dateString);\n    }\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"yyyy-MM-DD\"\n        margin=\"normal\"\n        id=\"date-picker-starting-datet\"\n        label=\"Starting date\"\n        value={portfolioStore.portfolioStartingDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n});\n\nexport default DatePicker;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Typography, Slider, Grid } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport DatePicker from \"./DatePicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(2),\n  },\n  gridItem: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst marks = [\n  {\n    value: -1.5,\n    label: \"-1.5%\",\n  },\n  {\n    value: 0,\n    label: \"0%\",\n  },\n  {\n    value: 1,\n    label: \"1%\",\n  },\n  {\n    value: 5,\n    label: \"5%\",\n  },\n  {\n    value: 10,\n    label: \"10%\",\n  },\n];\n\nfunction valuetext(value) {\n  return `${value}%`;\n}\n\nconst ChartConfigurationCard = observer(({ configStore, portfolioStore }) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root} elevation={1}>\n      <Typography variant=\"h4\" gutterBottom>\n        Configurations\n      </Typography>\n      <Grid container spacing={3} xs={12} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <DatePicker portfolioStore={portfolioStore} />\n        </Grid>\n        <Grid item xs={6} style={{ backgroundColor: \"\" }} className={classes.gridItem}>\n          <Typography id=\"discrete-slider-custom\" gutterBottom>\n            Risk Free Rate: {JSON.stringify(configStore.riskFreeRate)}%\n          </Typography>\n          <Slider\n            defaultValue={configStore.riskFreeRate}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"discrete-slider-custom\"\n            min={-1.5}\n            max={10}\n            step={0.1}\n            valueLabelDisplay=\"auto\"\n            marks={marks}\n            onChangeCommitted={(e, val) => configStore.setRiskFreeRate(val)}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n});\n\nexport default ChartConfigurationCard;\n","import React from \"react\";\nimport { FormGroup, FormControlLabel, Switch } from \"@material-ui/core\";\n\nexport default function ChartSwitchStyle({ selectedChartStyleType, switchStyle }) {\n  const [state, setState] = React.useState({\n    checkedA: true,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    switchStyle();\n  };\n\n  return (\n    <FormGroup row>\n      <FormControlLabel\n        control={<Switch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />}\n        label={selectedChartStyleType}\n      />\n    </FormGroup>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRerenderPortfolio = observer(({ portfolioStore, rerenderPortfolio }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRerenderPortfolio\");\n      if (portfolioStore.triggerRerenderPortfolio && portfolioStore.areTriggersEnabled) rerenderPortfolio();\n      portfolioStore.setTriggerRerenderPortfolio(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerRerenderPortfolio;\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerShowVisibleLines = observer(({ portfolioStore, rerenderVisibleLines }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerShowVisibleLines\");\n      if (portfolioStore.triggerRerenderVisibleLines && portfolioStore.areTriggersEnabled) rerenderVisibleLines();\n      portfolioStore.setTriggerRerenderVisibleLines(false);\n    })\n  );\n\n  return <div />;\n});\nexport default TriggerShowVisibleLines;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport { Paper, LinearProgress } from \"@material-ui/core\";\nimport ChartSwitchStyle from \"./ChartSwitchStyle\";\nimport TriggerRerenderPortfolio from \"./TriggerRerenderPortfolio\";\nimport TriggerShowVisibleLines from \"./TriggerShowVisibleLines\";\nimport symbolDataStore from \"../stores/SymbolDataStore\";\n\nexport default class ChartPortfolioOverview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedChartStyleType: \"percent\",\n    };\n    this.myRef = React.createRef();\n    this.chart = {};\n    this.lineSeriesObj = {};\n\n    this.rerenderPortfolio = this.rerenderPortfolio.bind(this);\n    this.rerenderVisibleLines = this.rerenderVisibleLines.bind(this);\n    this.switchStyle = this.switchStyle.bind(this);\n    this.createGraphForSelectedSymbols = this.createGraphForSelectedSymbols.bind(this);\n    this.addLineSeriesData = this.addLineSeriesData.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n    if (!this.props.configStore.isRunningSetup) this.createGraphForSelectedSymbols();\n  }\n\n  renderChart() {\n    if (this.myRef.current.firstChild) {\n      this.myRef.current.removeChild(this.myRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(\n      this.myRef.current,\n      this.state.selectedChartStyleType === \"percent\" ? stylePercent : styleAbsolut\n    );\n  }\n\n  async rerenderPortfolio() {\n    this.addLineSeriesData(this.props.portfolioStore.getSymbolSetForTicker(\"Portfolio\"));\n  }\n\n  rerenderVisibleLines() {\n    this.createGraphForSelectedSymbols();\n  }\n\n  switchStyle() {\n    console.log(\"switching style\");\n    if (this.state.selectedChartStyleType === \"absolut\") {\n      this.setState({ selectedChartStyleType: \"percent\" });\n      this.chart.applyOptions(stylePercent);\n    } else if (this.state.selectedChartStyleType === \"percent\") {\n      this.setState({ selectedChartStyleType: \"absolut\" });\n      this.chart.applyOptions(styleAbsolut);\n    }\n  }\n\n  async createGraphForSelectedSymbols() {\n    console.log(\"createGraphForSelectedSymbols\");\n\n    // Remove lines for deleted symbols\n    const tempListOfAllSymbols = this.props.portfolioStore.listOfSymbolTickers;\n    for (const [symbolTicker, lineSeries] of Object.entries(this.lineSeriesObj)) {\n      // Check if ticker in portfolioStore symbols, if then remove lineseries\n      if (!tempListOfAllSymbols.includes(symbolTicker)) {\n        this.chart.removeSeries(lineSeries[\"series\"]);\n        delete this.lineSeriesObj[symbolTicker];\n      }\n    }\n\n    this.props.portfolioStore.symbols.forEach((symbolSet) => {\n      if (symbolSet.isVisible) {\n        this.addLineSeriesData(symbolSet);\n      } else {\n        if (this.lineSeriesObj[symbolSet.symbolTicker] && this.lineSeriesObj[symbolSet.symbolTicker][\"series\"]) {\n          let tempLineSeries = this.lineSeriesObj[symbolSet.symbolTicker][\"series\"];\n          this.chart.removeSeries(tempLineSeries);\n          delete this.lineSeriesObj[symbolSet.symbolTicker];\n        }\n      }\n    });\n  }\n\n  async addLineSeriesData(symbolSet) {\n    console.log(\"addLineSeriesData: \" + symbolSet.symbolTicker);\n\n    // TODO If data not availible then fetch data\n    const dataForSymbol = await symbolDataStore.getSymbolTimeseriesDataFromMap(symbolSet.symbolTicker);\n\n    if (!this.lineSeriesObj[symbolSet.symbolTicker]) {\n      // If lineSeriesObj for ticker does not exist then create new lineSeriesObj\n      let tempLineSeries = this.chart.addLineSeries({\n        color: symbolSet.color,\n      });\n      if (dataForSymbol && dataForSymbol.length !== 0) {\n        tempLineSeries.setData(dataForSymbol);\n      }\n      // Create new lineSeries Object\n      this.lineSeriesObj[symbolSet.symbolTicker] = { series: tempLineSeries, color: symbolSet.color };\n    } else {\n      // If lineSeries exists then only update data, keep color\n      if (dataForSymbol && dataForSymbol.length !== 0)\n        this.lineSeriesObj[symbolSet.symbolTicker][\"series\"].setData(dataForSymbol);\n    }\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\" }}>\n        <ChartSwitchStyle\n          refreshData={this.refreshData}\n          switchStyle={this.switchStyle}\n          selectedChartStyleType={this.state.selectedChartStyleType === \"absolut\" ? \"absolut\" : \"percent\"}\n        />\n        <CalculatingProgress symbolDataStore={this.props.symbolDataStore} />\n        <div ref={this.myRef} id=\"chart-ref\"></div>\n        <TriggerRerenderPortfolio\n          portfolioStore={this.props.portfolioStore}\n          rerenderPortfolio={this.rerenderPortfolio}\n        />\n        <TriggerShowVisibleLines\n          portfolioStore={this.props.portfolioStore}\n          rerenderVisibleLines={this.rerenderVisibleLines}\n        />\n      </Paper>\n    );\n  }\n}\n\nconst CalculatingProgress = observer(({ symbolDataStore }) => (\n  <div>{symbolDataStore.isCalculatingPortfolioPerformance ? <LinearProgress /> : null}</div>\n));\n\nconst styleAbsolut = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Percentage,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { autorun } from \"mobx\";\n\nconst TriggerRerenderDrawdown = observer(({ keyMetricsStore, rerenderDrawdown }) => {\n  useEffect(() =>\n    autorun(() => {\n      console.log(\"Trigger - TriggerRerenderDrawdown\");\n      if (keyMetricsStore.portfolioDrawdownTimeSeries.length !== 0) rerenderDrawdown();\n    })\n  );\n  return <div />;\n});\nexport default TriggerRerenderDrawdown;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { createChart, PriceScaleMode } from \"lightweight-charts\";\nimport keyMetricsStore from \"../stores/KeyMetricsStore\";\nimport { Paper, LinearProgress } from \"@material-ui/core\";\nimport TriggerRerenderDrawdown from \"./TriggerRerenderDrawdown\";\n\nexport default class ChartDrawdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.drawdownChartRef = React.createRef();\n    this.chart = {};\n    this.drawdownLineSeries = null;\n\n    this.addDrawdownLineSeries = this.addDrawdownLineSeries.bind(this);\n    this.rerenderDrawdown = this.rerenderDrawdown.bind(this);\n  }\n\n  async componentDidMount() {\n    this.renderChart();\n    this.addDrawdownLineSeries();\n  }\n\n  renderChart() {\n    if (this.drawdownChartRef.current.firstChild) {\n      this.drawdownChartRef.current.removeChild(this.drawdownChartRef.current.firstChild);\n      this.chart = null;\n    }\n    this.chart = createChart(this.drawdownChartRef.current, stylePercent);\n\n    // Create lineSeries and add it to the chart\n    this.drawdownLineSeries = this.chart.addLineSeries({\n      color: \"#f44336\",\n      priceLineVisible: false,\n      priceFormat: {\n        type: \"custom\",\n        minMove: 0.01,\n        formatter: (value) => value.toFixed(2) + \"%\",\n      },\n    });\n  }\n\n  async addDrawdownLineSeries() {\n    this.drawdownLineSeries.setData(keyMetricsStore.portfolioDrawdownTimeSeries);\n  }\n\n  rerenderDrawdown() {\n    this.addDrawdownLineSeries();\n  }\n\n  render() {\n    return (\n      <Paper style={{ padding: \"10px\" }}>\n        <CalculatingProgress keyMetricsStore={this.props.keyMetricsStore} />\n        <div ref={this.drawdownChartRef} id=\"chart-ref\"></div>\n        <TriggerRerenderDrawdown\n          keyMetricsStore={this.props.keyMetricsStore}\n          rerenderDrawdown={this.rerenderDrawdown}\n        />\n      </Paper>\n    );\n  }\n}\n\nconst CalculatingProgress = observer(({ keyMetricsStore }) => (\n  <div>{keyMetricsStore.portfolioDrawdownTimeSeries.length === 0 ? <LinearProgress /> : null}</div>\n));\n\nconst stylePercent = {\n  height: 300,\n  rightPriceScale: {\n    scaleMargins: {\n      top: 0.1,\n      bottom: 0.1,\n    },\n    mode: PriceScaleMode.Normal,\n    borderColor: \"rgba(197, 203, 206, 0.4)\",\n  },\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Tabs, Tab, Typography, Box, Paper } from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport ChartPortfolioOverview from \"./ChartPortfolioOverview\";\nimport ChartDrawdown from \"./ChartDrawdown\";\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst TabBar = observer(({ portfolioStore, symbolDataStore, keyMetricsStore, configStore }) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.root}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          centered\n        >\n          <Tab label=\"Overview\" {...a11yProps(0)} />\n          <Tab label=\"Drawdown\" {...a11yProps(1)} />\n        </Tabs>\n      </Paper>\n\n      <TabPanel value={value} index={0}>\n        <ChartPortfolioOverview\n          portfolioStore={portfolioStore}\n          configStore={configStore}\n          symbolDataStore={symbolDataStore}\n        />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <ChartDrawdown keyMetricsStore={keyMetricsStore} />\n      </TabPanel>\n    </div>\n  );\n});\n\nexport default TabBar;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport SelectedSymbolsBar from \"../components/SelectedSymbolsBar\";\nimport PortfolioBuilder from \"../components/PortfolioBuilder\";\nimport KeyMetricRow from \"../components/KeyMetricRow\";\nimport ChartConfigurationCard from \"../components/ChartConfigurationCard\";\nimport TabBar from \"../components/TabBar\";\n\nconst ChartingPage = ({ portfolioStore, notificationStore, configStore, symbolDataStore, keyMetricsStore }) => {\n  return (\n    <div>\n      <Grid container spacing={3}>\n        <Grid item xs={12} spacing={3}>\n          <SelectedSymbolsBar portfolioStore={portfolioStore} notificationStore={notificationStore} />\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <KeyMetricRow portfolioStore={portfolioStore} keyMetricsStore={keyMetricsStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <TabBar\n            portfolioStore={portfolioStore}\n            configStore={configStore}\n            symbolDataStore={symbolDataStore}\n            keyMetricsStore={keyMetricsStore}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <PortfolioBuilder portfolioStore={portfolioStore} />\n        </Grid>\n        <Grid item xs={12}>\n          <ChartConfigurationCard configStore={configStore} portfolioStore={portfolioStore} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ChartingPage;\n","import React from \"react\";\nimport { Paper, Typography, TextField, Link } from \"@material-ui/core\";\n\nconst SettingsPage = ({ configStore }) => {\n  const [apiTimeout, setAPITimeout] = React.useState(null);\n  const handleValueChange = async (newAPIValue) => {\n    const handleAPIValueChange = async (newAPIValue) => {\n      configStore.setAlphaVantageAPITokenIDB(newAPIValue);\n    };\n\n    if (apiTimeout) clearTimeout(apiTimeout);\n    if (!newAPIValue) return;\n    const timeout = setTimeout(async () => {\n      await handleAPIValueChange(newAPIValue);\n    }, 1000);\n    setAPITimeout(timeout);\n  };\n\n  return (\n    <div>\n      <Paper elevation={1} style={{ padding: \"20px\" }}>\n        <Typography variant=\"h1\" gutterBottom>\n          Settings\n        </Typography>\n\n        <Typography variant=\"h6\" gutterBottom>\n          Alpha Vantag API Token\n        </Typography>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"API-Token\"\n          variant=\"outlined\"\n          defaultValue={configStore.alphaVantage.apiToken}\n          onChange={(e) => handleValueChange(e.target.value)}\n        />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          Get your free token here:{\" \"}\n          <Link href=\"https://www.alphavantage.co/support/#api-key\" target=\"_blank\" rel=\"noreferrer\">\n            Alpha Vantage\n          </Link>{\" \"}\n          (Hint: try a random key)\n        </Typography>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","import { Component } from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { inject, observer } from \"mobx-react\";\nimport { autorun } from \"mobx\";\n\nclass Notifier extends Component {\n  displayed = [];\n\n  storeDisplayed = (id) => {\n    this.displayed = [...this.displayed, id];\n  };\n\n  removeDisplayedNotificationByKey(removeKey) {\n    this.displayed = this.displayed.filter((key) => removeKey !== key);\n  }\n\n  componentDidMount() {\n    autorun(() => {\n      const { notifications = [] } = this.props.notificationStore;\n\n      notifications.forEach((notification) => {\n        // Do nothing if snackbar is already displayed\n        if (this.displayed.includes(notification.key)) return;\n        // Display snackbar using notistack\n        this.props.enqueueSnackbar(notification.message, notification.options);\n        // Keep track of snackbars that we've displayed\n        this.storeDisplayed(notification.key);\n        // Dispatch action to remove snackbar from mobx store\n        this.props.notificationStore.removeSnackbar(notification.key);\n\n        // Calculate delay to remove notification from this.displayed\n        let delayUntilRemoveMs = 0;\n        if (notification.options && notification.options.autoHideDuration) {\n          delayUntilRemoveMs = notification.options.autoHideDuration + 100;\n        } else {\n          delayUntilRemoveMs = 2100;\n        }\n        // Remove notifaction from this.disyplayed after dealy\n        setTimeout(\n          function () {\n            this.removeDisplayedNotificationByKey(notification.key);\n          }.bind(this),\n          delayUntilRemoveMs\n        );\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withSnackbar(inject(\"notificationStore\")(observer(Notifier)));\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\n// Content\nimport portfolioStore from \"./stores/PortfolioStore\";\nimport notificationStore from \"./stores/NotificationStore\";\nimport configStore from \"./stores/ConfigStore\";\nimport symbolDataStore from \"./stores/SymbolDataStore\";\nimport ChartingPage from \"./pages/ChartingPage\";\nimport SettingsPage from \"./pages/SettingsPage\";\nimport keyMetricsStore from \"./stores/KeyMetricsStore\";\nimport Notifier from \"./components/Notifier\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: \"nowrap\",\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: \"hidden\",\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [pages, setPages] = React.useState({ chartingPage: { showPage: true }, settingsPage: { showPage: false } });\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handlePageSelect = (pageToShow) => {\n    const tempPages = {};\n    for (const [page] of Object.entries(pages)) {\n      if (page === pageToShow) tempPages[page] = { showPage: true };\n      else tempPages[page] = { showPage: false };\n    }\n    setPages(tempPages);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Notifier notificationStore={notificationStore} />\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Historic-Portfolio-Analyzer (0.10.2)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key={\"charting-page\"} onClick={() => handlePageSelect(\"chartingPage\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Chart\"} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key={\"serttings-page\"} onClick={() => handlePageSelect(\"settingsPage\")}>\n            <ListItemIcon>\n              <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Settings\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {pages.chartingPage.showPage ? (\n          <ChartingPage\n            portfolioStore={portfolioStore}\n            notificationStore={notificationStore}\n            configStore={configStore}\n            symbolDataStore={symbolDataStore}\n            keyMetricsStore={keyMetricsStore}\n          />\n        ) : null}\n        {pages.settingsPage.showPage ? <SettingsPage configStore={configStore} /> : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Provider } from 'mobx-react';\nimport notificationStore from \"./stores/NotificationStore\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider notificationStore={notificationStore}>\n    <SnackbarProvider maxSnack={10}>\n      <App />\n    </SnackbarProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}